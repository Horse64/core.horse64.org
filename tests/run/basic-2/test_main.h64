# Copyright (c) 2020-2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

func test_more_basic_things {
    # Test some math:
    var value = (2 + 2 * 3)
    assert(value == 8)

    # Test ternary operator:
    func my_func {
        return 2
    }
    var value = if 1 == my_func() (yes) else (no)
    assert(typename(value) == "bool")
    assert(value == no)

    # Test some list ops:
    var l = [1, 2]
    assert(l.len == 2)
    l.add(3)
    assert(l.len == 3)
    l.reverse()
    assert(l[1] == 3)
    assert(l[3] == 1)

    # Test that a func sees itself in its own scope:
    var v = 1
    func testcall(x) {
        if x > 0 {
            x -= 1
            return testcall(x)
        }
        return 0
    }
    assert(testcall(5) == 0)

    # Test that we can put keyword args in a call before positionals:
    # (Trivial for horsec, an involved operation for the translator)
    func target_func(a, must_be_random, b=2) {
        assert(must_be_random == "random")
        return a + b * 2
    }
    var result = target_func(3, b=5, "random")
    assert(result == 13)

    # Test some advanced syntax:
    var a, b, c = 1, 2, 3
    assert(a == 1 and b == 2 and c == 3)
    var d, e
    d, e = 3,
        4 + 2  # The translator used to hate this line break!
    assert(d == 3 and e == 6)
}

func test_weird_kwarg_order_and_nesting {
    # Test kw args before positionals and inline multiline func:
    var result2 = (func (a, must_be_random, b=2) {
        assert(must_be_random == "random")
        return a + b * 2
    })(3, b=5, "random")
}

