
# Copyright (c) 2020-2022,  ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import argparse from core.horse64.org
import compiler from core.horse64.org
import path from core.horse64.org
import system from core.horse64.org


func main {
    # Test if it works as a standalone separate program:
    var output = compiler.run_file(
        "args_program_main.h64", args=["--help"],
        run_in_dir=path.dirname(system.self_exec_path())
    )
    assert(output.lower().contains("usage") and
        output.lower().contains("available options"))

    # Test a few complicated edge cases:
    var defs = argparse.ArgumentDefs()
    defs.add_switch("--flob")
    defs.add_arg("arg1", optional=yes)
    defs.add_arg("arg2")
    defs.add_catchall("trailingargs")

    var result = argparse.parse(defs, ["--flob"])
    assert(result.exit_code != none)  # (missing positional arg)

    result = argparse.parse(defs, ["--", "--flob"])
    assert(result.exit_code == none)
    assert(result.args["arg1"] == none)
    assert(result.args["arg2"] == "--flob")
    assert(result.args["trailingargs"].len == 0)

    result = argparse.parse(defs, ["--", "--flob", "flubb"])
    assert(result.exit_code == none)
    assert(result.args["arg1"] == "--flob")
    assert(result.args["arg2"] == "flubb")
    assert(result.args["trailingargs"].len == 0)

    result = argparse.parse(defs, ["--flob", "--flubb"])
    assert(result.exit_code != none)  # (unknown switch --flub)

    result = argparse.parse(defs, ["--flob", "--", "--flubb", "fleb", "--flob"])
    assert(result.exit_code == none)
    assert(result.args["arg1"] == "--flubb")
    assert(result.args["arg2"] == "fleb")
    assert(result.args["trailingargs"].len == 1)
    assert(result.args["trailingargs"][0] == "--flob")

    result = argparse.parse(defs, ["--flob", "urgh", "orgh", "--", "test"])
    assert(result.exit_code == none)
    assert(result.args["arg1"] == "urgh")
    assert(result.args["arg2"] == "orgh")
    assert(result.args["trailingargs"].len == 2)
    assert(result.args["trailingargs"][0] == "--")
    assert(result.args["trailingargs"][1] == "test")

    result = argparse.parse(defs, ["--flob", "urgh", "--", "orgh", "--", "test"])
    assert(result.exit_code == none)
    assert(result.args["--flob"] == yes)
    assert(result.args["arg1"] == "urgh")
    assert(result.args["arg2"] == "orgh")
    assert(result.args["trailingargs"].len == 2)
    assert(result.args["trailingargs"][0] == "--")
    assert(result.args["trailingargs"][1] == "test")

    # Test some more complicated edge cases:
    defs = argparse.ArgumentDefs()
    defs.add_switch("--flob", takes_arg=yes)
    defs.add_arg("arg1")
    defs.add_arg("arg2", optional=yes)
    defs.add_catchall("trailingargs")

    result = argparse.parse(defs, ["urgh", "--", "orgh", "--", "test"])
    assert(result.exit_code == none)
    assert(result.args["arg1"] == "urgh")
    assert(result.args["arg2"] == "orgh")
    assert(result.args["trailingargs"].len == 2)
    assert(result.args["trailingargs"][0] == "--")
    assert(result.args["trailingargs"][1] == "test")

    result = argparse.parse(defs, ["urgh", "--", "--flob", "--", "orgh", "test"])
    assert(result.exit_code == none)
    assert(result.args["--flob"] == none)
    assert(result.args["arg1"] == "urgh")
    assert(result.args["arg2"] == "--flob")
    assert(result.args["trailingargs"].len == 3)
    assert(result.args["trailingargs"][0] == "--")
    assert(result.args["trailingargs"][1] == "orgh")
    assert(result.args["trailingargs"][2] == "test")

    result = argparse.parse(defs, ["urgh", "--flob", "--", "orgh", "test"])
    assert(result.exit_code != none)  # --flob has no non-dash argument following!

    result = argparse.parse(defs, ["urgh", "--flob", "bla", "--", "orgh", "test"])
    assert(result.exit_code == none)
    assert(result.args["--flob"] == "bla")
    assert(result.args["arg1"] == "urgh")
    assert(result.args["arg2"] == "orgh")
    assert(result.args["trailingargs"].len == 1)
    assert(result.args["trailingargs"][0] == "test")
}
