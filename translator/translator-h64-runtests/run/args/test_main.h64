# Copyright (c) 2020-2025, ellie/@ell1e & Horse64's contributors
# (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import argparse from core.horse64.org
import compiler from core.horse64.org
import path from core.horse64.org
import system from core.horse64.org

func test_args_launch_program {
    # Test if it works as a standalone separate program:
    var exec_path = system.self_exec_path()
    later:

    await exec_path
    var output = compiler.run_file(
        "args_program_main.h64", args=["--help"],
        run_in_dir=path.dirname(exec_path)
    ) later:

    await output
    assert(output.lower().has("usage") and
        output.lower().has("available for \"options\""))
    print("Launching program with --help worked!")
}

func test_args_catchall_nonempty {
    # Test a scenario where a catch-all arg can't be empty:

    var defs = argparse.ArgumentDefs()
    defs.add_switch("--flob")
    defs.add_arg("arg1", optional=yes)
    defs.add_arg("arg2")
    defs.add_catchall("trailingargs", can_be_empty=no)

    var result = argparse.parse(
        arg_defs=defs, args=["--flob"]
    ) later:

    await result
    assert(result.exit_code != none)  # (missing positional arg)

    var result2 = argparse.parse(
        arg_defs=defs, args=["--", "--flob"]
    ) later:

    await result2
    assert(result2.exit_code != none)
    assert(result2.output != "")
    assert("missing" in result2.output.lower() and
           "trailingargs" in result2.output.lower())

    var result3 = argparse.parse(
        arg_defs=defs, args=["--", "--flob", "eee"]
    ) later:

    await result3
    assert(result3.exit_code == none)
    assert(result3.args["arg1"] == none)
    assert(result3.args["arg2"] == "--flob")
    assert(result3.args["trailingargs"].len == 1)
}

func test_args_catchall_and_otional {
    # Test a basic scenario with optional and catch-all args:

    var defs = argparse.ArgumentDefs()
    defs.add_switch("--flob")
    defs.add_arg("arg1", optional=yes)
    defs.add_arg("arg2")
    defs.add_catchall("trailingargs", can_be_empty=yes)

    var result = argparse.parse(
        arg_defs=defs, args=["--flob"]
    ) later:

    await result
    assert(result.exit_code != none)  # (missing positional arg)

    var result2 = argparse.parse(
        arg_defs=defs, args=["--", "--flob"]
    ) later:

    await result2
    assert(result2.exit_code == none)
    assert(result2.args["arg1"] == none)
    assert(result2.args["arg2"] == "--flob")
    assert(result2.args["trailingargs"].len == 0)

    var result3 = argparse.parse(
        arg_defs=defs, args=["--", "--flob", "flubb"]
    ) later:

    await result3
    assert(result3.exit_code == none)
    assert(result3.args["arg1"] == "--flob")
    assert(result3.args["arg2"] == "flubb")
    assert(result3.args["trailingargs"].len == 0)

    var result4 = argparse.parse(
        arg_defs=defs, args=["--flob", "--flubb"]
    ) later:

    await result4
    assert(result4.exit_code != none)  # (unknown switch --flub)

    var result5 = argparse.parse(
        arg_defs=defs,
        args=["--flob", "--", "--flubb", "fleb", "--flob"]
    ) later:

    await result5
    assert(result5.exit_code == none)
    assert(result5.args["arg1"] == "--flubb")
    assert(result5.args["arg2"] == "fleb")
    assert(result5.args["trailingargs"].len == 1)
    assert(result5.args["trailingargs"][1] == "--flob")

    var result6 = argparse.parse(
        arg_defs=defs,
        args=["--flob", "urgh", "orgh", "--", "test"]
    ) later:

    await result6
    assert(result6.exit_code == none)
    assert(result6.args["arg1"] == "urgh")
    assert(result6.args["arg2"] == "orgh")
    assert(result6.args["trailingargs"].len == 2)
    assert(result6.args["trailingargs"][1] == "--")
    assert(result6.args["trailingargs"][2] == "test")

    var result7 = argparse.parse(
        arg_defs=defs,
        args=["--flob", "urgh", "--", "orgh", "--", "test"]
    ) later:

    await result7
    assert(result7.exit_code == none)
    assert(result7.args["--flob"] == yes)
    assert(result7.args["arg1"] == "urgh")
    assert(result7.args["arg2"] == "orgh")
    assert(result7.args["trailingargs"].len == 2)
    assert(result7.args["trailingargs"][1] == "--")
    assert(result7.args["trailingargs"][2] == "test")
}

func test_switch_arg {
    # Tests focused around a switch with an argument:
    defs = argparse.ArgumentDefs()
    defs.add_switch("--flob", takes_arg=yes)
    defs.add_arg("arg1")
    defs.add_arg("arg2", optional=yes)
    defs.add_catchall("trailingargs")

    var result = argparse.parse(
        arg_defs=defs,
        args=["urgh", "--", "orgh", "--", "test"]
    ) later:

    await result
    assert(result.exit_code == none)
    assert(result.args["arg1"] == "urgh")
    assert(result.args["arg2"] == "orgh")
    assert(result.args["trailingargs"].len == 2)
    assert(result.args["trailingargs"][1] == "--")
    assert(result.args["trailingargs"][2] == "test")

    var result2 = argparse.parse(
        arg_defs=defs,
        args=["urgh", "--", "--flob", "--", "orgh", "test"]
    ) later:

    await result2
    assert(result2.exit_code == none)
    assert(result2.args["--flob"] == none)
    assert(result2.args["arg1"] == "urgh")
    assert(result2.args["arg2"] == "--flob")
    assert(result2.args["trailingargs"].len == 3)
    assert(result2.args["trailingargs"][1] == "--")
    assert(result2.args["trailingargs"][2] == "orgh")
    assert(result2.args["trailingargs"][3] == "test")

    var result3 = argparse.parse(
        arg_defs=defs,
        args=["urgh", "--flob", "--", "orgh", "test"]
    ) later:

    await result3
    assert(result3.exit_code != none)  # --flob has no non-dash following!

    var result4 = argparse.parse(
        arg_defs=defs,
        args=["urgh", "--flob", "bla", "--", "orgh", "test"]
    ) later:

    await result4
    assert(result4.exit_code == none)
    assert(result4.args["--flob"] == "bla")
    assert(result4.args["arg1"] == "urgh")
    assert(result4.args["arg2"] == "orgh")
    assert(result4.args["trailingargs"].len == 1)
    assert(result4.args["trailingargs"][1] == "test")
}

func test_catchall_only {
    # Tests with different with catchall but NO optional args:
    defs = argparse.ArgumentDefs()
    defs.add_switch("--flob", takes_arg=yes, repeatable=yes)
    defs.add_arg("arg1")
    defs.add_switch("--flib", repeatable=yes)
    defs.add_catchall("trailingargs")

    var result = argparse.parse(
        arg_defs=defs,
        args=["urgh", "--flob", "bla", "--", "--flob", "test"]
    ) later:

    await result
    assert(result.exit_code == none)
    assert(result.args["--flob"].len == 0)
    assert(result.args["--flib"] == 0)
    assert(result.args["arg1"] == "urgh")
    assert(result.args["trailingargs"].len == 5)
    assert(result.args["trailingargs"][1] == "--flob")

    var result2 = argparse.parse(
        arg_defs=defs,
        args=["--flob", "bla", "--", "--flib", "--flob", "test"]
    ) later:

    await result2
    assert(result2.exit_code == none)
    assert(result2.args["--flob"].len == 1)
    assert(result2.args["--flob"][1] == "bla")
    assert(result2.args["--flib"] == 0)
    assert(result2.args["arg1"] == "--flib")
    assert(result2.args["trailingargs"].len == 2)
    assert(result2.args["trailingargs"][1] == "--flob")
    assert(result2.args["trailingargs"][2] == "test")

    var result3 = argparse.parse(
        arg_defs=defs,
        args=["--flob", "bla", "--flib", "--", "--flob", "test"]
    ) later:

    await result3
    assert(result3.exit_code == none)
    assert(result3.args["--flob"].len == 1)
    assert(result3.args["--flob"][1] == "bla")
    assert(result3.args["--flib"] == 1)
    assert(result3.args["arg1"] == "--flob")
    assert(result3.args["trailingargs"].len == 1)
    assert(result3.args["trailingargs"][1] == "test")
}

func test_switch_repeated {
    # Tests around repeatable switches:
    defs = argparse.ArgumentDefs()
    defs.add_switch("--flob", takes_arg=yes, repeatable=yes)
    defs.add_arg("arg1")
    defs.add_switch("--flib", repeatable=yes)
    defs.add_arg("arg2")

    var result = argparse.parse(
        arg_defs=defs,
        args=["--flob", "bla", "--flib", "--", "--flob", "test"]
    ) later:

    await result
    assert(result.exit_code == none)
    assert(result.args["--flob"].len == 1)
    assert(result.args["--flob"][1] == "bla")
    assert(result.args["--flib"] == 1)
    assert(result.args["arg1"] == "--flob")
    assert(result.args["arg2"] == "test")

    var result2 = argparse.parse(
        arg_defs=defs,
        args=["--flob", "bla", "--flib", "--", "--flob", "te", "st"]
    ) later:

    await result2
    assert(result2.exit_code != none)  # Too many positional args.
}

func test_switch_aliases {
    # Tests around switch aliases:

    defs = argparse.ArgumentDefs()
    defs.add_switch("--flob", takes_arg=yes, repeatable=yes)
    defs.add_arg("arg1")
    defs.add_switch("--flib", aliases=["-f"])
    defs.add_arg("arg2")

    var result = argparse.parse(
        arg_defs=defs,
        args=["--flob", "bla", "-f", "--", "--flob", "test"]
    ) later:

    await result
    assert(result.exit_code == none)
    assert(result.args["--flob"].len == 1)
    assert(result.args["--flob"][1] == "bla")
    assert(result.args["--flib"] == yes)
    assert(result.args["arg1"] == "--flob")
    assert(result.args["arg2"] == "test")

    var result2 = argparse.parse(
        arg_defs=defs,
        args=["--flob", "bla", "-f", "--", "--flib", "test"]
    ) later:

    await result2
    assert(result2.exit_code == none)
    assert(result2.args["--flob"].len == 1)
    assert(result2.args["--flob"][1] == "bla")
    assert(result2.args["--flib"] == yes)
    assert(result2.args["arg1"] == "--flib")
    assert(result2.args["arg2"] == "test")

    var result3 = argparse.parse(
        arg_defs=defs,
        args=["--flob", "bla", "-f", "--flib", "test"]
    ) later:

    await result3
    assert(result3.exit_code != none)  # --flib/f specified twice.
}

