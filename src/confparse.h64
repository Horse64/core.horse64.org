## @module confparse
# Copyright (c) 2020-2024, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import io from core.horse64.org
import net from core.horse64.org
import net.fetch from core.horse64.org
import uri from core.horse64.org

## The error returned by @{parse_str}, @{parse_from_file}, and
## @{parse_from_uri} when an invalid config is found with
## `error_on_mistakes` set to @{yes}.
type ConfParseError base ValueError {
}

## @func parse_str
## Parse the contents of a config file using the INI format,
## supplied as a string.
## @param string str The contents of the config file.
## @param allow_multiline bool Whether an indent after an assignment
##     line allows continuing the assigned value on the next line.
## @param allow_multiassign bool Whether to allow a value to be assigned
##     multiple times with different values. If set to @{yes}, values
##     assigned multiple times will be stored as a list of all
##     encountered values.
## @param error_on_mistakes bool Whether to throw a
##     @{ConfParseError} when encountering a line that is obviously
##     invalid.
## @returns map A map where each key is a string with the section name,
##     with a sub map with all the key value pairs in that section.
##     If @{allow_subsections} is @{yes}, this can be nested deeper.
func parse_str(
        string, allow_multiline=yes, allow_multiassign=yes,
        error_on_mistakes=yes
        ) {
    var s = string
    s = s.replace("\r\n", "\n").replace("\r", "\n")

    # Clean up lines by dumping the comments:
    var lines_uncleaned = s.split("\n")
    var lines = []
    for l in lines_uncleaned {
        assert(typename(l) == "str")
        if l.trim(" \t") == "" {
            l = ""
        }
        lines.add(l)
    }

    # Some helper variables:
    var result = {->}
    var multiline_key = none
    var multiline_exact_indent = none
    var multiline_outer_indent = none
    var section = none

    # Parse the actual lines now:
    var lineno = 0
    for line in lines {
        lineno += 1

        # Extract indentation:
        var indent = line.sub(1, line.len - line.ltrim(" \t").len)
        line = line.ltrim(" \t")
        if multiline_outer_indent != none {
            if not indent.startswith(multiline_outer_indent) or
                    indent.len <= multiline_outer_indent.len or
                    (multiline_exact_indent != none and
                     multiline_exact_indent != indent) {
                multiline_key = none
            } else {
                multiline_exact_indent = indent
            }
        }
        if line == "" {
            multiline_key = none
            continue
        } elseif line.trim().starts(";") or
                line.trim().starts("#") {
            continue
        }

        #print("LINE: " + [line, indent, multiline_key,
        #    multiline_outer_indent,
        #    multiline_exact_indent].as_str())

        # Parse square bracket section markers:
        if line.startswith("[") {
            var closing_bracket = line.rfind("]")
            if closing_bracket == none {
                if error_on_mistakes {
                    throw new ConfParseError(
                        "Error in line " + lineno.as_str() +
                        ": Opening '[' without matching ']'."
                    )
                }
                multiline_key = none
                continue
            }

            line = line.rtrim()
            if closing_bracket < line.len and
                    error_on_mistakes {
                throw new ConfParseError(
                    "Error in line " + lineno.as_str() +
                    ": Invalid trailing character after "
                    "square brackets for section."
                )
            }

            var new_section = line.sub(2, closing_bracket - 1).trim()
            if new_section == "" {
                # An empty section name obviously is nonsensical!
                if error_on_mistakes {
                    throw new ConfParseError(
                        "Error in line " + lineno.as_str() +
                        ": Empty square brackets without "
                        "valid section name."
                    )
                }
                multiline_key = none
                continue
            }

            # Set the new section and resume:
            section = new_section
            multiline_key = none
            continue
        }

        # Get an assignment, but only an allowed one:
        var assign_index = line.find("=")
        if assign_index != none {
            if assign_index < line.len and
                    line[assign_index + 1] == "=" {
                # This is "==" as first occurance. Not allowed!
                assign_index = none
            } elseif assign_index > 1 and
                    {"!", ">", "<", "~"}.has(line[assign_index - 1]) {
                # This is one of "!=", ">=", "<=", "~=". Not allowed!
                assign_index = none
            }
        }

        # See if this is possibly a multiline continuation:
        if assign_index == none and multiline_key != none and
                allow_multiline {
            # Since we didn't yank multiline_key above due to
            # indent mismatch, it must be a valid continuation!

            # Append it to our previous value:
            if typename(result[section][multiline_key]) == "str" {
                result[section][multiline_key] += " " + line.trim()
            } else {
                var value_list = result[section][multiline_key]
                value_list[value_list.len] += (
                    " " + line.trim()
                )
            }

            # Force multiline_key and previous_indent
            # to carry over unchanged into next line:
            multiline_exact_indent = indent
            continue
        } else {
            multiline_key = none
        }
        if assign_index == none {
            # Not empty line or comment, but we can't parse it!
            if error_on_mistakes {
                throw new ConfParseError(
                    "Error in line " + lineno.as_str() +
                    ": Line with unrecognized contents: " +
                    line.rtrim()
                )
            }
            continue
        }
        if section == none {
            if error_on_mistakes {
                throw new ConfParseError(
                    "Error in line " + lineno.as_str() +
                    ": Key value assignment outside of "
                    "any section."
                )
            }
            continue
        }

        var key = line.sub(1, assign_index - 1).trim()
        var value = line.sub(assign_index + 1).trim()

        if key == "" {
            if error_on_mistakes {
                throw new ConfParseError(
                    "Error in line " + lineno.as_str() +
                    ": Assigning to an empty key, this "
                    "isn't allowed."
                )
            }
            multiline_key = none
            continue
        }

        # Assign the key and move on:
        if not result.has(section) {
            result[section] = {->}
        }
        if not result[section].has(key) or
                not allow_multiassign {
            result[section][key] = value
        } else {
            if typename(result[section][key]) == "str" {
                result[section][key] = [
                    result[section][key], value
                ]
            } else {
                result[section][key].add(value)
            }
        }
        multiline_key = key
        multiline_outer_indent = indent
        multiline_exact_indent = none
    }

    return result
}

## @func parse_from_uri
## Parse the contents of a config file pointed to by the
## given URI. The URI must point to a local resource, that is
## have the protocol `file://` or `vfs://`.
##
## @param uri str The URI pointing to the config file to be loaded.
## @param allow_multiline @alike{parse_str}
## @param allow_multiassign @alike{parse_str}
## @param error_on_mistakes @alike{parse_str}
## @param max_size num The size limit in bytes for how large the config
##   file can be, defaults to 100KB. This limit exists for security
##   reasons.
## @returns @alike{parse_str}
func parse_from_uri(
        conf_uri, allow_multiline=yes,
        allow_multiassign=yes,
        error_on_mistakes=yes,
        allow_remote=yes,
        max_size=(1024 * 100),
        ) {
    if net.is_uri_remote(conf_uri) and not allow_remote {
        throw new PermissionError("Remote URIs not allowed.")
    }
    var contents = net.fetch.get_str(
        conf_uri, max_size=max_size,
        allow_vfs=yes, allow_disk=yes
    ) later:

    await contents
    return parse_str(
        contents, allow_multiline=allow_multiline,
        allow_multiassign=allow_multiassign,
        error_on_mistakes=error_on_mistakes
    )
}

## @func parse_from_file
## Parse the contents of a config file found at the given path
##
## @param path str The file path to the config file to be loaded.
## @param allow_multiline @alike{parse_str}
## @param allow_multiassign @alike{parse_str}
## @param error_on_mistakes @alike{parse_str}
## @param max_size @alike{parse_conf_from_uri}
## @param allow_vfs bool Whether the path may refer to a file
##   in the VFS. Defaults to @{yes}.
## @param allow_disk bool Whether the path may refer to a file
##   on disk and not the VFS. Defaults to @{yes}.
## @returns @alike{parse_str}
func parse_from_file(
        path, allow_multiline=yes,
        allow_multiassign=yes,
        error_on_mistakes=yes,
        max_size=(1024 * 100),
        allow_vfs=yes,
        allow_disk=yes
        ) {
    if not allow_vfs and not allow_vfs {
        throw new io.PathNotFoundError("File not found.")
    }
    var exists_in_vfs = io.exists(path, allow_disk=no,
        allow_vfs=allow_vfs) later:

    await exists_in_vfs
    var is_vfs = (not allow_disk) or
        (allow_vfs and exists_in_vfs)
    var conf_uri
    if is_vfs {
        conf_uri = uri.from_vfs_path(path)
    } else {
        conf_uri = uri.from_disk_path(path)
    }
    var result = parse_from_uri(conf_uri,
        allow_multiline=allow_multiline,
        allow_multiassign=allow_multiassign,
        error_on_mistakes=error_on_mistakes,
        max_size=max_size)
    later:

    await result
    return result
}

