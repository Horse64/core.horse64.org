## @module argparse
# Copyright (c) 2020-2024, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org
import path from core.horse64.org
import process from core.horse64.org
import system from core.horse64.org
import textfmt from core.horse64.org

type _ArgumentInfo {
    var name = ""
    var catchall = no
    var repeatable = no
    var takes_arg = no
    var aliases = []
    var optional = no
    var positional = no
    var action_func = none
    var description = none
}

enum TakesArg {
    TAKESARG_DEFAULT,
    TAKESARG_ALWAYS,
    TAKESARG_NEVER,
    TAKESARG_OPTIONAL,
    TAKESARG_CATCHALL_OPTIONAL,
    TAKESARG_CATCHALL_NONEMPTY,
}

func _ArgumentInfo.init(
        name, aliases=[],
        is_switch=no, takes_arg=ARG_TAKESARG_DEFAULT,
        repeatable=no,
        description=none, action_func=none
        ) {
    # Clean up and process arguments:
    self.description = (
        if description != none (description + "") else (none)
    )
    if self.description != none {
        self.description = self.description.
            replace("\r\n", "\n").replace("\r", "\n")
    }
    self.name = name + ""
    for alias in aliases {
        self.aliases.add(alias + "")
    }
    self.positional = not self.name.starts("-")
    if is_switch != (not self.positional) {
        throw new ValueError("The value of is_switch must be yes if "
            "argument begins with dash, otherwise no.")
    }
    if not is_switch and repeatable != no {
        throw new ValueError("Multiple uses only allowed "
            "for switches.")
    }
    self.repeatable = (repeatable == yes)
    if not is_switch and action_func != none {
        throw new ValueError("Setting action_func only allowed "
            "for switches.")
    }
    self.action_func = action_func
    if takes_arg == TAKESARG_DEFAULT {
        if self.positional {
            self.takes_arg = yes
        } else {
            self.takes_arg = no
        }
    } elseif takes_arg == TAKESARG_OPTIONAL or
            takes_arg == TAKESARG_CATCHALL_OPTIONAL or
            takes_arg == TAKESARG_CATCHALL_NONEMPTY {
        self.takes_arg = yes
        if not self.positional {
            throw new ValueError("Only positional arguments "
                "may take an argument value optionally or "
                "as catch-all.")
        }
        self.optional = (takes_arg != TAKESARG_CATCHALL_NONEMPTY)
        self.catchall = (takes_arg != TAKESARG_OPTIONAL)
    } elseif takes_arg == TAKESARG_ALWAYS or
            takes_arg == TAKESARG_NEVER {
        if takes_arg == TAKESARG_NEVER and self.positional {
            throw new ValueError(
                "Positional arguments must take an "
                "argument value at least optionally."
            )
        }
        self.takes_arg = (takes_arg == TAKESARG_ALWAYS)
        self.optional = no
    } else {
        throw new TypeError("Unsupported value for "
            "takes_arg, must be bool.")
    }
}

func _ArgumentInfo.has_argname(names) {
    if names.has(self.name) {
        return yes
    }
    for alias in self.aliases {
        if names.has(alias) {
            return yes
        }
    }
    return no
}

## The command line argument definitions to use. This @{type} collects
## what sort of argument your command line tool knows via e.g.
## @{add_arg|ArgumentDefs.add_arg}, and can then be used with
## @{parse} to parse user input into a nice little @{assembled
## result|ParseResult} for your convenience.
type ArgumentDefs {
    var args protect = []
    var min_positional_args protect = 0
    var max_positional_args protect = 0
    var catchall_exists protect = no
    var program_name = "unknown"
    var description = none
}

## A @{type} to represent argument definitions that describe
## how to parse command line arguments. Use this to specify what
## sort of arguments your program takes, then use @{parse} to
## actually get the values specified by the user.
##
## @param program_name str (Optional) The name of your command
##   line program, should match what the actual name of the binary
##   is that the user would write to run the command.
##   If unspecified, it will be auto-detected.
## @param description str (Optional) Describe what your program
##   does, e.g. "A tool to do task XYZ." which will be printed out
##   for the `--help` text.
func ArgumentDefs.init(program_name=none, description=none) {
    # Sanitize and guess the program name for this arguments set:
    if program_name != none and typename(program_name) != "str" {
        throw new TypeError("The program_name specified must "
            "be none or string.")
    }
    if program_name == none {
        program_name = path.basename(system.self_exec_path())
        if program_name == "none" {
            program_name = "unknown"
        }
    }
    self.program_name = program_name
    if description != none and typename(description) != "str" {
        throw new TypeError("The description specified "
            "must be none or string.")
    }
    if description != none and description.trim().len > 0 {
        self.description = description.replace("\r\n", "\n").
            replace("\r", "\n").trim()
    }
}

func ArgumentDefs.get_catchall_arg {
    for arg in self.args {
        if arg.positional and arg.catchall {
            return arg
        }
    }
    return none
}

func ArgumentDefs.get_nth_posarg(index, total_posargs_assigned=none) {
    var non_optional_count = 0
    assert(index > 0)
    for arg in self.args {
        if (arg.positional or arg.catchall) and not arg.optional {
            non_optional_count += 1
        }
    }
    var optional_args_filled = 0
    if total_posargs_assigned != none {
        optional_args_filled =
            math.max(0,
                total_posargs_assigned - non_optional_count
            )
    }
    for arg in self.args {
        if (arg.positional or arg.catchall) and
                (not arg.optional or
                optional_args_filled > 0) {
            if index > 1 {
                index -= 1
                if arg.optional and optional_args_filled > 0 {
                    optional_args_filled -= 1
                }
            } else {
                return arg
            }
        }
    }
    return none
}

func ArgumentDefs.get_namedarg(name) {
    if not name.starts("-") {
        return none
    }
    for arg in self.args {
        if arg.name == name or arg.aliases.has(name) {
            return arg
        }
    }
    return none
}

## @func ArgumentDefs.add_arg
##
## Add a positional argument that must be passed in by the user.
## This might e.g. be a target file, or similar.
##
## After @{parsing|ArgumentDefs.parse}, the map of all parsed values
## will contain an entry with the name set to the passed argument as
## @{str}.
##
## Example:
## ```horse64
## var defs = argparse.ArgumentDefs()
## defs.add_arg("target_file")
## var result = argparse.parse(defs, ["some_file.txt"])
## print(result["target_file"])  # That will output: some_file.txt
## ```
##
## @param name str the name for the positional argument
## @param optional bool Specifies that the positional argument can
##   be silently omitted if set to yes. Then the final map of all parsed
##   values will have the corresponding entry set to @{none} if
##   it isn't specified by the user.
## @param description str (Optional) A description for the user
##   what this argument is for.
func ArgumentDefs.add_arg(name, optional=no, description=none) {
    if name.starts("-") {
        throw new ValueError(
            "A positional argument can't have a name "
            "starting with a dash.")
    }
    for arg in self.args {
        if arg.has_argname([name]) {
            throw new ValueError(
                "There's a name conflict with existing options or "
                "arguments."
            )
        }
        if arg.positional and arg.catchall {
            throw new ValueError(
                "Cannot add positional argument after a catch-all."
            )
        }
    }
    self.args.add(new _ArgumentInfo(
        name, is_switch=no, description=description,
        takes_arg=if optional (TAKESARG_OPTIONAL) else (TAKESARG_ALWAYS)
    ))
    if self.args[self.args.len].positional {
        self.max_positional_args += 1
        if not self.args[self.args.len].optional {
            self.min_positional_args += 1
        }
    }
}

## @func ArgumentDefs.add_catchall
##
## **(Advanced functionality)**
## Add a catch-all argument that will consume all arguments following
## the last positional argument. This is only useful for special
## cases, like if you want to pass them on to some nested program.
## Requires that one or more regular @{positional arguments were
## previously added|ArgumentDefs.add_arg}.
##
## After @{parsing|ArgumentDefs.parse}, the map of all parsed values
## will contain an entry with the name set to the consumed arguments as
## a @{list}.
##
## @param name str The name for the catch-all argument
## @param description str (Optional) A description for the user
##   what this argument is for
## @param can_be_empty bool If set to yes, the catch-all will also be
##   satisfied with zero arguments instead of one or more. If set to no,
##   at least one must be supplied. Defaults to no.
func ArgumentDefs.add_catchall(
        name, description=none,
        can_be_empty=no) {
    if name.starts("-") {
        throw new ValueError(
            "positional arguments can't have a name "
            "starting with a dash")
    }
    var positional_count = 0
    for arg in self.args {
        if arg.has_argname([name]) {
            throw new ValueError(
                "There's a name conflict with existing options or "
                "arguments."
            )
        }
        if arg.positional and not arg.catchall {
            positional_count += 1
        }
        if arg.positional and arg.catchall {
            throw new ValueError(
                "Cannot add multiple catch-all arguments."
            )
        }
    }
    self.args.add(new _ArgumentInfo(
        name, is_switch=no,
        takes_arg=if can_be_empty (TAKESARG_CATCHALL_OPTIONAL)
            else (TAKESARG_CATCHALL_NONEMPTY),
        description=description
    ))
    self.catchall_exists = yes
    if not can_be_empty {
        self.min_positional_args += 1
    }
}

func _check_switch_name(name) {
    if not name.starts("-") {
        throw new ValueError("Any switch names must start with a dash.")
    }
    if name.has(" ") or name.has("\t") or
            name.has("\n") or name.has("\r") {
        throw new ValueError("A switch name must not contain whitespace.")
    }
    if name.has("=") or name.has(",") or
            name.has(":") or name.has("!") or name.has("/") {
        throw new ValueError("This switch name has invalid characters.")
    }
}

## @func ArgumentDefs.add_switch
##
## Add an option switch that begins with a dash that the user may or
## may not use. This usually enables optional behavior of your program.
##
## After @{parsing|ArgumentDefs.parse}, the map of all parsed values
## will contain an entry with the switch name set to @{yes} if the
## switch was specified, or otherwise @{no}.
##
## Example:
## ```horse64
## var defs = argparse.ArgumentDefs()
## defs.add_switch("--switch-1")
## defs.add_switch("--switch-2")
## var parsed_values = argparse.parse(defs, ["--switch-2"])
## print(parsed_values["switch-1"])  # will print out "no"!
## print(parsed_values["switch-2"])  # will print out "yes"!
## ```
##
## @param name str the name of a switch which must start with a dash
## @param aliases list Alternate names for this switch which also
##     must all start with a dash. Must be a list of @{str}s.
## @param takes_arg bool If set to yes, requires that this
##   switch is supplied by the user with an argument
##   specified right after, e.g. `--target-file path-to-file`. If set
##   to yes, the map of all parsed values will instead contain the
##   switch set to either @{none} if the switch wasn't specified,
##   or the user-given @{str} of that argument. Defaults to no.
## @param repeatable bool If set to yes, then this switch can be used
##   by the user multiple times. If yes and then the map of all
##   parsed values will contain the switch with a
##   @{numeric counter|num} instead of a @{bool} that counts the
##   uses, unless takes_arg is also set to @{yes} in which case
##   the map will contain a @{list} of all args of all uses.
##   Defaults to no.
## @param description str (Optional) A description for the user
##   what this argument is for.
## @param action_func func (Optional) A function that should be
##   run as soon as this switch is found during a
##   @{parse|ArgumentDefs.parse} run.
func ArgumentDefs.add_switch(
        name, aliases=[], takes_arg=no, description=none,
        repeatable=no,
        action_func=none
        ) {
    _check_switch_name(name)  # Will throw ValueError if invalid.
    for alias in aliases {
        _check_switch_name(alias)  # Will throw ValueError if invalid.
    }
    if takes_arg != yes and takes_arg != no {
        throw new ValueError("You can only set takes_arg to "
            "either yes or no.")
    }
    for arg in self.args {
        if arg.has_argname([name]) or
                arg.has_argname(aliases) {
            throw new ValueError(
                "There's a name conflict with existing options or "
                "arguments."
            )
        }
    }
    self.args.add(new _ArgumentInfo(
        name, aliases=aliases, is_switch=yes,
        repeatable=repeatable,
        takes_arg=if takes_arg (TAKESARG_ALWAYS)
            else (TAKESARG_NEVER),
        description=description,
        action_func=action_func
    ))
}

## The result of a @{parse call|parse}. Contains all the values for
## all switches and arguments in the @{args map|ParseResult.args},
## with the keys being the names of each argument or switch.
##
## If @{an output string was set|ParseResult.output} with length
## greater than zero, this means the parser returned a message for
## the user (like an error) and an @{exit code|ParseResult.exit_code}
## for your program that can be used with @{system.exit}.
## The exit code will always be set if any non-empty output string
## was set.
type ParseResult {
    ## The output string, may e.g. contain errors. Empty string if
    ## everything went okay.
    var output = ""

    ## The exit code suggested to go along with the output string.
    ## A @{num} if there is an exit code, otherwise remains @{none}.
    var exit_code = none

    ## A @{map} filled with values for all switches and arguments.
    var args
}

func get_usage_text(options) {
    var output = ""

    # Output main usage line with positional args:
    output += "Usage:\n   " +
        options.program_name + " options…[optional]"
    for arg in options.args {
        if not arg.positional {
            continue
        }
        output += " " + arg.name.replace(" ", "_") + (
            if arg.catchall ("…") else ("") + ""
        ) + (
            if arg.optional ("[optional]") else ("")
        )
    }
    output += "\n\n"

    # Output program description if any:
    if options.description != none {
        output += textfmt.wrap(
            options.description, 79
        ) + "\n\n"
    }

    # Output info on all positional args:
    var got_positional = no
    for arg in options.args {
        if arg.positional {
            got_positional = yes
            break
        }
    }
    if got_positional {
        output += "Arguments:\n"
        var longest_arg_len = 0
        for arg in options.args {
            if arg.positional {
                longest_arg_len = math.max(
                    longest_arg_len, arg.name.len)
            }
        }
        var indent_target_len = math.min(
            30, longest_arg_len + 3
        )
        for arg in options.args {
            if arg.positional {
                var spaces = " ".rep(math.max(
                    2, indent_target_len - arg.name.len
                ))
                var spaces_after_wrap = " ".rep(indent_target_len)
                var wrapped = textfmt.wrap(
                    "   " + arg.name.replace(" ", "_") +
                    if arg.description != none (spaces + arg.description)
                    else (""), 79,
                    later_lines_prefix="   " + spaces_after_wrap)
                output += wrapped + "\n"
            }
        }
        output += "\n"
    }

    # Output all available option switches as a nice table:
    output += "Available for \"options\":\n"
    var switch_desc_map = {->}
    var unsorted_names = []
    for arg in options.args {
        if not arg.name.starts("-") {
            continue
        }
        unsorted_names.add(arg.name)
        if arg.description != none and
                arg.description.len > 0 {
            switch_desc_map[arg.name] = arg.description
        }
    }
    if not unsorted_names.has("--help") {
        unsorted_names.add("--help")
        switch_desc_map["--help"] =
            "Show this help text."
    }
    var sorted_names = unsorted_names.copy()
    sorted_names.sort()
    var longest_switch_len = 0
    for switch_name in sorted_names {
        longest_switch_len = math.max(
            longest_switch_len, switch_name.len)
    }
    var indent_target_len = math.min(
        30, longest_switch_len + 3
    )
    for switch_name in sorted_names {
        var spaces = " ".rep(math.max(
            2, indent_target_len - switch_name.len
        ))
        var spaces_after_wrap = " ".rep(indent_target_len)
        var switch_description = none
        if switch_desc_map.has(switch_name) {
            switch_description = switch_desc_map[switch_name]
        }
        var wrapped = textfmt.wrap(
            "   " + switch_name +
            if switch_description != none
                (spaces + switch_description)
                else (""),
            79,
            later_lines_prefix="   " + spaces_after_wrap)
        output += wrapped + "\n"
    }

    return output
}

## @func parse
## Use the given @{command line argument definitions|ArgumentDefs}
## to parse the command line arguments given. If the args parameter
## is unspecified, this will default to @{process.args}.
##
## @returns ParseResult
## @param arg_defs ArgumentDefs (Optional) The argument definitions to
##   use for parsing, which specify all known arguments and switches.
##   If not specified, then any arguments and switches will be accepted,
##   and all positional arguments will be returned as a catch-all list
##   "args".
## @param args list (Optional) The list of supplied command line
##   arguments to parse. If unspecified, @{process.args} is used.
func parse(arg_defs=none, args=none) {
    if args == none {
        args = process.args
    }
    if arg_defs != none and
            not has_attr(arg_defs, "max_positional_args") {
        throw new TypeError(
            "Any value specified for arg_defs must have the "
            "expected argparse.ArgumentDefs attributes."
        )
    }
    var result = new ParseResult()
    var result_args = {->}
    var posargs_seen = 0
    var debug = no

    if arg_defs == none {
        # Special default parsing when we have no argument definitions.
        assert(args != none)
        result.args = {"args"-> []}
        var seen_double_dash = no
        var i = 1
        while i <= args.len {
            if not seen_double_dash and args[i] == "--" {
                seen_double_dash = yes
                i += 1
                continue
            }
            if not seen_double_dash and args[i].starts("-") {
                result.args[args[i]] = yes
                i += 1
                continue
            }
            result.args["args"].add(args[i])
            i += 1
        }
        return result
    }

    # Count number of positional arguments in advance:
    # (We need the total in advance to handle optional ones right)
    var double_dash_idx = none
    var positional_args_preliminary_total = 0
    var i = 1
    while i <= args.len {
        var argstr = args[i]
        if not args[i].starts("-") or
                (double_dash_idx != none and
                i >= double_dash_idx) {
            positional_args_preliminary_total += 1
        } elseif args[i] == "--" {
            if double_dash_idx == none {
                double_dash_idx = i
            }
            i += 1
            continue
        } elseif args[i].starts("-") {
            # Make sure to jump over switches and their arguments:
            var target_arg = arg_defs.get_namedarg(args[i])
            if target_arg != none and target_arg.takes_arg {
                i += 2
                continue
            }
        }
        i += 1
    }

    # See from where everything needs to go into the catch-all,
    # and based on that figure out the actual count of pos args:
    # (Basically, everything after the last regular positional arg,
    # when a catch-all follows, everything including switches should
    # go into that catch-all and counts as a pos arg to it.)
    var catchall_start_index = none
    var positional_args_total = 0
    var had_any_nondash_arg = no
    var _posarg_no = 0
    i = 1
    while i <= args.len {
        var argstr = args[i]
        if not args[i].starts("-") {
            had_any_nondash_arg = yes
        }
        var target_arg =
            arg_defs.get_nth_posarg(
                _posarg_no + 1, positional_args_preliminary_total)
        if (not args[i].starts("-") or
                # Past a double dash, everything is a pos arg:
                (double_dash_idx != none and
                i >= double_dash_idx) or
                # Starting from a catch-all, everything MIGHT be a pos arg:
                (target_arg != none and
                target_arg.catchall and (
                    # From any non-dash on, if in doubt it goes to catch-all:
                    had_any_nondash_arg or
                    # If it's clearly not "our" option, put into catch-all:
                    arg_defs.get_namedarg(args[i]) == none
                ))) {
            # This is a positional arg. See if it maps to catch-all:
            if args[i] == "--" and
                    i == double_dash_idx and
                    (target_arg == none or
                    not target_arg.catchall) {
                # We're supposed to ignore this one
                i += 1
                continue
            }
            positional_args_total += 1
            _posarg_no += 1

            if target_arg != none and
                    target_arg.catchall {
                # Special case: first positional arg is already catch-all.
                # In that case, everything starting from the first
                # obvious non-switch (=here) will go inside.
                catchall_start_index = i
                if double_dash_idx != none and
                        double_dash_idx >= i {
                    double_dash_idx = none
                }
                positional_args_total += (args.len - i)
                break
            } else {
                # Regular case: we reached the last positional arg
                # that is regular. Everything past here (=one index further)
                # should go inside.
                var followup_arg =
                    arg_defs.get_nth_posarg(
                        _posarg_no + 1, positional_args_preliminary_total)
                if followup_arg != none and
                        followup_arg.catchall {
                    catchall_start_index = i + 1
                    if double_dash_idx != none and
                            double_dash_idx >= i + 1 {
                        double_dash_idx = none
                    }
                    positional_args_total += (args.len - i)
                    break
                }
            }
        } elseif args[i].starts("-") {
            # Make sure to jump over switches and their arguments:
            var target_arg = arg_defs.get_namedarg(args[i])
            if target_arg != none and target_arg.takes_arg {
                i += 2
                continue
            }
        }
        i += 1
    }
    # Remove double dash from args list to not confuse later code:
    if double_dash_idx != none {
        assert(double_dash_idx >= 1 and
            double_dash_idx <= args.len)
        # But if we know by now that the double dash maps to a
        # catch-all argument, leave it in place:
        var dash_maps_to_catchall = no
        var at_pos_arg = 0
        var k = 1
        while k <= args.len {
            if k >= double_dash_idx or
                    not args[k].starts("-") {
                at_pos_arg += 1
                var target_arg = arg_defs.get_nth_posarg(
                    at_pos_arg, positional_args_total
                )
                if target_arg != none and target_arg.catchall {
                    dash_maps_to_catchall = yes
                    break
                } elseif k >= double_dash_idx {
                    break
                }
            } else {
                assert(args[k].starts("-"))
                var target_arg = arg_defs.get_namedarg(args[k])
                if target_arg != none and target_arg.takes_arg {
                    k += 2
                    continue
                }
            }
            k += 1
            continue
        }
        if not dash_maps_to_catchall {
            # Remove the double dash as planned:
            args = args.sub(1, double_dash_idx - 1) +
                args.sub(double_dash_idx + 1)
            if catchall_start_index != none and
                    catchall_start_index > double_dash_idx {
                catchall_start_index -= 1
            }
        }
    }

    #print("argparse.h64: debug: extracting args: " +
    #    args.as_str() + ", catchall_start_index=" +
    #    catchall_start_index.as_str() +
    #    ", double_dash_idx=" + double_dash_idx.as_str())

    # Extract all arguments now:
    posargs_seen = 0
    i = 1
    while i <= args.len {
        var argstr = args[i]
        if debug {
            print("argparse.h64: debug: looking at args[" +
                i.as_str() + "]: " + argstr)
        }
        if (not args[i].starts("-")) or (catchall_start_index != none and
                i >= catchall_start_index) or
                (double_dash_idx != none and
                i >= double_dash_idx) {
            # Positional argument. See if we reached maximum:
            if posargs_seen + 1 > arg_defs.max_positional_args and
                    not arg_defs.catchall_exists {
                var xth = (posargs_seen + 1).as_str()
                if xth.endswith("1") {
                    xth += "st"
                } elseif xth.endswith("2") {
                    xth += "nd"
                } elseif xth.endswith("3") {
                    xth += "rd"
                } else {
                    xth += "th"
                }
                result.output += arg_defs.program_name + ": error: "
                    "Excessive " + xth + " "
                    "positional argument: " + argstr + "\n"
                result.output += (
                    "Use " + arg_defs.program_name +
                    " --help to show usage.\n"
                )
                result.exit_code = -1
                return result
            }

            # Check what exactly this maps to:
            var target_arg = arg_defs.get_nth_posarg(
                posargs_seen + 1, positional_args_total)
            if target_arg == none {
                target_arg = arg_defs.get_catchall_arg()
            }
            assert(target_arg != none)

            if debug {
                print("argparse.h64: debug: feeding into "
                    "arg \"" + target_arg.name +
                    "\" => " + argstr)
            }

            # Add it to the result value of what it maps to:
            if target_arg.catchall {
                # Catch-all arg that collects multiple values as list:
                if not result_args.has(target_arg.name) {
                    result_args[target_arg.name] = []
                }
                result_args[target_arg.name].append(argstr)
            } else {
                # Regular positional arg that takes exactly one value:
                result_args[target_arg.name] = argstr
            }
            posargs_seen += 1
        } else {
            # Special handling for --help:
            if argstr == "--help" {
                result.output = get_usage_text(arg_defs)
                result.exit_code = 0
                return result
            }
            # See if we can find out the arg def this matches:
            var target_arg = arg_defs.get_namedarg(argstr)
            if target_arg == none {
                result.output += arg_defs.program_name +
                    ": error: "
                    "Unknown option: " + argstr + "\n"
                result.output += (
                    "Use " + arg_defs.program_name +
                    " --help to show usage.\n"
                )
                result.exit_code = -1
                return result
            }
            # Block specifying multiple times if not allowed:
            if result_args.has(target_arg.name) and
                    not target_arg.repeatable and
                    result_args[target_arg.name] == yes {
                result.output += arg_defs.program_name +
                    ": error: "
                    "Option cannot be used multiple times: " +
                    target_arg.name
                result.output += (
                    "Use " + arg_defs.program_name +
                    " --help to show usage.\n"
                )
                result.exit_code = -1
                return result
            }
            # If this named arg takes an argument, check that it's
            # specified after:
            if target_arg.takes_arg == yes {
                if i + 1 > args.len or
                        args[i + 1].starts("-") {
                    result.output += arg_defs.program_name +
                        ": error: "
                        "Option is missing argument: " +
                        target_arg.name + "\n"
                    result.output += (
                        "Use " + arg_defs.program_name +
                        " --help to show usage.\n"
                    )
                    result.exit_code = -1
                    return result
                }
                if target_arg.repeatable {
                    # Can be specified multiple times, use list:
                    if not result_args.has(target_arg.name) {
                        result_args[target_arg.name] = []
                    }
                    result_args[target_arg.name].add(args[i + 1])
                } else {
                    result_args[target_arg.name] = args[i + 1]
                }
                i += 2
                continue
            } else {
                if target_arg.repeatable {
                    # Can be specified multiple times, use counter:
                    if not result_args.has(target_arg.name) {
                        result_args[target_arg.name] = 0
                    }
                    result_args[target_arg.name] += 1
                } else {
                    result_args[target_arg.name] = yes
                }
            }
        }
        i += 1
    }
    # Fill in empty spots in result dictionary:
    for arg in arg_defs.args {
        if not result_args.has(arg.name) {
            if arg.takes_arg and not arg.catchall and
                    not arg.repeatable {
                result_args[arg.name] = none
            } elseif arg.catchall or (arg.takes_arg and
                    arg.repeatable) {
                result_args[arg.name] = []
            } elseif not arg.takes_arg and arg.repeatable {
                result_args[arg.name] = 0
            } else {
                result_args[arg.name] = no
            }
        }
    }
    # Collect all switches that will have an action_func run:
    var action_switch_names = []
    for arg in arg_defs.args {
        if not arg.positional and
                arg.action_func != none and
                result_args.has(arg.name) and
                result_args[arg.name] != none and
                result_args[arg.name] != no {
            # A switch with an action. Collect it for later sorting:
            action_switch_names.add(arg.name)
        }
    }
    # Get each action_func to be run in alphabetical switch order:
    action_switch_names.sort()
    var action_funcs_in_order = []
    for action_switch_name in action_switch_names {
        for arg in arg_defs.args {
            if arg.name == action_switch_name {
                action_funcs_in_order.add(arg.action_func)
                break
            }
        }
    }
    # Run each action_func in order:
    for action_func in action_funcs_in_order {
        var result_value = action_func()
        if typename(result_value) == "str" and
                result.exit_code == none {
            result.output = result_value
            result.exit_code = 0
        }
    }
    # Check if we even have the minimum number of required arguments:
    # (Needs to happen after action switches, so e.g. --help still works!)
    if positional_args_total < arg_defs.min_positional_args and
            result.exit_code == none {
        var target_arg = arg_defs.get_nth_posarg(
            positional_args_total + 1
        )
        result.output += arg_defs.program_name + ": error: "
            "Missing positional argument: " +
            target_arg.name.replace(" ", "_") + "\n"
        result.output += (
            "Use " + arg_defs.program_name +
            " --help to show usage.\n"
        )
        result.exit_code = -1
        return result
    }
    if result.exit_code == none {  # Extra-check non-empty catch-all is happy:
        var catch_all = arg_defs.get_catchall_arg()
        if catch_all != none and not catch_all.optional and
                result_args[catch_all.name].len == 0 {
            result.output += arg_defs.program_name + ": error: "
                "Missing positional argument: " +
                catch_all.name.replace(" ", "_") + "\n"
            result.output += (
                "Use " + arg_defs.program_name +
                " --help to show usage.\n"
            )
            result.exit_code = -1
            return result
        }
    }
    # Return result:
    result.args = result_args
    return result
}

