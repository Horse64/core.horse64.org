# @module net.fetch
# Copyright (c) 2020-2022,  ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.


func _get_str_single(uri, callback, max_size=(4 * 1024)) {
    var obj = net.fetch.get(uri)
    obj.recv(max_size, func(err, data) {
        if err != none {
            return callback(error, none)
        }
        obj.close()
        callback(err, data.as_str())
    })
}


func get_str(uri, callback, max_size=(4 * 1024)) {
    var was_single_uri = no

    # Validate input:
    if typename(uri) == "bytes" {
        uri = uri.as_str()
    }
    if (typename(uri) != "list" and typename(uri) != "str") or
            (typename(uri) == "list" and uri.len > 0 and
            typename(uri[1]) != "str" and typename(uri[1]) != "bytes") {
        throw new TypeError("unknown type for uri, expected "
            "str or list for multiple")
    }
    var uris_unclean = uri
    if typename(uri) != "list" {
        was_single_uri = yes
        uris_unclean = [uri]
    }
    var uris = []
    for uri in uris_unclean {
        if typename(uri) == "bytes" {
            uris.append(uri.as_str())
        }
        uris.append(uri)
    }
    uris.reverse()  # So we can use .pop() in order.

    # Let's go do the work:
    var results = []
    func fetch_next_do {
        if uris.len == 0 {
            # Reached the end of queue.
            if was_single_uri {
                assert(results.len == 1)
                return callback(none, results[1])
            }
            return callback(none, results)
        }
        var uri = uris.pop()

        # Trigger next download:
        _get_str_single(uri, func (err, result) {
            if err != none {
                callback(err, none)
            }
            assert(result != none)
            results.append(result)
            fetch_next_do()  # Start over and repeat!
        })
    }
    fetch_next_do()
}

