# @module net.fetch
# Copyright (c) 2020-2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import io from core.horse64.org
import net from core.horse64.org
import uri from core.horse64.org

func _validate_uri_list(target_uri) {
    # Validate input:
    if typename(target_uri) == "bytes" {
        target_uri = target_uri.as_str()
    }
    if (typename(target_uri) != "list" and typename(target_uri) != "str") or
            (typename(target_uri) == "list" and target_uri.len > 0 and
             typename(target_uri[1]) != "str" and
             typename(target_uri[1]) != "bytes") {
        throw new TypeError("Unknown type for target_uri, expected "
            "str or bytes or list for multiple.")
    }

    # Turn to a list, ensure it's really all strings:
    var uris_unclean = target_uri
    if typename(target_uri) != "list" {
        was_single_uri = yes
        uris_unclean = [target_uri]
    }
    var uris = []
    for target_uri in uris_unclean {
        if typename(target_uri) == "bytes" {
            uris.append(target_uri.as_str())
        } elseif typename(target_uri) != "str" {
            throw new TypeError("unknown type for uri "
                "list entry, expected "
                "str or bytes")
        }
        uris.append(target_uri)
    }
    return uris
}

## Get an internet resource and write it to a disk file.
##
## @throws net.NetworkIOError, can throw sub variants
##   net.ServerError and net.ClientError
## @param target_uri (str or list) A single URI as an @{str}, or
##   a @{list} or URIs, e.g. `["https://site1.org",
##   `["https://site2.org"]`. For a list, any of them
##   causing an @{error|Error} will interrupt and return it.
## @param path (str or list) A target path as an @{str},
##   or a @{list} of paths if the `target_uri` param is also a @{list}.
## @param max_size num Since the string will be written to
##   disk unattended, for security reasons there must be a maximum
##   size. It defaults to 100MB. Use @{net.fetch.get} if you want
##   to avoid any limit.
func write_to_file(target_uri, path, max_size=(100 * 1024  * 1024)) {
    # Validate input:
    var was_single_uri = {"bytes", "str"}.has(typename(target_uri))
    var uris = _validate_uri_list(target_uri)
    uris.reverse()  # So we can use .pop() to get it in order.
    if uris.len == 0 {
        return []
    }
    var paths = path
    if typename(paths) != "list" {
        paths = [paths]
    }
    if uris.len != paths.len {
        throw new ValueError("supplied target paths "
            "must be same amount as URIs")

    }

    # Go to first URI:
    var next_uri = uris.pop()
    var next_path = uris.pop()
    var target_obj, src_obj
    do {
        target_obj = io.open(next_path, "wb") later:
        await target_obj
        src_obj = net.fetch.open(next_uri) later:
        await src_obj
    } rescue any {
        target_obj.close()
        src_obj.close()
        throw
    }

    # Do first chunk of read & write:
    var done = io.read_write_transfer(
        src_obj, target_obj_next_uri,
        error_prefix="Error on URI '" + next_uri + "':",
        close_on_error=yes
    )
    later:

    await done

    if done and uris.len == 0 {
        # We're fully done!
        return
    } elseif done {
        # Go to next URI:
        next_uri = uris.pop()
        next_path = paths.pop()
        target_obj.close()
        src_obj.close()
        do {
            target_obj = io.open(next_path, "wb") later:
            await target_obj
            src_obj = net.fetch.open(next_uri) later:
            await src_obj
        } rescue any {
            target_obj.close()
            src_obj.close()
            throw
        }
    }

    # Do next chunk of read & write:
    done = read_and_write(
        src_obj, target_obj,
        error_prefix="Error on URI '" + next_uri + "':",
        close_on_error=yes)
    later repeat
}

## Get an internet resource and download it as a widechar string.
## Can also get a list of resources at once.
##
## @throws net.NetworkIOError, can throw sub variants
##   net.ServerError and net.ClientError
## @param target_uri (str or list) A single URI as an @{str}, or
##   a @{list} or URIs, e.g. `["https://site1.org",
##   `["https://site2.org"]`.
## @param max_size num Since the string will be fully loaded
##   into memory, for security reasons there must be a maximum
##   size. It defaults to 100KB. Use @{net.fetch.get} if you want
##   to avoid limits entirely.
## @param one_or_more bool If set to @{yes}, ignore if some of the
##   URIs (if you supplied a @{list}) fail, as long as at least
##   one succeeds. The default is @{no}, and any @{error|Error}
##   will always abort.
## @param allow_disk bool Defaults to @{no}. If set to @{yes},
##   `file://` paths are allowed. **Only use if you want the URI
##   to possibly cause any file on the entire machine unrestricted.**
## @param allow_vfs bool Defaults to @{no}. If set to @{yes},
##   `vfs://` paths are allowed. **Only use if you want the URI
##   to possibly access any sort of internal resource unrestricted.**
## @returns (str or list) If the `target_uri` parameter was a
##   an @{str} and not a @{list}, returns a single @{str} of
##   the contents. Otherwise, a @{list} of @{str}s, with
##   failed entries @{none} if `one_or_more` is @{yes}.
func get_str(
        target_uri, max_size=(1024 * 100), one_or_more=no,
        allow_vfs=no, allow_disk=no
        ) {
    # Validate input:
    var was_single_uri = {"bytes", "str"}.has(typename(target_uri))
    var uris = _validate_uri_list(target_uri)
    uris.reverse()  # So we can use .pop() to get it in order.
    if uris.len == 0 {
        return []
    }

    # Let's go do the work, get the first item:
    var result = []
    var remain_unfailed = uris.len
    var next_uri = uris.pop()
    var obj = net.fetch.open(
        next_uri, allow_vfs=allow_vfs, allow_disk=allow_disk
    ) later:
    await obj
    var data = obj.read(amount=max_size)
    later:

    # Collect result with last item we got:
    do {
        await data
        result.add(data.as_str())
    } rescue any as e {
        remain_unfailed -= 1
        result.add(none)

        if not one_or_more or remain_unfailed <= 0 {
            if not was_single_uri {  # User might wonder which URI:
                e.msg = "Error while fetching '" +
                    next_uri + "': " + e.msg
            }
            throw e
        }
    } finally {
        obj.close()
    }

    if uris.len == 0 {
        # We're done!
        if was_single_uri {
            return result[1]
        }
        return result
    }

    # We're not done yet, repeat with the next one:
    next_uri = uris.pop()
    obj = net.fetch.open(
        next_uri, allow_vfs=allow_vfs, allow_disk=allow_disk
    )
    data = obj.read(amount=max_size) later repeat
}

func try_readable(docuri) {
    # Using io.exists here is incorrect.
    var result = io.exists(
        uri.to_file_or_vfs_path(docuri)
    ) later:
    await result
    return result

    # THIS BREAKS OUR PYTHON TRANSLATOR, BIG DISABLE HACK XXX:
    #do {
    #    with net.fetch.open(
    #            docuri, allow_vfs=yes, allow_disk=yes
    #            ) later as obj {
    #        var data = obj.read(amount=1)
    #        later:
    #
    #        await data
    #        return yes
    #    }
    #} rescue net.ClientError, PermissionError,
    #        PathNotFoundError {
    #    print("HELLO")
    #    return no
    #}
    #print("EXIT")
    #return no
}

