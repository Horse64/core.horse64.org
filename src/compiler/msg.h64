# @module compiler.msg
# Copyright (c) 2020-2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import textfmt

import compiler.token as token

enum MsgKind {
    M_ERROR,
    M_WARNING,
    M_INFO,
    M_DEBUG,
}

type FileMsg {
    ## @types (compiler.project.ProjectFile, none)
    var source_file
    var kind = M_ERROR
    var line = none
    var col = none
    var content = ""
}

func FileMsg.init(message, kind=M_ERROR,
        source_file=none, line=none, col=none) {
    self.content = message + ""
    self.source_file = source_file
    self.line = line
    self.col = col
    self.kind = kind
}

func FileMsg.as_str {
    var t = "FileMsg(content=" +
        token.as_escaped_code_string(self.content) +
        ",file=" + self.source_file.as_str()
    if self.line != none {
        t += ",line=" + self.line.as_str()
        if self.col != none {
            t += ",col=" + self.col.as_str()
        }
    }
    return t + ")"
}

func FileMsg.as_json_obj {
    var output = {
        "msg"-> self.content,
        "line"-> none,
        "col"-> none,
        "file->uri"-> none,
    }
    if self.line != none {
        output["line"] = self.line
        if self.col != none {
            output["col"] = self.col
        }
    }
    if self.source_file != none and
            self.source_file.source_uri != none {
        output["file-uri"] = self.source_file.source_uri
    }
    return output
}

func FileMsg.as_terminal_str(prefix="", wrap_width=none) {
    var next_line_prefix = ""
    var t = ""
    if prefix == none {
        prefix = ""
    }
    if prefix != "" {
        t += prefix + ": "
    }
    if self.kind == M_ERROR {
        t += "error: "
    } elseif self.kind == M_WARNING {
        t += "warning: "
    } elseif self.kind == M_INFO {
        t += "info: "
    } elseif self.kind == M_DEBUG {
        t += "debug: "
    }
    if self.line != none or self.source_file != none {
        t += "in "
        if self.source_file != none {
            t += self.source_file.source_uri + ":"
        }
        if self.line != none {
            t += self.line.as_str() + ":"
            if self.col != none {
                t += self.col.as_str() + ":"
            }
        }
        t += " "
    }
    next_line_prefix = " ".rep(t.len)
    t += self.content
    if wrap_width != none {
        t = textwrap.wrap(t, wrap_width,
            later_lines_prefix=next_line_prefix)
    }
    return t
}

