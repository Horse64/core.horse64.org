# @module compiler.project
# Copyright (c) 2020-2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.comment.command as command_comment

type ProjectFile {
    ## @types (str, none)
    var source_uri protect = none

    var is_entrypoint = no
    var _is_single_file = none
}

func ProjectFile.init(
        source_uri=none, is_entrypoint=no,
        force_single_file=no) {
    self.source_uri = source_uri
    self.is_entrypoint = is_entrypoint
    if force_single_file {
        self._is_single_file = yes
    } elseif is_entrypoint {
        self._is_single_file = no
    }
}

func ProjectFile.open {
    if self.source_uri == none {
        throw new ValueError("project file has no source")
    }
    var result = net.fetch.open(
        self.source_uri, allow_vfs=yes, allow_disk=yes
    ) later:

    await result
    return result
}

func ProjectFile.check_is_single_file {
    if self._is_single_file != none {
        return self._is_single_file == yes
    }
    if self.source_uri == none {
        self._is_single_file = yes
        return yes
    }
    var contents = none
    with self.open() later as f {
        contents = f.read()
    }
    var opts = command_comment.get_build_options_from_str(
        contents
    )
    self._is_single_file = opts.has("--single-file")
    return self._is_single_file
}

