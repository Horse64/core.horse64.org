## @module compiler.moose64.build.c_build
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import io from core.horse64.org
import path from core.horse64.org
import uri from core.horse64.org

import compiler.compiler_log as clog
import compiler.moose64.codegen.c_gen.c_export_result as c_export_result
import compiler.msg as msg

func build_project(c_export, build_options, msgs=none) {
    var cc = "gcc"
    var exec_ext = ".bin"
    var is_moose64 = build_options.is_moose64
    var program_name = if is_moose64 ("moosec") else ("horsec")
    var output_file_name = "program"
    var output_file_dir_uri = c_export.project.base_dir_uri
    if build_options.output_file != none {
        output_file_dir_uri = uri.dirname(
            build_options.output_file
        )
    }

    func fix_output_dir_if_needed {
        if output_file_dir_uri != none and
                {"file"}.has(uri.get_protocol(
                    output_file_dir_uri)) {
            return
        }
        if output_file_dir_uri != none {
            clog.log_or_print(new msg.FileMsg(
                "The given output dir protocol " +
                uri.get_protocol(output_file_dir_uri) + ":// "
                "isn't supported. Reverting to current dir.",
                kind=msg.M_WARNING,
            ), msgs=msgs, program_name=program_name)
        }
        var cwd_dir = io.working_dir()
        later:

        await cwd_dir
        cwd_dir = path.make_abs(cwd_dir)
        output_file_dir_uri = uri.from_disk_path(cwd_dir)
    }
    fix_output_dir_if_needed()
    later:

    var horp_available = no
    func use_horp_detection_if_available {
        if not horp_available {
            return later
        }
    }
    use_horp_detection_if_available()
    later:

    if not horp_available {
        clog.log_or_print(new msg.FileMsg(
            "This compiler version was built without horp, "
            "assuming Linux x64 and default compiler options.",
            kind=msg.M_WARNING,
        ), msgs=msgs, program_name=program_name)
    }

    if c_export.project != none and
            c_export.project.package_name != none {
        var specific_name = c_export.project.package_name
        if specific_name.find(".") != none {
            specific_name = specific_name.sub(
                1, specific_name.find(".") - 1
            )
        }
        specific_name = specific_name.trim()
        if specific_name.len > 0 {
            output_file_name = specific_name
        }
    }
    if build_options.output_file != none {
        var user_file_name = path.basename(
            build_options.output_file
        ).trim()
        if user_file_name.len > 0 {
            output_file_name = user_file_name
        }
    }
    if not output_file_name.has(".") {
        output_file_name += exec_ext
    }

    var dir_path = uri.to_file_or_vfs_path(
        output_file_dir_uri
    )
    var o_opt_path = path.join(dir_path, output_file_name)
    if o_opt_path.starts("-") {
        o_opt_path = "." + path.sep + o_opt_path
    }

    var object_file_paths = []
    var cmd_list = []

    func schedule_file(c_export_file) {
        var furi = c_export_file.file_uri
        if furi == none or not {
                c_export_result.CEF_C_SOURCE}.has(
                c_export_file.kind) {
            return later yes
        }
        if not {"file"}.has(uri.get_protocol(furi)) {
            if msgs == none {
                throw new RuntimeError("This type of URI "
                    "is currently not handled by the "
                    "compiler.moose64.build.c_build.build_project "
                    "function.")
            }
            clog.log_or_print(new msg.FileMsg(
                "Unexpected " + uri.get_protocol(furi) + ":// "
                "URI, this protocol is currently not supported by "
                "the build backend.",
            ), msgs=msgs, program_name=program_name)
            return later no
        }
        var disk_path = uri.to_file_or_vfs_path(furi)
        if disk_path.starts("-") {
            disk_path = "." + path.sep + disk_path
        }
        var exists_result = io.exists(disk_path) later:

        await exists_result
        if not exists_result {
            clog.log_or_print(new msg.FileMsg(
                "Internal error, we were handed a file from the "
                "code gen backend but it doesn't exist: " +
                disk_path,
            ), msgs=msgs, program_name=program_name)
            return later no
        }
        var object_file_path = disk_path + ".o"
        cmd_list.add([cc, "-c", "-o",
            object_file_path, "--", disk_path])
        object_file_paths.add(object_file_path)
        return later yes
    }
    func schedule_all_files {
        var queue = []
        for c_export_file in c_export.build_files {
            queue.add(c_export_file)
        }
        if queue.len == 0 {
            return later yes
        }
        var item = queue.pop()
        var result = schedule_file(item)
        later:

        await result
        if not result {
            return later no
        }
        if queue.len == 0 {
            return later yes
        }
        item = queue.pop()
        result = schedule_file(item)
        later repeat
    }
    var result = schedule_all_files() later:

    await result
    if not result {
        return later no
    }

    cmd_list.add([cc, "-o", o_opt_path, "--"] +
        object_file_paths)
    if build_options.verbose_mode {
        clog.log_or_print(new msg.FileMsg(
            "Running build command: " + cmd_list.as_str(),
            kind=msg.M_INFO,
        ), msgs=msgs, program_name=program_name)
    }
    return later no
}

