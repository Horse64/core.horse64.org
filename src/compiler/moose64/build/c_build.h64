## @module compiler.moose64.build.c_build
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import path from core.horse64.org
import uri from core.horse64.org

func build_project(c_export, build_options, msgs=none) {
    var cc = "gcc"
    var is_moose64 = build_options.is_moose64
    var program_name = if is_moose64 ("moosec") else ("horsec")

    var cmd = [cc]
    for furi in c_export.build_c_source_uris {
        if not {"file"}.has(uri.get_protocol(furi)) {
            if msgs == none {
                throw new RuntimeError("This type of URI "
                    "is currently not handled by the "
                    "compiler.moose64.build.c_build.build_project "
                    "function.")
            }
            msgs.add(new msg.FileMsg(
                "Unexpected " + uri.get_protocol(furi) + ":// "
                "URI, this protocol is currently not supported by "
                "the build backend.",
                source_file=pfile,
                line=none,
                col=none,
            ))
            return later no
        }
        var disk_path = uri.to_file_or_vfs_path(furi)
        if disk_path.starts("-") {
            disk_path = "." + path.sep + disk_path
        }
        cmd += [disk_path]
    }
    if build_options.verbose_mode {
        print(program_name + ": info: Running build command: " +
            cmd.as_str())
    }
    return later no
}

