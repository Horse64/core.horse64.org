## @module compiler.moose64.codegen.c_gen.c_export_result
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import textfmt from core.horse64.org

enum CExportFileKind {
    CEF_C_SOURCE,
    CEF_C_SOURCE_HEADER,
}

type CExportFile {
    var file_uri
    var kind
    var cwd_dir_uri
    var extra_compile_options = []
}

func CExportFile.init(kind, file_uri=none,
        cwd_dir_uri=none, extra_compile_options=none) {
    self.file_uri = file_uri
    self.kind = kind
    if extra_compile_options != none {
        self.extra_compile_options = extra_compile_options.copy()
    }
    self.cwd_dir_uri = cwd_dir_uri
}

func CExportFile.as_str {
    return "CExportFile{" +
        "file_uri=" + if self.file_uri != none
            (textfmt.as_escaped_code_string(
                self.file_uri
            )) else ("none") + ","
        "kind=" + CExportFileKind.num_label(self.kind) +
    "}"
}

type CExportResult {
    var project
    var build_base_dir_uri = none
    var build_files = []
    var build_c_source_uris = []
    var build_c_include_uris = []
}

func CExportResult.as_str {
    var t = "CExportResult{"
    t += "build_base_dir_uri=" +
        if self.build_base_dir_uri != none
            (textfmt.as_escaped_code_string(
                self.build_base_dir_uri
            )) else ("none") + ","
    t += "project=" +
        self.project.as_str() + ","
    t += "build_files=["
    for build_file in self.build_files {
        if not t.ends("[") {
            t += ","
        }
        t += build_file.as_str()
    }
    t += "]"
    t += "}"
    return t
}
