## @module compiler.moose64.c_symbol
# Copyright (c) 2024-2025, ellie/@ell1e & Horse64's contributors
# (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import text from core.horse64.org

import compiler.moose64.c_importer as m64_c_importer
import compiler.typeinfo as typeinfo

type CFuncSymbol {
    var c_func_signature_str protect
    var func_signature_str protect
    var func_signature_expr protect

    var storage_id protect

    var symbol_name

    var parent_c_import_info

    var c_import_path

    var is_csymbol = yes
}

func CFuncSymbol.init(c_signature, _override_func_signature=none) {
    self.c_func_signature_str = c_signature
    if _override_func_signature != none {
        if typename(_override_func_signature) == "str" {
            self.func_signature_str = _override_func_signature
        } else {
            self.func_signature_expr = _override_func_signature
        }
    }

    var symbol_name = none
    var had_bracket = no
    var last_idlike_idx = none
    var last_nonspace_idx = none
    var i = 1
    while i <= c_signature.len {
        var c = c_signature[i]
        if i > 1 and c == "(" {
            if last_idlike_idx != none and
                    last_nonspace_idx == last_idlike_idx {
                symbol_name =
                    get_ident_ending_at(c_signature,
                        last_nonspace_idx)
                break
            }
            last_nonspace_idx = i
            had_bracket = yes
        } elseif is_idlike_char(c) {
            if had_bracket {
                break
            }
            last_idlike_idx = i
            last_nonspace_idx = i
        } elseif c != " " or c == "\t" {
            last_nonspace_idx = i
        }
        i += 1
    }
    if symbol_name == none {
        throw new ValueError("Got C signature but failed "
            "to extract func name.")
    }
    self.symbol_name = symbol_name
}

func CFuncSymbol.create_typeinfo(project) {
    assert(typename(self.func_signature_expr) == "obj" and
        has_attr(self.func_signature_expr, "is_func_ref") and
        self.func_signature_expr.is_func_ref)
    var tinfo = typeinfo.create_typeinfo_from_typeexpr_and_verify(
        self.func_signature_expr,
        project=project,
        is_moose64=yes,
        debug=no,
    ) later:

    await tinfo
    return tinfo
}

func is_idlike_char(c) {
    return (text.code(c) >= text.code("0") and
        text.code(c) <= text.code("9")) or
        (text.code(c) >= text.code("A") and
        text.code(c) <= text.code("Z")) or
        (text.code(c) >= text.code("a") and
        text.code(c) <= text.code("z")) or
        text.code(c) > 127 or
        c == "_"
}

func get_ident_ending_at(s, idx) {
    if idx < 1 or idx > s.len or
            not is_idlike_char(s[idx]) {
        return none
    }
    var end_idx = idx
    while idx >= 1 and is_idlike_char(s[idx]) {
        idx -= 1
    }
    var start_idx = idx + 1
    assert(start_idx <= end_idx)
    assert(is_idlike_char(s[start_idx]))
    if text.code(s[start_idx]) >= text.code("0") and
            text.code(s[start_idx]) <= text.code("9") {
        return none
    }
    return s.sub(start_idx, end_idx)
}


func CFuncSymbol.auto_assign_id(project) {
    if self.storage_id != none {
        return
    }
    var new_id = m64_c_importer.get_mcref_id(project)
    assert(new_id != none)
    self.storage_id = new_id
    assert(not project.storage_id_to_csymbol_map.
        has(self.storage_id))
    project.storage_id_to_csymbol_map[self.storage_id] = self
}

