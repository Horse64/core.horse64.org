## @module compiler.moose64.autocast
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org

import compiler.token as token
import compiler.typeinfo as typeinfo
import compiler.typeinfo.ast_typeref as ast_typeref

type BinopAutocastResult {
    var cast_lefthand_to
    var cast_righthand_to
    var result_type

    var incompatible = no
}

func BinopAutocastResult.as_str {
    var t = "BinopAutocastResult{" +
        "cast_lefthand_to=" +
            self.cast_lefthand_to.as_str() + ","
        "cast_righthand_to=" +
            self.cast_righthand_to.as_str() + ","
        "result_type=" +
            self.result_type.as_str() + ","
        "incompatible=" +
            self.incompatible.as_str() +
        "}"
    return t
}

func get_num_filtered_mods(tinfo) {
    var result = []
    for mod in tinfo.modifiers {
        if {"readonly", "const"}.has(mod.name) {
            continue
        }
        result.add(mod.copy())
    }
    return result
}

func check_if_allowed_implicit_cast_from_to(
        from_typeinfo, to_typeinfo
        ) {
    var right_hand_source_typeinfo = from_typeinfo
    var left_hand_target_typeinfo = to_typeinfo

    var refs_left = left_hand_target_typeinfo.ref_count(
        include_c_arrays=yes, include_arrays=yes
    )
    var refs_right = right_hand_source_typeinfo.ref_count(
        include_c_arrays=yes, include_arrays=yes
    )
    var target_is_any = (
        left_hand_target_typeinfo.kind == typeinfo.TI_C_TYPE and
        left_hand_target_typeinfo.orig_type_name == "any"
    )
    if refs_left > 0 and refs_left == refs_right and
            (right_hand_source_typeinfo.kind ==
                left_hand_target_typeinfo.kind or
             target_is_any) {
        if not left_hand_target_typeinfo.has_equivalent_modifiers(
                right_hand_source_typeinfo,
                allow_autodrop_mods=yes,
                allow_autoadd_mods=yes,
                ) {
            return no
        }
        if (left_hand_target_typeinfo.kind ==
                    typeinfo.TI_C_TYPE and
                right_hand_source_typeinfo.kind ==
                    typeinfo.TI_C_TYPE) or target_is_any {
            return (
                left_hand_target_typeinfo.orig_type_name != none and
                (left_hand_target_typeinfo.orig_type_name ==
                    right_hand_source_typeinfo.orig_type_name or
                target_is_any))
        } elseif left_hand_target_typeinfo.kind ==
                    typeinfo.TI_USERTYPE and
                right_hand_source_typeinfo.kind ==
                    typeinfo.TI_USERTYPE {
            return (
                left_hand_target_typeinfo.user_type_ref.alike(
                    right_hand_source_typeinfo.user_type_ref
                )
            )
        }
        return no
    } elseif refs_left == 0 and refs_right == 0 and
            left_hand_target_typeinfo.kind == typeinfo.TI_USERTYPE and
            right_hand_source_typeinfo.kind == typeinfo.TI_USERTYPE {
        return (
            left_hand_target_typeinfo.user_type_ref.alike(
                right_hand_source_typeinfo.user_type_ref
            )
        )
    }
    if refs_left > 0 and refs_right == 0 and
            right_hand_source_typeinfo.kind == typeinfo.TI_C_TYPE and
            right_hand_source_typeinfo.orig_type_name == "addr" {
        return yes
    }
    if refs_right > 0 and refs_left == 0 and
            left_hand_target_typeinfo.kind == typeinfo.TI_C_TYPE and
            {"addr", "addr_diff", "size", "u64"}.has(
                left_hand_target_typeinfo.orig_type_name
            ) {
        return yes
    }
    if refs_left == 0 and refs_right == 0 and
            left_hand_target_typeinfo.kind == typeinfo.TI_C_TYPE and
            right_hand_source_typeinfo.kind == typeinfo.TI_C_TYPE and
            ast_typeref.builtin_moose64_num_types.has(
                left_hand_target_typeinfo.orig_type_name
            ) and ast_typeref.builtin_moose64_num_types.has(
                right_hand_source_typeinfo.orig_type_name
            ) {
        if {"addr", "addr_diff"}.has(
                left_hand_target_typeinfo.orig_type_name
                ) and {"f32", "f64"}.has(
                right_hand_source.typeinfo.orig_type_name
                ) {
            return no
        }
        if {"f32", "f64"}.has(
                left_hand_target_typeinfo.orig_type_name
                ) and {"addr", "addr_diff"}.has(
                right_hand_source.typeinfo.orig_type_name
                ) {
            return no
        }
        return yes
    }
    return no
}

func get_math_binop_autocast(
        left_hand_typeinfo, right_hand_typeinfo, is_cmp_op=no
        ) {
    var result = new BinopAutocastResult()
    func cast_all_to(name, override_result=none) {
        result.cast_lefthand_to =
            typeinfo.create_from_simple_m64_type(name)
        result.cast_righthand_to =
            typeinfo.create_from_simple_m64_type(name)
        var result_name = name
        if override_result != none {
            result_name = override_result
        }
        result.result_type =
            typeinfo.create_from_simple_m64_type(result_name)
        return result
    }

    # Below is the section for ref types:

    var refs_left = left_hand_typeinfo.ref_count(
        include_c_arrays=yes, include_arrays=no
    )
    var refs_right = right_hand_typeinfo.ref_count(
        include_c_arrays=yes, include_arrays=no
    )
    if refs_left > 0 and refs_right == 0 and
            right_hand_typeinfo.kind == typeinfo.TI_C_TYPE and
            get_num_filtered_mods(right_hand_typeinfo).len == 0 {
        if ast_typeref.builtin_moose64_unsigned_num_types.has(
                right_hand_typeinfo.orig_type_name
                ) {
            result = cast_all_to("addr")
            result.result_type =
                left_hand_typeinfo.copy()
            return result
        } elseif ast_typeref.builtin_moose64_signed_num_types.has(
                right_hand_typeinfo.orig_type_name
                ) {
            result = cast_all_to("addr_diff")
            result.result_type =
                left_hand_typeinfo.copy()
            return result
        }
        result.incompatible = yes
        return result
    } elseif refs_right > 0 and refs_left == 0 and
            left_hand_typeinfo.kind == typeinfo.TI_C_TYPE and
            get_num_filtered_mods(refs_left).len == 0 {
        if left_hand_typeinfo.orig_type_name == "addr" {
            return cast_all_to("addr")
        } elseif left_hand_typeinfo.orig_type_name == "addr_diff" {
            return cast_all_to("addr_diff")
        } elseif is_cmp_op and
                ast_typeref.builtin_moose64_signed_num_types.has(
                    left_hand_typeinfo.orig_type_name
                ) {
            return cast_all_to("addr_diff")
        } elseif is_cmp_op and
                ast_typeref.builtin_moose64_unsigned_num_types.has(
                    left_hand_typeinfo.orig_type_name
                ) {
            return cast_all_to("addr")
        }
        result.incompatible = yes
        return result
    }

    # Below is the section for non-ref-types:

    var right_hand_num_filtered_mods = []
    var left_hand_num_filtered_mods = []
    for mod in left_hand_typeinfo.modifiers {
        if {"readonly", "const"}.has(mod.name) {
            continue
        }
        left_hand_num_filtered_mods.add(mod.copy())
    }
    for mod in right_hand_typeinfo.modifiers {
        if {"readonly", "const"}.has(mod.name) {
            continue
        }
        right_hand_num_filtered_mods.add(mod.copy())
    }
    if left_hand_num_filtered_mods.len > 0 or
            right_hand_num_filtered_mods.len > 0 or
            left_hand_typeinfo.kind != typeinfo.TI_C_TYPE or
            right_hand_typeinfo.kind != typeinfo.TI_C_TYPE {
        result.incompatible = yes
        return result
    }
    if left_hand_typeinfo.orig_type_name != none and
            (right_hand_typeinfo.orig_type_name ==
                left_hand_typeinfo.orig_type_name or
             {"u8", "byte", "i8"}.has(
                right_hand_typeinfo.orig_type_name
             ) and {"u8", "byte", "i8"}.has(
                left_hand_typeinfo.orig_type_name
             )) {
        if {"empty", "any", "bool"}.has(
                left_hand_typeinfo.orig_type_name) {
            result.incompatible = yes
            return result
        }
        if not left_hand_typeinfo.has_equivalent_modifiers(
                right_hand_typeinfo.modifiers) {
            result.incompatible = yes
            return result
        }
        var result_name = left_hand_typeinfo.orig_type_name
        if (left_hand_typeinfo.orig_type_name == "i8" or
                right_hand_typeinfo.orig_type_name == "i8") and
                left_hand_typeinfo.orig_type_name !=
                    right_hand_typeinfo.orig_type_name {
            return cast_all_to("i8")
        }
        result.result_type = left_hand_typeinfo.copy()
        return result
    }
    var addr_types = {"addr", "addr_diff"}
    var addr_compatible_nums = {"i8", "u8",
        "byte", "size", "i16", "u16", "i32", "u32",
        "i64", "u64", "addr", "addr_diff"}
    if (addr_types.has(
            left_hand_typeinfo.orig_type_name) and
            addr_compatible_nums.has(
                right_hand_typeinfo.orig_type_name
            )) or (addr_types.has(
                right_hand_typeinfo.orig_type_name
            ) and addr_compatible_nums.has(
                left_hand_typeinfo.orig_type_name
            )) {
        if ast_typeref.builtin_moose64_unsigned_num_types.has(
                left_hand_typeinfo.orig_type_name
                ) and ast_typref.builtin_moose64_unsigned_num_types.has(
                    right_hand_typeinfo.orig_type_name
                ) {
            return cast_all_to("u64", "addr")
        } elseif left_hand_typeinfo.orig_type_name == "addr" or
                right_hand_typeinfo.orig_type_name == "addr" {
            return cast_all_to("i64", override_result="addr")
        } else {
            return cast_all_to("addr_diff")
        }
    }
    if left_hand_typeinfo.orig_type_name == "f64" {
        if {"f32", "f64", "byte", "u8", "i8", "size",
                "u16", "i16", "u32", "i32", "u64", "i64"
                }.has(
                    right_hand_typeinfo.orig_type_name
                ) {
            return cast_all_to("f64")
        }
    } elseif left_hand_typeinfo.orig_type_name == "f32" {
        if {"f64", "u64", "i64", "size"}.has(
                right_hand_typeinfo.orig_type_name) {
            if right_hand_typeinfo.orig_type_name == "f64" {
                return cast_all_to("f64")
            } else {
                return cast_all_to("f64", override_result="f32")
            }
        } elseif {"f32", "byte", "u8", "i8",
                "u16", "i16", "u32", "i32"}.has(
                right_hand_typeinfo.orig_type_name) {
            return cast_all_to("f32")
        }
    }
    var sizes = [64, 32, 16]
    var i = 1
    while i <= sizes.len {
        var size = sizes[i]
        var size_s = size.as_str()
        if left_hand_typeinfo.orig_type_name == "u" + size_s or
                (size == 64 and
                left_hand_typeinfo.orig_type_name == "size") or
                left_hand_typeinfo.orig_type_name == "i" + size_s {
            if right_hand_typeinfo.orig_type_name == "f64" {
                return cast_all_to("f64")
            } elseif right_hand_typeinfo.orig_type_name == "f32" {
                if size >= 64 {
                    return cast_all_to("f64", override_result="f32")
                } else {
                    return cast_all_to("f32")
                }
            }
            if ast_typeref.builtin_moose64_signed_num_types.has(
                        right_hand_typeinfo.orig_type_name) or
                    ast_typeref.builtin_moose64_signed_num_types.has(
                        left_hand_typeinfo.orig_type_name
                    ) {
                var right_hand_bits = 8
                if right_hand_typeinfo.orig_type_name != "byte" {
                    right_hand_bits = right_hand_typeinfo.
                        orig_type_name.sub(2).to_num()
                }
                return cast_all_to("i" + math.max(
                    size, right_hand_bits
                ).as_str())
            } else {
                var right_hand_bits = 8
                if right_hand_typeinfo.orig_type_name == "size" {
                    right_hand_bits = 64
                } elseif right_hand_typeinfo.orig_type_name != "byte" {
                    right_hand_bits = right_hand_typeinfo.
                        orig_type_name.sub(2).to_num()
                }
                return cast_all_to("u" + math.max(
                    size, right_hand_bits
                )).as_str()
            }
        }
        i += 1
    }

    result.incompatible = yes
    return result
}

