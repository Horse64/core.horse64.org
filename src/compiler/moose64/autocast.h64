## @module compiler.moose64.autocast
# Copyright (c) 2024-2025, ellie/@ell1e & Horse64's contributors
# (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import bignum from core.horse64.org
import math from core.horse64.org

import compiler.ast.expr as ast_expr
import compiler.token as token
import compiler.typeinfo as typeinfo
import compiler.typeinfo.ast_typeref as ast_typeref

type BinopAutocastResult {
    var cast_lefthand_to
    var cast_righthand_to
    var result_type

    var incompatible = no
}

func BinopAutocastResult.as_str {
    var t = "BinopAutocastResult{" +
        "cast_lefthand_to=" +
            self.cast_lefthand_to.as_str() + ","
        "cast_righthand_to=" +
            self.cast_righthand_to.as_str() + ","
        "result_type=" +
            self.result_type.as_str() + ","
        "incompatible=" +
            self.incompatible.as_str() +
        "}"
    return t
}

func get_mods_that_arent_regular_for_nums(tinfo,
        filter_out_leading_implicit_ref=yes) {
    var had_non_implicit_ref = no
    var result = []
    var i = tinfo.modifiers.len + 1
    while i > 1 {
        i -= 1
        mod = tinfo.modifiers[i]
        if {"array", "c_array", "ref"}.has(mod.name) {
            had_non_implicit_ref = yes
        }
        if not had_non_implicit_ref and
                filter_out_leading_implicit_ref and
                mod.name == "implicit ref" {
            continue
        }
        if {"readonly", "const", "implicit ref"}.has(mod.name) {
            continue
        }
        result.add(mod.copy())
    }
    return result
}

func check_if_allowed_implicit_cast_from_to(
        from_typeinfo, to_typeinfo,
        left_side_is_literal_none=no,
        right_side_is_literal_none=no,
        is_moose64=no,
        debug=no
        ) {
    if debug {
        print("moosec: debug: "
            "check_if_allowed_implicit_cast_from_to(): "
            "Testing cast from " + from_typeinfo.as_str() + " "
            "to " + to_typeinfo.as_str() + " type...")
    }
    var right_hand_source_typeinfo = from_typeinfo
    var left_hand_target_typeinfo = to_typeinfo
    if from_typeinfo.is_equivalent(
            to_typeinfo, ignore_self_ref=yes) {
        return yes
    }

    if (left_hand_target_typeinfo.ref_count(
                include_c_arrays=no,
                include_arrays=no,
                include_implicit_refs=yes,
                include_explicit_refs=no) > 0 or
            left_hand_target_typeinfo.ref_count(
                include_c_arrays=no,
                include_arrays=yes,
                include_implicit_refs=no,
                include_explicit_refs=no) > 0) and
            right_side_is_literal_none {
        # Special case: assigning 'none' to implicit ref or
        # to an array.
        return yes
    }

    var refs_left = left_hand_target_typeinfo.ref_count(
        include_c_arrays=yes, include_arrays=yes,
        include_implicit_refs=no, include_explicit_refs=yes
    )
    var refs_right = right_hand_source_typeinfo.ref_count(
        include_c_arrays=yes, include_arrays=yes,
        include_implicit_refs=no, include_explicit_refs=yes,
    )
    var target_is_any = (
        left_hand_target_typeinfo.kind == typeinfo.TI_C_TYPE and
        left_hand_target_typeinfo.orig_type_name == "any"
    )
    var target_is_ptr = left_hand_target_typeinfo.ref_count(
        include_c_arrays=yes, include_arrays=no,
        include_implicit_refs=no, include_explicit_refs=yes
    ) > 0
    var target_is_array = left_hand_target_typeinfo.is_array()
    var source_is_any = (
        right_hand_source_typeinfo.kind == typeinfo.TI_C_TYPE and
        right_hand_source_typeinfo.orig_type_name == "any"
    )
    var source_is_ptr = right_hand_source_typeinfo.ref_count(
        include_c_arrays=yes, include_arrays=no,
        include_implicit_refs=no, include_explicit_refs=yes
    ) > 0
    var source_is_array = right_hand_source_typeinfo.is_array()

    var both_plain_num_types = no
    if refs_left == 0 and refs_right == 0 and
            right_hand_source_typeinfo.is_plain_num_type() and
            left_hand_target_typeinfo.is_plain_num_type() {
        both_plain_num_types = yes
    }
    if not both_plain_num_types and
            from_typeinfo.is_readonly() and
            not to_typeinfo.is_readonly() {
        if debug {
            print("moosec: debug: "
                "check_if_allowed_implicit_cast_from_to(): "
                "We're trying to pass a readonly as a "
                "non-readonly, this isn't allowed for this "
                "type combination.")
        }
        return no
    }
    if from_typeinfo.is_array_with_readonly_data() and
            not to_typeinfo.is_array_with_readonly_data() {
        if debug {
            print("moosec: debug: "
                "check_if_allowed_implicit_cast_from_to(): "
                "We're trying to pass an array with readonly "
                "data to an array with non-readonly data, "
                "this isn't allowed.")
        }
        return no
    }
    if not left_hand_target_typeinfo.has_equivalent_modifiers(
            right_hand_source_typeinfo,
            allow_autodrop_mods=yes,
            allow_autoadd_mods=yes,
            is_moose64=is_moose64,
            ) and not both_plain_num_types and
            not (source_is_any and source_is_ptr and
                right_hand_source_typeinfo.modifiers.len == 1) {
        if debug {
            print("moosec: debug: "
                "check_if_allowed_implicit_cast_from_to(): "
                "Modifiers are too incompatible. "
                "Final cast result: no.")
        }
        return no
    }
    if refs_left > 0 and refs_left == refs_right and
            (right_hand_source_typeinfo.kind ==
                left_hand_target_typeinfo.kind or
             target_is_any or
             (target_is_array and source_is_array and
                source_is_any) or
             (target_is_ptr and source_is_ptr and
                source_is_any)
            ) {
        if debug {
            print("moosec: debug: "
                "check_if_allowed_implicit_cast_from_to(): "
                "We got refs or other indirect stuff, and "
                "the refs "
                "nesting matches. Also, the type either "
                "matches, or matches enough when respecting "
                "'any' behavior.")
        }
        if (left_hand_target_typeinfo.kind ==
                    typeinfo.TI_C_TYPE and
                right_hand_source_typeinfo.kind ==
                    typeinfo.TI_C_TYPE and
                left_hand_target_typeinfo.orig_type_name != none and
                left_hand_target_typeinfo.orig_type_name ==
                    right_hand_source_typeinfo.orig_type_name) {
            if debug {
                print("moosec: debug: "
                    "check_if_allowed_implicit_cast_from_to(): "
                    "Taking C type refs branch.")
            }
            return yes
        }
        if target_is_any or source_is_any {
            if debug {
                print("moosec: debug: "
                    "check_if_allowed_implicit_cast_from_to(): "
                    "Taking some side is any branch.")
            }
            var result =
                target_is_any or
                (source_is_any and target_is_array and
                 source_is_array) or
                (source_is_any and target_is_ptr and
                 source_is_ptr)
            if debug {
                print("moosec: debug: "
                    "check_if_allowed_implicit_cast_from_to(): "
                    "Final cast result: " +
                    result.as_str() + ".")
            }
            return result
        } elseif left_hand_target_typeinfo.kind ==
                    typeinfo.TI_USERTYPE and
                right_hand_source_typeinfo.kind ==
                    typeinfo.TI_USERTYPE {
            if debug {
                print("moosec: debug: "
                    "check_if_allowed_implicit_cast_from_to(): "
                    "Taking user type refs branch.")
            }
            var result = (
                left_hand_target_typeinfo.user_type_ref.alike(
                    right_hand_source_typeinfo.user_type_ref
                )
            )
            if debug {
                print("moosec: debug: "
                    "check_if_allowed_implicit_cast_from_to(): "
                    "Final cast result: " +
                    result.as_str() + ".")
            }
            return result
        }
        return no
    } elseif refs_left == 0 and refs_right == 0 and
            left_hand_target_typeinfo.kind == typeinfo.TI_USERTYPE and
            right_hand_source_typeinfo.kind == typeinfo.TI_USERTYPE {
        if debug {
            print("moosec: debug: "
                "check_if_allowed_implicit_cast_from_to(): "
                "Entered user types without refs branch.")
        }
        var result = (
            left_hand_target_typeinfo.user_type_ref.alike(
                right_hand_source_typeinfo.user_type_ref
            )
        )
        if debug {
            print("moosec: debug: "
                "check_if_allowed_implicit_cast_from_to(): "
                "Final cast result: " +
                result.as_str() + ".")
        }
        return result
    }
    if debug {
        print("moosec: debug: "
            "check_if_allowed_implicit_cast_from_to(): "
            "Entering special casts section, like "
            "refs to addr nums, etc.")
    }
    if refs_left > 0 and refs_right == 0 and
            right_hand_source_typeinfo.kind == typeinfo.TI_C_TYPE and
            right_hand_source_typeinfo.orig_type_name == "addr" {
        return yes
    }
    if refs_right > 0 and refs_left == 0 and
            left_hand_target_typeinfo.kind == typeinfo.TI_C_TYPE and
            {"addr", "addr_diff", "size", "u64"}.has(
                left_hand_target_typeinfo.orig_type_name
            ) {
        return yes
    }
    if refs_left == 0 and refs_right == 0 and
            left_hand_target_typeinfo.kind == typeinfo.TI_C_TYPE and
            right_hand_source_typeinfo.kind == typeinfo.TI_C_TYPE and
            ast_typeref.builtin_moose64_num_types.has(
                left_hand_target_typeinfo.orig_type_name
            ) and ast_typeref.builtin_moose64_num_types.has(
                right_hand_source_typeinfo.orig_type_name
            ) {
        if {"addr", "addr_diff"}.has(
                left_hand_target_typeinfo.orig_type_name
                ) and {"f32", "f64"}.has(
                right_hand_source.typeinfo.orig_type_name
                ) {
            return no
        }
        if {"f32", "f64"}.has(
                left_hand_target_typeinfo.orig_type_name
                ) and {"addr", "addr_diff"}.has(
                right_hand_source.typeinfo.orig_type_name
                ) {
            return no
        }
        return yes
    }
    if refs_left == 0 and refs_right == 0 and
            left_hand_target_typeinfo.kind == typeinfo.TI_C_TYPE and
            right_hand_source_typeinfo.kind == typeinfo.TI_C_TYPE and
            left_hand_target_typeinfo.orig_type_name ==
                "moose64_failed_result_t" and
            ast_typeref.builtin_moose64_integer_num_types.has(
                right_hand_source_typeinfo.orig_type_name
            ) {
        return yes
    }
    if refs_left == 0 and refs_right == 0 and
            left_hand_target_typeinfo.kind == typeinfo.TI_C_TYPE and
            right_hand_source_typeinfo.kind == typeinfo.TI_C_TYPE and
            left_hand_target_typeinfo.orig_type_name ==
                right_hand_source_typeinfo.orig_type_name {
        return yes
    }
    if refs_left == 0 and refs_right == 0 and
            left_hand_target_typeinfo.kind == typeinfo.TI_FUNCREF and
            right_hand_source_typeinfo.kind == typeinfo.TI_FUNCREF {
        if left_hand_target_typeinfo.cmp_signature(
                right_hand_source_typeinfo,
                is_moose64=is_moose64,
                ) {
            return yes
        }
    }
    return no
}

func is_plain_num_type(typeinfo_value) {
    if typeinfo_value.kind != typeinfo.TI_C_TYPE {
        return no
    }
    if get_mods_that_arent_regular_for_nums(
                typeinfo_value
            ).len != 0 {
        return no
    }
    if ast_typeref.builtin_moose64_unsigned_num_types.has(
            typeinfo_value.orig_type_name
            ) {
        return yes
    } elseif ast_typeref.builtin_moose64_signed_num_types.has(
            typeinfo_value.orig_type_name
            ) {
        return yes
    }
}

func get_math_binop_autocast(
        left_hand_typeinfo, right_hand_typeinfo,
        left_side_is_literal_none=no,
        right_side_is_literal_none=no,
        is_cmp_op=no,
        is_moose64=no, debug=no,
        ) {
    const program_name = if is_moose64 ("moosec") else ("horsec")
    var result = new BinopAutocastResult()
    func cast_all_to(name, override_result=none) {
        result.cast_lefthand_to =
            typeinfo.create_from_simple_m64_type(name)
        result.cast_righthand_to =
            typeinfo.create_from_simple_m64_type(name)
        var result_name = name
        if override_result != none {
            result_name = override_result
        }
        if is_cmp_op {
            result_name = "bool"
        }
        result.result_type =
            typeinfo.create_from_simple_m64_type(result_name)
        return result
    }

    if debug {
        print(program_name + ": debug: "
            "get_math_binop_autocast(): "
            "Called on left_hand_typeinfo=" +
                left_hand_typeinfo.as_str() + " "
            "right_hand_typeinfo=" +
                right_hand_typeinfo.as_str() + " "
            "is_cmp_op=" + is_cmp_op.as_str() + " "
            "is_moose64=" + is_moose64.as_str())
    }

    # Below is the section for ref types:

    var refs_left = left_hand_typeinfo.ref_count(
        include_c_arrays=yes, include_arrays=no,
        include_implicit_refs=no,
    )
    var refs_right = right_hand_typeinfo.ref_count(
        include_c_arrays=yes, include_arrays=no,
        include_implicit_refs=no,
    )
    var left_is_any = (
        left_hand_typeinfo.kind == typeinfo.TI_C_TYPE and
        left_hand_typeinfo.orig_type_name == "any"
    )
    var right_is_any = (
        right_hand_typeinfo.kind == typeinfo.TI_C_TYPE and
        right_hand_typeinfo.orig_type_name == "any"
    )
    if debug {
        print(program_name + ": debug: "
            "get_math_binop_autocast(): "
            "refs_left=" + refs_left.as_str() + " "
            "refs_right=" + refs_right.as_str() + " "
            "left_is_any=" + left_is_any.as_str() + " "
            "right_is_any=" + right_is_any.as_str())
    }
    if refs_left > 0 and refs_right == 0 and
            right_hand_typeinfo.kind == typeinfo.TI_C_TYPE and
            get_mods_that_arent_regular_for_nums(right_hand_typeinfo).len == 0 {
        if ast_typeref.builtin_moose64_unsigned_num_types.has(
                right_hand_typeinfo.orig_type_name
                ) {
            result = cast_all_to("addr")
            result.result_type =
                left_hand_typeinfo.copy()
        } elseif ast_typeref.builtin_moose64_signed_num_types.has(
                right_hand_typeinfo.orig_type_name
                ) {
            result = cast_all_to("addr_diff")
            result.result_type =
                left_hand_typeinfo.copy()
        } else {
            result.incompatible = yes
            return result
        }
        if debug {
            print(program_name + ": debug: "
                "get_math_binop_autocast(): "
                "Done, result=" + result.as_str())
        }
        return result
    } elseif refs_right > 0 and refs_left == 0 and
            left_hand_typeinfo.kind == typeinfo.TI_C_TYPE and
            get_mods_that_arent_regular_for_nums(
                left_hand_typeinfo
            ).len == 0 {
        if left_hand_typeinfo.orig_type_name == "addr" {
            result = cast_all_to("addr")
        } elseif left_hand_typeinfo.orig_type_name == "addr_diff" {
            result = cast_all_to("addr_diff")
        } elseif is_cmp_op and
                ast_typeref.builtin_moose64_signed_num_types.has(
                    left_hand_typeinfo.orig_type_name
                ) {
            result = cast_all_to("addr_diff")
        } elseif is_cmp_op and
                ast_typeref.builtin_moose64_unsigned_num_types.has(
                    left_hand_typeinfo.orig_type_name
                ) {
            result = cast_all_to("addr")
        } else {
            result.incompatible = yes
            return result
        }
        if debug {
            print(program_name + ": debug: "
                "get_math_binop_autocast(): "
                "Done, result=" + result.as_str())
        }
        return result
    } elseif is_cmp_op and refs_right > 0 and refs_left > 0 {
        if debug {
            print(program_name + ": debug: "
                "get_math_binop_autocast(): "
                "Got comparison of two ref types, "
                "just cast it to an address type and "
                "be done with it.")
        }
        return cast_all_to("addr")
    } elseif is_cmp_op and (
            ((
                refs_right == 0 and right_hand_typeinfo.is_array()
            ) and
            refs_left > 0 and left_is_any) or
            ((
                refs_left == 0 and left_hand_typeinfo.is_array()
            ) and
            refs_right > 0 and right_is_any)) {
        if debug {
            print(program_name + ": debug: "
                "get_math_binop_autocast(): "
                "Comparing any ref to array, cast it "
                "to address type.")
        }
        return cast_all_to("addr")
    } elseif refs_left > 0 and refs_right > 0 and
            refs_left == refs_right and
            {typeinfo.TI_C_TYPE,
             typeinfo.TI_USERTYPE}.has(
                 left_hand_typeinfo.kind) and
            (left_hand_typeinfo.kind ==
                right_hand_typeinfo.kind or
                left_is_any or right_is_any) {
        # If this is vaguely a similar type, then
        # allow math on this for the sake of pointer
        # comparisons.
        if left_hand_typeinfo.kind == typeinfo.TI_C_TYPE {
            if (right_hand_typeinfo.kind ==
                    typeinfo.TI_C_TYPE and
                    left_hand_typeinfo.orig_type_name ==
                        right_hand_typeinfo.orig_type_name) or
                    left_is_any or right_is_any {
                return cast_all_to("addr_diff")
            }
            result.incompatible = yes
            return result
        }
        if left_hand_typeinfo.kind == typeinfo.TI_USERTYPE {
            if (right_hand_typeinfo.kind ==
                    typeinfo.TI_USERTYPE and
                    left_hand_typeinfo.user_type_ref.alike(
                        right_hand_typeinfo.user_type_ref)) or
                    left_is_any or right_is_any {
                return cast_all_to("addr_diff")
            }
            result.incompatible = yes
            return result
        }
        result.incompatible = yes
        return result
    }

    # Below is the section for non-ref-types:

    if debug {
        print(program_name + ": debug: "
            "get_math_binop_autocast(): "
            "We're comparing two non-ref types "
            "that aren't arrays.")
    }
    if (left_hand_typeinfo.ref_count(
            include_c_arrays=no,
            include_arrays=no,
            include_implicit_refs=yes,
            include_explicit_refs=no) > 0 and
            right_side_is_literal_none) or
            (right_hand_typeinfo.ref_count(
             include_c_arrays=no,
             include_arrays=no,
             include_implicit_refs=yes,
             include_explicit_refs=no) > 0 and
             left_side_is_literal_none) {
        result = cast_all_to("addr")
        if debug {
            print(program_name + ": debug: "
                "get_math_binop_autocast(): "
                "Done, it's comparing none to an "
                "implicit ref which is allowed. "
                "result=" + result.as_str())
        }
        return result
    }
    var right_hand_num_filtered_mods = []
    var left_hand_num_filtered_mods = []
    for mod in left_hand_typeinfo.modifiers {
        if {"readonly", "const"}.has(mod.name) {
            continue
        }
        left_hand_num_filtered_mods.add(mod.copy())
    }
    for mod in right_hand_typeinfo.modifiers {
        if {"readonly", "const"}.has(mod.name) {
            continue
        }
        right_hand_num_filtered_mods.add(mod.copy())
    }
    if left_hand_num_filtered_mods.len > 0 or
            right_hand_num_filtered_mods.len > 0 or
            left_hand_typeinfo.kind != typeinfo.TI_C_TYPE or
            right_hand_typeinfo.kind != typeinfo.TI_C_TYPE {
        if debug {
            print(program_name + ": debug: "
                "get_math_binop_autocast(): "
                "Found incompatible due to either incompatible "
                "mods or since one isn't a basic C type.")
        }
        result.incompatible = yes
        return result
    }
    if left_hand_typeinfo.orig_type_name != none and
            (right_hand_typeinfo.orig_type_name ==
                left_hand_typeinfo.orig_type_name or
             ({"u8", "byte", "i8"}.has(
                right_hand_typeinfo.orig_type_name
             ) and {"u8", "byte", "i8"}.has(
                left_hand_typeinfo.orig_type_name
             ))) {
        if debug {
            print(program_name + ": debug: "
                "get_math_binop_autocast(): "
                "This is either some 8-bit situation, or "
                "both numeric types are exactly the same.")
        }
        if {"empty", "any", "bool"}.has(
                left_hand_typeinfo.orig_type_name) {
            result.incompatible = yes
            return result
        }
        if not left_hand_typeinfo.has_equivalent_modifiers(
                right_hand_typeinfo,
                allow_autodrop_mods=yes,
                allow_autoadd_mods=yes,
                is_moose64=is_moose64,
                ) {
            if debug {
                print(program_name + ": debug: "
                    "get_math_binop_autocast(): "
                    "Have incompatible modifiers.")
            }
            result.incompatible = yes
            return result
        }
        var result_name = left_hand_typeinfo.orig_type_name
        if (left_hand_typeinfo.orig_type_name == "i8" or
                right_hand_typeinfo.orig_type_name == "i8") and
                left_hand_typeinfo.orig_type_name !=
                    right_hand_typeinfo.orig_type_name {
            return cast_all_to("i8")
        }
        result.cast_lefthand_to = left_hand_typeinfo.copy()
        result.cast_righthand_to = right_hand_typeinfo.copy()
        result.result_type = left_hand_typeinfo.copy()
        return result
    }
    if debug {
        print(program_name + ": debug: "
            "get_math_binop_autocast(): "
            "This is some non-8-bit situation.")
    }
    var addr_types = {"addr", "addr_diff"}
    var addr_compatible_nums = {"i8", "u8",
        "byte", "size", "i16", "u16", "i32", "u32",
        "i64", "u64", "addr", "addr_diff"}
    if (addr_types.has(
            left_hand_typeinfo.orig_type_name) and
            addr_compatible_nums.has(
                right_hand_typeinfo.orig_type_name
            )) or (addr_types.has(
                right_hand_typeinfo.orig_type_name
            ) and addr_compatible_nums.has(
                left_hand_typeinfo.orig_type_name
            )) {
        if debug {
            print(program_name + ": debug: "
                "get_math_binop_autocast(): "
                "Left-hand is an addr type.")
        }
        if ast_typeref.builtin_moose64_unsigned_num_types.has(
                left_hand_typeinfo.orig_type_name
                ) and ast_typref.builtin_moose64_unsigned_num_types.has(
                    right_hand_typeinfo.orig_type_name
                ) {
            return cast_all_to("u64", "addr")
        } elseif left_hand_typeinfo.orig_type_name == "addr" or
                right_hand_typeinfo.orig_type_name == "addr" {
            return cast_all_to("i64", override_result="addr")
        } else {
            return cast_all_to("addr_diff")
        }
    }
    if debug {
        print(program_name + ": debug: "
            "get_math_binop_autocast(): "
            "Left-hand isn't an addr type.")
    }
    if left_hand_typeinfo.orig_type_name == "f64" {
        if {"f32", "f64", "byte", "u8", "i8", "size",
                "u16", "i16", "u32", "i32", "u64", "i64"
                }.has(
                    right_hand_typeinfo.orig_type_name
                ) {
            return cast_all_to("f64")
        }
    } elseif left_hand_typeinfo.orig_type_name == "f32" {
        if {"f64", "u64", "i64", "size"}.has(
                right_hand_typeinfo.orig_type_name) {
            if right_hand_typeinfo.orig_type_name == "f64" {
                return cast_all_to("f64")
            } else {
                return cast_all_to("f64", override_result="f32")
            }
        } elseif {"f32", "byte", "u8", "i8",
                "u16", "i16", "u32", "i32"}.has(
                right_hand_typeinfo.orig_type_name) {
            return cast_all_to("f32")
        }
    }
    if debug {
        print(program_name + ": debug: "
            "get_math_binop_autocast(): "
            "Entering general integer part.")
    }
    var sizes = [64, 32, 16, 8]
    var i = 1
    while i <= sizes.len {
        var size = sizes[i]
        var size_s = size.as_str()
        if left_hand_typeinfo.orig_type_name == "u" + size_s or
                (size == 8 and
                 left_hand_typeinfo.orig_type_name == "byte") or
                (size == 64 and
                 left_hand_typeinfo.orig_type_name == "size") or
                 left_hand_typeinfo.orig_type_name == "i" + size_s {
            if not ast_typeref.builtin_moose64_unsigned_num_types.has(
                    right_hand_typeinfo.orig_type_name) and
                    not ast_typeref.builtin_moose64_signed_num_types.has(
                        right_hand_typeinfo.orig_type_name) {
                continue
            }
            if right_hand_typeinfo.orig_type_name == "f64" {
                return cast_all_to("f64")
            } elseif right_hand_typeinfo.orig_type_name == "f32" {
                if size >= 64 {
                    return cast_all_to("f64", override_result="f32")
                } else {
                    return cast_all_to("f32")
                }
            }
            var right_hand_bits = 64
            if right_hand_typeinfo.orig_type_name == "byte" {
                right_hand_bits = 8
            } elseif not {"addr_diff", "addr", "size"}.has(
                    right_hand_typeinfo.orig_type_name) {
                if not right_hand_typeinfo.orig_type_name.
                            starts("u") and
                        not right_hand_typeinfo.orig_type_name.
                            starts("i") and
                        not right_hand_typeinfo.orig_type_name.
                            starts("f") {
                    continue
                }
                right_hand_bits = right_hand_typeinfo.
                    orig_type_name.sub(2).to_num()
            }
            if ast_typeref.builtin_moose64_signed_num_types.has(
                        right_hand_typeinfo.orig_type_name) or
                    ast_typeref.builtin_moose64_signed_num_types.has(
                        left_hand_typeinfo.orig_type_name
                    ) {
                return cast_all_to("i" + math.max(
                    size, right_hand_bits
                ).as_str())
            } else {
                return cast_all_to("u" + math.max(
                    size, right_hand_bits
                ).as_str())
            }
        }
        i += 1
    }

    result.incompatible = yes
    return result
}

func ast_literal_node_to_suggested_m64_type(
        literal_node, parents=[],
        ) {
    if literal_node.literal_kind == ast_expr.LK_NORMAL {
        if typename(literal_node.value) == "bool" {
            return typeinfo.
                create_from_simple_m64_type("bool")
        } elseif literal_node.value == none {
            var result = typeinfo.
                create_from_simple_m64_type("any")
            result.modifiers.add(new ast_typeref.TypeRefMod(
                "ref"
            ))
            return result
        } elseif typename(literal_node.value) == "str" {
            var result = typeinfo.
                create_from_simple_m64_type("byte")
            result.modifiers.add(new ast_typeref.TypeRefMod(
                "readonly"
            ))
            result.modifiers.add(new ast_typeref.TypeRefMod(
                "c_array"
            ))
            return result
        }
        return typeinfo.create_from_simple_m64_type("u32")
    } elseif literal_node.literal_kind == ast_expr.LK_BIGNUM {
        assert(typename(literal_node.value) == "str")

        var num_as_str = literal_node.value
        if num_as_str.find(".") != none {
            return typeinfo.create_from_simple_m64_type("f64")
        }
        if bignum.compare_nums(
                num_as_str, "2147483647") > 0 or
                bignum.compare_nums(
                num_as_str, "-2147483648") < 0 {
            var result = typeinfo.
                create_from_simple_m64_type("i64")
            return result
        }
        return typeinfo.create_from_simple_m64_type("i32")
    } elseif literal_node.literal_kind == ast_expr.LK_CHARCODE {
        return typeinfo.create_from_simple_m64_type("u32")
    }
    throw new RuntimeError("Unhandled literal node.")
}

