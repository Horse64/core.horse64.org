## @module compiler.moose64.ast.analyze
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import random from core.horse64.org
import textfmt from core.horse64.org

import compiler.ast as ast
import compiler.msg as msg
import compiler.storage.ref as st_ref
import compiler.storage.scope.manage as scope_manage
import compiler.token as token
import compiler.typeinfo as typeinfo

func get_c_or_m64_type_of_typeref(
        project_file, typeref,
        store_self_value_ref_for_funcs=no, msgs=none
        ) {
    var c_name = typeref.get_c_builtin_for_m64_base_type()
    if c_name != none {
        var tinfo = new typeinfo.TypeInfo(typeinfo.TI_C_TYPE)
        tinfo._set_orig_type_expr(typeref)
        tinfo.c_type_name = c_name
        return later tinfo
    }
    var m64_type_ref = typeref.try_resolve_to_user_type(
        project_file, is_moose64=yes
    ) later:

    await m64_type_ref
    if m64_type_ref == none {
        return later none
    }
    var m64_symbol_info = st_ref.ref_to_symbol_info(
        project_file, m64_type_ref
    )
    if m64_symbol_info == none {
        return later none
    }
    var tinfo = new typeinfo.create_typeinfo_from_global_ref(
        m64_type_ref,
        base_symbol_info_if_known=m64_symbol_info,
        base_typeref_expr_if_known=typeref,
        store_self_value_ref_for_funcs=
            store_self_value_ref_for_funcs,
        is_moose64=yes,
    )
    return later tinfo
}

func get_c_or_m64_type_of_sym_info(
        project_file, target_sym_info,
        node_with_reference=none,
        store_self_value_ref_for_funcs=no,
        msgs=none
        ) {
    var target_ref = target_sym_info.type_storage_ref
    if target_ref == none and node_with_reference.ref != none {
        target_ref = node_with_reference.ref
    }
    if target_ref != none {
        var tinfo = new typeinfo.create_typeinfo_from_global_ref(
            target_ref,
            base_symbol_info_if_known=target_sym_info,
            base_node_if_known=node_with_reference,
        )
        return later tinfo
    }
    var typeref_expr = target_sym_info.typeref_expr
    if typeref_expr == none {
        return later none
    }
    var result = get_c_or_m64_type_of_typeref(
        project_file, typeref_expr,
        store_self_value_ref_for_funcs=
            store_self_value_ref_for_funcs,
        msgs=msgs
    ) later:

    await result
    return result
}

func _get_c_or_m64_type_of_node_do(
        project_file, node, parents,
        _known_typeinfo_map=none,
        store_self_value_ref_for_funcs=no,
        msgs=none, debug=no
        ) {
    if _known_typeinfo_map == none {
        _known_typeinfo_map = {->}
    }
    if _known_typeinfo_map.has(node) and
            not store_self_value_ref_for_funcs {
        return later _known_typeinfo_map[node].copy()
    }
    var parent = if parents.len > 0 (parents[parents.len]) else (none)

    var d_id = none
    var dbg_prefix = ""
    if debug {
        d_id = random.gen_id()
        dbg_prefix = "moosec: debug: "
            "_get_c_or_m64_type_of_node_do() #" + d_id
        print(dbg_prefix + " running on: " +
            node.as_str() + " with store_self_value_ref_for_funcs=" +
            store_self_value_ref_for_funcs.as_str())
    }
    func trigger_no_symbol_info_on(node) {
        if msgs == none {
            throw new ValueError(
                "Internal error: Unexpectedly failed to "
                "get symbol info."
            )
        }
        msgs.add(new msg.FileMsg(
            "Internal error: Unexpectedly failed to trace "
            "back this identifier to resolved target: " +
            node.as_str() +
            " (with node.ref: " + if has_attr(node, "ref")
                    (node.ref.as_str())
                    else ("<no .ref attr>") + ") "
            "Please report this to the compiler makers.",
            source_file=project_file,
            line=node.line, col=node.col,
        ))
    }

    func trigger_no_such_attribute_on(node, aname) {
        if msgs == none {
            throw new ValueError(
                "The given type doesn't have this attribute."
            )
        }
        msgs.add(new msg.FileMsg(
            "The attribute " + textfmt.as_escaped_code_string(
                aname
            ) + " cannot be found on this type.",
            source_file=project_file,
            line=node.line, col=node.col,
        ))
    }

    var left_hand_instance_ref = none
    func evaluate_lefthand_sides_if_needed(node) {
        if debug {
            print(dbg_prefix + " evaluate_lefthand_sides_if_needed() "
                "with node=" + node.as_str())
        }
        if node.kind != ast.N_EXPR_BINOP or
                node.optoken.str != "." {
            return later yes
        }
        if has_attr(node.subexprs[1], "ref") and
                node.subexprs[1].ref != none {
            left_hand_instance_ref =
                node.subexprs[1].ref.copy()
        } elseif node.subexprs[1].kind == ast.N_EXPR_BINOP and
                node.subexprs[1].optoken.str == "." and
                has_attr(node.subexprs[1].subexprs[2], "ref") and
                node.subexprs[1].subexprs[2].ref != none {
            left_hand_instance_ref =
                node.subexprs[1].subexprs[2].ref.copy()
        }
        if (has_attr(node.subexprs[2], "ref") and
                node.subexprs[2].ref != none) or
                _known_typeinfo_map.has(node.subexprs[2]) {
            return later yes
        }
        if debug {
            print(dbg_prefix + " evaluate_lefthand_sides_if_needed() "
                "now trying to get type on node.subexprs[1]=" +
                node.subexprs[1].as_str())
        }
        var c_type = _get_c_or_m64_type_of_node_do(
            project_file, node.subexprs[1], parents + [node],
            _known_typeinfo_map=_known_typeinfo_map,
            msgs=msgs,
        ) later:

        await c_type
        if debug {
            print(dbg_prefix + " evaluate_lefthand_sides_if_needed() "
                "result: c_type=" + c_type.as_str())
        }
        if c_type == none and (
                has_attr(node.subexprs[1], "ref") and
                node.subexprs[1].ref == none) {
            return later no
        }
        _known_typeinfo_map[node.subexprs[1]] = c_type
        return later yes
    }
    var result = evaluate_lefthand_sides_if_needed(node)
    later:

    await result
    if not result {
        # This means there isn't a useful way we can derive
        # any type from a left hand that's present.
        if debug {
            print(dbg_prefix + " aborting: "
                "no useful left-hand from which we could derive type "
                "of full expression")
        }
        return later none
    }

    if debug {
        print(dbg_prefix + " continuing after checking left-hand: "
            "left_hand_instance_ref=" +
            left_hand_instance_ref.as_str())
    }
    if node.kind == ast.N_STMT_VAR {
        if not node.has_type_expr {
            return later none
        }
        var result = get_c_or_m64_type_of_typeref(
            project_file, node.subexprs[node.subexprs.len],
            store_self_value_ref_for_funcs=
                store_self_value_ref_for_funcs,
            msgs=msgs
        ) later:

        await result
        return result
    } elseif node.kind == ast.N_EXPR_IDREF {
        if parent.kind == ast.N_EXPR_BINOP and
                parent.optoken.str == "." {
            if debug {
                print(dbg_prefix + " parent is an attr access binop, "
                    "so we're getting parent result instead...")
            }
            var inner_result = _get_c_or_m64_type_of_node_do(
                project_file, parent, parents.sub(1, parents.len - 1),
                _known_typeinfo_map=_known_typeinfo_map,
                store_self_value_ref_for_funcs=
                    store_self_value_ref_for_funcs,
                msgs=msgs, debug=debug
            ) later:

            await inner_result
            if debug {
                print("compiler.moose64.ast.anayze: debug: "
                    "_get_c_or_m64_type_of_node_do() #" +
                    d_id + " will return parent result now.")
            }
            if inner_result != none and
                    not _known_typeinfo_map.has(node) {
                _known_typeinfo_map[node] = inner_result.copy()
                _known_typeinfo_map[node].func_self_ref = none
            }
            return inner_result
        }
        var sym_info = none
        if node.ref != none {
            sym_info = st_ref.ref_to_symbol_info(
                project_file, node.ref, node=node
            )
        }

        if sym_info == none {
            if debug {
                print("compiler.moose64.ast.anayze: debug: "
                    "_get_c_or_m64_type_of_node_do() #" +
                    d_id + " failed "
                    "to find symbol info for: " + [
                        node, node.ref
                    ].as_str())
            }
            trigger_no_symbol_info_on(node)
            return later none
        }
        if debug {
            print("compiler.moose64.ast.anayze: debug: "
                "_get_c_or_m64_type_of_node_do() #" +
                d_id + " got "
                "symbol info: " + sym_info.as_str())
        }
        var result = get_c_or_m64_type_of_sym_info(
            project_file, sym_info, node_with_reference=node,
            msgs=msgs
        ) later:

        await result
        if result != none and
                not _known_typeinfo_map.has(node) {
            _known_typeinfo_map[node] = result.copy()
            _known_typeinfo_map[node].func_self_ref = none
        }
        return result
    } elseif node.kind == ast.N_EXPR_BINOP and
            node.optoken.str == "." {
        var rhand = node.subexprs[2]
        assert(rhand.kind == ast.N_EXPR_IDREF)
        if debug {
            print(dbg_prefix + " now evaluating binop with "
                "rhand=" + rhand.as_str())
        }

        func resolve_rhand_via_lhand_if_needed {
            if rhand.ref != none {
                return later rhand.ref
            }
            var lhand = node.subexprs[1]
            if not has_attr(lhand, "ref") {
                return later none
            }
            assert(lhand.ref != none)
            scope_manage.try_ensure_attr_ref(
                project_file, lhand, rhand,
                parents,
                error_on_invalid=yes, is_moose64=is_moose64,
                msgs=msgs,
            ) later:
        }
        resolve_rhand_via_lhand_if_needed()
        later:

        if debug {
            print(dbg_prefix + " got rhand.ref=" + rhand.ref.as_str())
        }
        var sym_info = st_ref.ref_to_symbol_info(
            project_file, rhand.ref, node=rhand
        )
        if debug {
            print(dbg_prefix + " got sym_info=" + sym_info.as_str())
        }
        if sym_info == none {
            trigger_no_symbol_info_on(node)
            return later none
        }
        var result = get_c_or_m64_type_of_sym_info(
            project_file, sym_info, node_with_reference=rhand,
            msgs=msgs
        ) later:

        await result
        if result != none and
                not _known_typeinfo_map.has(node) {
            _known_typeinfo_map[node] = result.copy()
            _known_typeinfo_map[node].func_self_ref = none
        }
        if store_self_value_ref_for_funcs and
                left_hand_instance_ref != none {
            if debug {
                print(dbg_prefix + " setting result.func_self_ref=" +
                    left_hand_instance_ref.as_str())
            }
            result.func_self_ref = left_hand_instance_ref
        } else {
            if debug {
                print(dbg_prefix + " unsetting result.func_self_ref.")
            }
        }
        return result
    }
    return later none
}

func get_c_or_m64_type_of_node(
        project_file, node, parents,
        store_self_value_ref_for_funcs=no,
        msgs=none, debug=no
        ) {
    assert(typename(parents) == "list")
    var result = _get_c_or_m64_type_of_node_do(
        project_file, node, parents,
        _known_typeinfo_map=none,
        store_self_value_ref_for_funcs=
            store_self_value_ref_for_funcs,
        msgs=msgs,
        debug=debug
    ) later:

    await result
    return result
}

