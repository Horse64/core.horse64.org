## @module compiler.moose64.builtins
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.builtin_syms as builtin_syms
import compiler.storage.ref as st_ref
import compiler.moose64.c_importer as m64_c_importer


func get_m64_c_type_builtin_by_id(project, storage_id) {
    assert(typename(storage_id) == "num")
    var st = project.builtin_syms_storage

    if not st.storage_id_to_item_map.has(storage_id) {
        return none
    }
    var st_item = st.storage_id_to_item_map[storage_id]
    if not st_item.is_c_builtin_type {
        return none
    }
    return st_item
}

func get_m64_c_type_builtin_ref_by_name(
        project, name, create_if_missing=no
        ) {
    var item = builtin_syms.get_item_by_name(
        project, name, create_if_missing=create_if_missing,
        must_be_c_type=yes,
        in_module_name=none, in_package_name=none
    )
    if item != none {
        return item.symbol_storage_ref.copy()
    }
    return none
}

func is_ast_node_referring_to_m64_std_size_of(
    project_file, node, is_moose64=no) {
    if not is_moose64 {
        return no
    }
    var size_of_info =
        builtin_syms.get_item_by_name(
            project_file.project, "size_of",
            in_module_name="std")
    var size_of_storage_ref =
        size_of_info.symbol_storage_ref
    if node.kind == ast.N_EXPR_IDREF and
            node.label == "size_of" and
            node.ref != none and
            node.ref.kind == st_ref.ST_MCREF and
            node.ref.alike(
                size_of_storage_ref
            ) {
        return yes
    }
    return no
}

func is_ast_node_referring_to_m64_std_as_ref(
        project_file, node, is_moose64=no) {
    if not is_moose64 {
        return no
    }
    var as_ref_info =
        builtin_syms.get_item_by_name(
            project_file.project, "as_ref",
            in_module_name="std")
    var as_ref_storage_ref =
        as_ref_info.symbol_storage_ref
    if node.kind == ast.N_EXPR_IDREF and
            node.label == "as_ref" and
            node.ref != none and
            node.ref.kind == st_ref.ST_MCREF and
            node.ref.alike(
                as_ref_storage_ref
            ) {
        return yes
    }
    return no
}

func register_builtins_with_project(project) {
    var id

    id = m64_c_importer.get_mcref_id(project)
    builtin_syms.register_symbol(project, "size_of",
        new st_ref.StorageRef(st_ref.ST_MCREF, id),
        ["std"],  package_name="m64.horse64.org")

    id = m64_c_importer.get_mcref_id(project)
    builtin_syms.register_symbol(project, "addr",
        new st_ref.StorageRef(st_ref.ST_MCREF, id),
        ["std"], package_name="m64.horse64.org")

    id = m64_c_importer.get_mcref_id(project)
    builtin_syms.register_symbol(project, "as_ref",
        new st_ref.StorageRef(st_ref.ST_MCREF, id),
        ["std"], package_name="m64.horse64.org")

    id = m64_c_importer.get_mcref_id(project)
    builtin_syms.register_symbol(project, "deref",
        new st_ref.StorageRef(st_ref.ST_MCREF, id),
        ["std"], package_name="m64.horse64.org")

    return later
}

