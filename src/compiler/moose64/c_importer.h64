## @module compiler.moose64.c_importer
# Copyright (c) 2024-2025, ellie/@ell1e & Horse64's contributors
# (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import path from core.horse64.org

import compiler.builtin_syms as builtin_syms
import compiler.moose64.c_symbol as c_symbol
import compiler.project as project

extend type project.Project {
    var _last_id_used_by_m64_c_importer = none

    var storage_id_to_csymbol_map = {->}
}

type CImportInfo {
    var import_paths protect = []

    var known_items protect = {->}
}

func get_mcref_id(project) {
    if project._last_id_used_by_m64_c_importer == none {
        project._last_id_used_by_m64_c_importer = 1
        return 1
    }
    project._last_id_used_by_m64_c_importer += 1
    var id = project._last_id_used_by_m64_c_importer
    return id
}

func CImportInfo._process_c_include(project, ipath) {
    const is_moose64 = yes
    ipath = path.normalize(ipath)
    var new_items = {->}
    if ipath == "stdlib.h" {
        new_items["malloc"] = new c_symbol.CFuncSymbol(
            "void *malloc(size_t size);",
            _override_func_signature="(<-size)->any ref"
        )
        new_items["free"] = new c_symbol.CFuncSymbol(
            "void free(void *ptr);",
            _override_func_signature="(<-size)->empty"
        )
        new_items["exit"] = new c_symbol.CFuncSymbol(
            "void exit(int value);",
            _override_func_signature=
                "(<-i32)->empty"
        )
        new_items["abort"] = new c_symbol.CFuncSymbol(
            "void abort(void);",
            _override_func_signature=
                "()->empty"
        )
    } elseif ipath == "string.h" {
        new_items["memcpy"] = new c_symbol.CFuncSymbol(
            "void *memcpy(void *dest, const void *src, size_t n);",
            _override_func_signature=
                "(<-any ref, <-readonly any ref, "
                "<-size)->any ref"
        )
        new_items["memmove"] = new c_symbol.CFuncSymbol(
            "void *memmove(void *dest, const void *src, size_t n);",
            _override_func_signature=
                "(<-any ref, <-readonly any ref, "
                "<-size)->any ref"
        )
        new_items["memset"] = new c_symbol.CFuncSymbol(
            "void *memset(void *dest, int32_t c, size_t n);",
            _override_func_signature=
                "(<-any ref, <-i32, <-size)->any ref"
        )
        new_items["strlen"] = new c_symbol.CFuncSymbol(
            "size_t strlen(const char *);",
            _override_func_signature=
                "(<-readonly byte ref)->size"
        )
    } elseif ipath == "stdio.h" {
        new_items["printf"] = new c_symbol.CFuncSymbol(
            "int printf(const char *fmt, ...);",
            _override_func_signature=
                "(<-readonly byte ref, <-c_vararg)->i32"
        )
    }
    var queue = []
    for entry in new_items {
        if not self.known_items.has(entry) {
            self.known_items[entry] = new_items[entry]
            self.known_items[entry].parent_c_import_info = self
            self.known_items[entry].c_import_path = ipath
            self.known_items[entry].auto_assign_id(project)
            assert(self.known_items[entry].storage_id != none)
            queue.add(new_items[entry])
        }
    }

    # Now make sure the func signature is properly parsed:
    if queue.len == 0 {
        return later
    }
    var next_item = queue.pop()
    var result = builtin_syms.resolve_func_signature_of_item(
        next_item, project=project, is_moose64=is_moose64,
    ) later:

    await result
    if queue.len == 0 {
        return later
    }
    next_item = queue.pop()
    result = builtin_syms.resolve_func_signature_of_item(
        next_item, project=project, is_moose64=is_moose64,
    ) later repeat
}

func CImportInfo.add_import_path(project, ipath) {
    ipath = path.normalize(ipath)
    self.import_paths.add(ipath)

    self._process_c_include(project, ipath) later:
}

func CImportInfo.add_import_paths(project, ipaths) {
    var queue = ipaths.copy()
    if queue.len == 0 {
        return later
    }
    var next_path = queue.pop()
    var result = self.add_import_path(project, next_path)
    later:

    await result
    if queue.len == 0 {
        return later
    }
    next_path = queue.pop()
    result = self.add_import_path(project, next_path)
    later repeat
}

