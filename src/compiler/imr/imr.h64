## @module compiler.imr
# Copyright (c) 2025, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import json from core.horse64.org
import textfmt from core.horse64.org
import time from core.horse64.org

import compiler.ast as ast
import compiler.ast.expr as ast_expr
import compiler.ast.transform as ast_transform
import compiler.compiler_log as clog
import compiler.msg as msg
import compiler.storage.ref as st_ref
import compiler.token as token

type IMRTranslationResult {
    var project_file_to_imr_map = {->}

    var msgs = []
}

type IMRNode {
    var kind
    var line
    var col
}

func IMRNode.init(kind) {
    self.kind = kind
}

func IMRNode.as_json_obj {
    var obj = {->}
    obj["kind"] = IMRNodeKind.num_label(self.kind)
    return obj
}

type IMRVarInfo base IMRNode {
    var label
    var type_expr
    var storage_id
}

func IMRVarInfo.init(var_label, var_type, storage_id) {
    base.init(IMR_INST_VARINFO)
    if typename(var_label) != "str" {
        throw new TypeError("The var_label parameter "
            "must be of type str.")
    }
    if typename(storage_id) != "num" {
        throw new TypeError("The storage_id parameter "
            "must be of type str.")
    }
    self.label = var_label
    self.type_expr = var_type
    self.storage_id = storage_id
}

func IMRVarInfo.as_str {
    var t = "IMRVarInfo{" +
        json.dump(self.as_json_obj())
    return t + "}"
}

func IMRVarInfo.as_json_obj {
    var obj = base.as_json_obj()
    obj["label"] = self.label
    if self.type_expr != none {
        obj["type_expr"] = self.type_expr.as_str()
    }
    obj["storage_id"] = self.storage_id
    return obj
}

type IMRSetLit base IMRNode {
    var value
    var target_storage_ref
    var literal_kind
}

func IMRSetLit.init(value, target_storage_ref, literal_kind=none) {
    base.init(IMR_INST_SETLIT)
    if typename(target_storage_ref) != "obj" or
            not has_attr(target_storage_ref, "kind") or
            not has_attr(target_storage_ref, "id") {
        throw new TypeError("The target_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if literal_kind == none {
        literal_kind = ast_expr.LK_NORMAL
    }
    self.value = value
    self.target_storage_ref = target_storage_ref.copy()
    self.literal_kind = literal_kind
}

func IMRSetLit.as_str {
    var t = "IMRSetLit" +
        json.dump(self.as_json_obj())
    return t
}

func IMRSetLit.as_json_obj {
    var obj = base.as_json_obj()
    obj["value"] = self.value
    return obj
}

type IMRMove base IMRNode {
    var source_storage_ref
    var target_storage_ref
}

func IMRMove.init(source_storage_ref, target_storage_ref) {
    base.init(IMR_INST_MOVE)
    if typename(source_storage_ref) != "obj" or
            not has_attr(source_storage_ref, "kind") or
            not has_attr(source_storage_ref, "id") {
        throw new TypeError("The source_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(target_storage_ref) != "obj" or
            not has_attr(target_storage_ref, "kind") or
            not has_attr(target_storage_ref, "id") {
        throw new TypeError("The target_storage_ref parameter "
            "must be of type StorageRef.")
    }
    self.source_storage_ref = source_storage_ref.copy()
    self.target_storage_ref = target_storage_ref.copy()
}

func IMRMove.as_str {
    var t = "IMRMove" +
        json.dump(self.as_json_obj())
    return t
}

func IMRMove.as_json_obj {
    var obj = base.as_json_obj()
    obj["source_storage_ref"] = self.source_storage_ref.as_str()
    obj["target_storage_ref"] = self.target_storage_ref.as_str()
    return obj
}

type IMRSetAttr base IMRNode {
    var target_and_obj_storage_ref
    var attr_name
    var value_storage_ref
}

func IMRSetAttr.init(
        target_and_obj_storage_ref=none,
        attr_name=none,
        value_storage_ref=none,
        ) {
    base.init(IMR_INST_SETATTR)
    if typename(target_and_obj_storage_ref) != "obj" or
            not has_attr(target_and_obj_storage_ref, "kind") or
            not has_attr(target_and_obj_storage_ref, "id") {
        throw new TypeError(
            "The target_and_container_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(attr_name) != "str" {
        throw new TypeError(
            "The attr_name parameter must be of type str."
        )
    }
    if typename(value_storage_ref) != "obj" or
            not has_attr(value_storage_ref, "kind") or
            not has_attr(value_storage_ref, "id") {
        throw new TypeError("The value_storage_ref parameter "
            "must be of type StorageRef.")
    }
    self.target_and_obj_storage_ref =
        target_and_obj_storage_ref.copy()
    self.attr_name = attr_name
    self.value_storage_ref = value_storage_ref.copy()
}

func IMRSetAttr.as_str {
    var t = "IMRSetAttr" +
        json.dump(self.as_json_obj())
    return t
}

func IMRSetAttr.as_json_obj {
    var obj = base.as_json_obj()
    obj["target_and_obj_storage_ref"] =
        self.target_and_obj_storage_ref.as_str()
    obj["attr_name"] = self.attr_name
    obj["value_storage_ref"] = self.value_storage_ref.as_str()
    return obj
}

type IMRGetAttr base IMRNode {
    var object_storage_ref
    var attr_name
    var target_storage_ref
}

func IMRGetAttr.init(
        object_storage_ref=none,
        attr_name=none,
        target_storage_ref=none,
        ) {
    base.init(IMR_INST_GETATTR)
    if typename(object_storage_ref) != "obj" or
            not has_attr(object_storage_ref, "kind") or
            not has_attr(object_storage_ref, "id") {
        throw new TypeError("The object_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(attr_name) == "str" {
        throw new TypeError("The attr_name parameter "
            "must be of type str.")
    }
    if typename(index_storage_ref) != "obj" or
            not has_attr(index_storage_ref, "kind") or
            not has_attr(index_storage_ref, "id") {
        throw new TypeError("The index_storage_ref parameter "
            "must be of type StorageRef.")
    }
    self.object_storage_ref = object_storage_ref.copy()
    self.attr_name = attr_name
    self.target_storage_ref = target_storage_ref.copy()
}

func IMRGetAttr.as_str {
    var t = "IMRGetAttr" +
        json.dump(self.as_json_obj())
    return t
}

func IMRGetAttr.as_json_obj {
    var obj = base.as_json_obj()
    obj["object_storage_ref"] = self.object_storage_ref.as_str()
    obj["attr_name"] = self.attr_name
    obj["target_storage_ref"] = self.target_storage_ref.as_str()
    return obj
}

type IMRSetIdx base IMRNode {
    var target_and_container_storage_ref
    var index_storage_ref
    var value_storage_ref
}

func IMRSetIdx.init(
        target_and_container_storage_ref=none,
        index_storage_ref=none,
        value_storage_ref=none,
        ) {
    base.init(IMR_INST_SETIDX)
    if typename(target_and_container_storage_ref) != "obj" or
            not has_attr(target_and_container_storage_ref, "kind") or
            not has_attr(target_and_container_storage_ref, "id") {
        throw new TypeError(
            "The target_and_container_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(index_storage_ref) != "obj" or
            not has_attr(index_storage_ref, "kind") or
            not has_attr(index_storage_ref, "id") {
        throw new TypeError("The index_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(value_storage_ref) != "obj" or
            not has_attr(value_storage_ref, "kind") or
            not has_attr(value_storage_ref, "id") {
        throw new TypeError("The value_storage_ref parameter "
            "must be of type StorageRef.")
    }
    self.target_and_container_storage_ref =
        target_and_container_storage_ref.copy()
    self.index_storage_ref = index_storage_ref.copy()
    self.value_storage_ref = value_storage_ref.copy()
}

func IMRSetIdx.as_str {
    var t = "IMRSetIdx" +
        json.dump(self.as_json_obj())
    return t
}

func IMRSetIdx.as_json_obj {
    var obj = base.as_json_obj()
    obj["target_and_container_storage_ref"] =
        self.target_and_container_storage_ref.as_str()
    obj["index_storage_ref"] = self.index_storage_ref.as_str()
    obj["value_storage_ref"] = self.value_storage_ref.as_str()
    return obj
}

type IMRGetIdx base IMRNode {
    var container_storage_ref
    var index_storage_ref
    var target_storage_ref
}

func IMRGetIdx.init(
        container_storage_ref=none,
        index_storage_ref=none,
        target_storage_ref=none,
        ) {
    base.init(IMR_INST_GETIDX)
    if typename(container_storage_ref) != "obj" or
            not has_attr(container_storage_ref, "kind") or
            not has_attr(container_storage_ref, "id") {
        throw new TypeError("The container_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(index_storage_ref) != "obj" or
            not has_attr(index_storage_ref, "kind") or
            not has_attr(index_storage_ref, "id") {
        throw new TypeError("The index_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(target_storage_ref) != "obj" or
            not has_attr(target_storage_ref, "kind") or
            not has_attr(target_storage_ref, "id") {
        throw new TypeError("The target_storage_ref parameter "
            "must be of type StorageRef.")
    }
    self.container_storage_ref = container_storage_ref.copy()
    self.index_storage_ref = index_storage_ref.copy()
    self.target_storage_ref = target_storage_ref.copy()
}

func IMRGetIdx.as_str {
    var t = "IMRGetIdx" +
        json.dump(self.as_json_obj())
    return t
}

func IMRGetIdx.as_json_obj {
    var obj = base.as_json_obj()
    obj["container_storage_ref"] = self.container_storage_ref.as_str()
    obj["index_storage_ref"] = self.index_storage_ref.as_str()
    obj["target_storage_ref"] = self.target_storage_ref.as_str()
    return obj
}

type IMRAppyOp base IMRNode {
    var is_binary = yes
    var op_token
    var target_storage_ref
    var operand_1_storage_ref
    var operand_1_storage_ref
}

func IMRApplyOp.init(op_token,
        operand_1_storage_ref=none,
        operand_2_storage_ref=none,
        target_storage_ref=none,
        is_binary=no,
        ) {
    base.init(IMR_INST_APPLY_OP)
    if typename(target_storage_ref) != "obj" or
            not has_attr(target_storage_ref, "kind") or
            not has_attr(target_storage_ref, "id") {
        throw new TypeError("The target_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(operand_1_storage_ref) != "obj" or
            not has_attr(operand_1_storage_ref, "kind") or
            not has_attr(operand_1_storage_ref, "id") {
        throw new TypeError("The operand_1_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if operand_2_storage_ref != none and
            typename(operand_2_storage_ref) != "obj" or
            not has_attr(operand_2_storage_ref, "kind") or
            not has_attr(operand_2_storage_ref, "id") {
        throw new TypeError("The operand_2_storage_ref parameter "
            "must be of type StorageRef or none.")
    }
    if is_binary and operand_2_storage_ref == none {
        throw new TypeError("The operand_2_storage_ref parameter "
            "must be specified when is_binary is set to yes.")
    }
    if not is_binary and operand_2_storage_ref != none {
        throw new TypeError("The operand_2_storage_ref parameter "
        "cannot be specified when is_binary is set to no.")
    }
    self.target_storage_ref = target_storage_ref.copy()
    self.operand_1_storage_ref = operand_1_storage_ref.copy()
    self.operand_2_storage_ref = none
    if is_binary {
        self.is_binary = yes
        self.operand_2_storage_ref =
            operand_2_storage_ref.copy()
    } else {
        self.is_binary = no
    }
}

func IMRApplyOp.as_str {
    var t = "IMRApplyOp" +
        json.dump(self.as_json_obj())
    return t
}

func IMRApplyOp.as_json_obj {
    var obj = base.as_json_obj()
    obj["target_storage_ref"] = self.target_storage_ref.as_str()
    obj["operand_1_storage_ref"] = self.operand_1_storage_ref.as_str()
    if self.is_binary {
        obj["operand_2_storage_ref"] =
            self.operand_2_storage_ref.as_str()
    }
    obj["is_binary"] = is_binary
    return obj
}

type IMRBlock base IMRNode {
    var is_block = yes
    var instructions = []
}

func IMRBlock.as_str {
    var t = "IMRBlock{" +
        json.dump(self.as_json_obj())
    return t + "}"
}

func IMRBlock.as_json_obj {
    var obj = base.as_json_obj()
    var instl = []
    for inst in self.instructions {
        instl.add(inst.as_json_obj())
    }
    obj["instructions"] = instl
    return obj
}

type IMRFuncBlock base IMRBlock {
    var is_func_attr = no
    var is_extend = no

    var global_func_id = none
    var global_type_id = none
    var type_attr_id = none
    var func_scope = none
    var label = none
    var type_path = none
    var storage_ref = none

    var last_assigned_temp_storage_id = 0
}

func IMRFuncBlock.init(
        func_scope, label,
        storage_ref,
        type_path=none,
        is_extend=no,
        ) {
    base.init(IMR_BLOCK_FUNC)
    self.func_scope = func_scope
    self.label = label + ""
    self.is_extend = is_extend
    if storage_ref == none or
            not has_attr(storage_ref, "kind") or
            (storage_ref.kind != st_ref.ST_GLOBAL and
             storage_ref.kind != st_ref.ST_GLOBALATTR) {
        throw new ValueError(
            "No storage_ref was specified, or "
            "it's not of kind ST_GLOBAL or "
            "ST_GLOBALATTR."
        )
    }
    self.is_func_attr =
        storage_ref.kind == st_ref.ST_GLOBALATTR
    if self.is_func_attr {
        if type_path == none or type_path.len == 0 {
            throw new ValueError(
                "Missing type_path for a func attr."
            )
        }
        self.type_path = type_path.copy()
    } else {
        if type_path != none and type_path.len > 0 {
            throw new ValueError(
                "Unexpected type_path for a func that "
                "isn't a func attr."
            )
        }
    }
}

func IMRFuncBlock.as_str {
    var t = "IMRFuncBlock" +
        json.dump(self.as_json_obj())
    return t
}

func IMRFuncBlock.as_json_obj {
    var obj = base.as_json_obj()
    obj["label"] = self.label
    obj["is_func_attr"] = self.is_func_attr.as_str()
    obj["storage_ref"] = self.storage_ref.as_str()
    obj["is_extend"] = self.is_extend == yes
    if self.is_func_attr {
        assert(self.type_path != none)
        obj["type_path"] = self.type_path.copy()
    } else {
        assert(self.type_path == none or
            self.type_path.len == 0)
    }
    return obj
}

enum IMRNodeKind {
    IMR_BLOCK_FUNC,
    IMR_BLOCK_COND,
    IMR_BLOCK_CONDLOOP,
    IMR_BLOCK_ITERLOOP,
    IMR_BLOCK_STRUCT,
    IMR_BLOCK_TYPE,
    IMR_BLOCK_DO,
    IMR_BLOCK_DO_C,
    IMR_BLOCK_RESCUE,
    IMR_BLOCK_FINALLY,
    IMR_BLOCK_WITH,
    IMR_INST_VARINFO,
    IMR_INST_MOVE,
    IMR_INST_MOVE_CAST,
    IMR_INST_APPLY_OP,
    IMR_INST_CALL,
    IMR_INST_BREAK,
    IMR_INST_CONTINUE,
    IMR_INST_RETURN,
    IMR_INST_AWAIT,
    IMR_INST_SETLIT,
    IMR_INST_SETIDX,
    IMR_INST_SETATTR,
    IMR_INST_GETIDX,
    IMR_INST_GETATTR,
}

type IMRForFile {
    var project_file

    var blocks = []

    var last_assigned_temp_storage_id = 0
}

func IMRForFile.as_str {
    var t = "IMRForFile{" +
        "project_file=" + self.project_file.as_str()
    t += ",blocks=" + self.blocks.as_str()
    return t + "}"
}

func IMRForFile.find_global_func_by_label(
        label, type_path=none) {
    for block in self.blocks {
        if block.kind != IMR_BLOCK_FUNC {
            continue
        }
        if type_path == none or type_path.len == 0 {
            if block.is_func_attr {
                continue
            }
            if block.label == label {
                return block
            }
        } else {
            if not block.is_func_attr {
                continue
            }
        }
    }
    return none
}

type ExprIMRResult {
    var instructions = []
    var storage_ref
}

func get_new_temp_storage_ref(
        node, imr_parents=[],
        func_imr_parent=none,
        file_imr_parent=none,
        is_moose64=no, msgs=none,
        ) {
    if func_imr_parent != none {
        assert(func_imr_parent.last_assigned_temp_storage_id <= 0)
        var new_value =
            func_imr_parent.last_assigned_temp_storage_id - 1
        func_imr_parent.last_assigned_temp_storage_id = new_value
        return new st_ref.StorageRef(
            st_ref.ST_LOCAL,
            new_value
        )
    }
    if file_imr_parent == none {
        throw new RuntimeError("Cannot generate IMR "
            "storage num without file_imr_parent being "
            "set.")
    }
    assert(file_imr_parent.last_assigned_temp_storage_id <= 0)
    var new_value =
        file_imr_parent.last_assigned_temp_storage_id - 1
    file_imr_parent.last_assigned_temp_storage_id = new_value
    return new st_ref.StorageRef(
        st_ref.ST_GLOBAL,
        new_value
    )
}

func generate_imr_for_expr(
        node, imr_parents=[],
        func_imr_parent=none,
        file_imr_parent=none,
        is_moose64=no, msgs=none,
        ) {
    var irregular_binop_strs = {"[", "(", "."}
    var result = new ExprIMRResult()
    if node.kind == ast.N_EXPR_IDREF {
        result.storage_ref = node.ref.copy()
        return later result
    } elseif node.kind == ast.N_EXPR_LIT {
        var tmp_ref = get_new_temp_storage_ref(
            node, imr_parents=imr_parents,
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            is_moose64=is_moose64, msgs=msgs,
        )
        result.instructions.add(new IMRSetLit(
            node.value, tmp_ref,
            literal_kind=node.literal_kind,
        ))
        result.storage_ref = tmp_ref
        return later result
    } elseif node.kind == ast.N_EXPR_BINOP and
            not irregular_binop_strs.has(node.optoken.str) and
            node.subexprs.len >= 2 {
        var tmp_ref = get_new_temp_storage_ref(
            node, imr_parents=imr_parents,
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            is_moose64=is_moose64, msgs=msgs,
        )
        var left_hand_result = generate_imr_for_expr(
            node.subexprs[1],
            imr_parents=imr_parents + [node],
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            is_moose64=is_moose64,
            msgs=msgs,
        ) later:

        await left_hand_result
        var right_hand_result = generate_imr_for_expr(
            node.subexprs[2],
            imr_parents=imr_parents + [node],
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            is_moose64=is_moose64, msgs=msgs,
        ) later:

        await right_hand_result
        if left_hand_result == none or
                right_hand_result == none {
            return later none
        }
        result.instructions += left_hand_result.instructions
        result.instructions += right_hand_result.instructions
        result.instructions.add(new IMRApplyOp(
            node.optoken.copy(),
            operand_1_storage_ref=tmp_ref,
            operand_2_storage_ref=
                left_hand_result.storage_ref,
            target_storage_ref=
                right_hand_result.storage_ref,
            is_binary=yes,
        ))
        result.storage_ref = tmp_ref
        return later result
    }
    return later none
}

func generate_imr_for_stmt(
        node, imr_parents=[],
        func_imr_parent=none,
        file_imr_parent=none,
        is_moose64=no, msgs=none,
        ) {
    if node.kind == ast.N_STMT_VAR {
        var result_insts = []
        var idx = 0
        for label in node.var_labels {
            idx += 1
            var vinfo = new IMRVarInfo(label,
                if node.has_type_expr
                    (node.subexprs[node.subexprs.len])
                    else (none),
                node.symbol_info[idx].storage_id)
            vinfo.line = node.line
            vinfo.col = node.col
            result_insts.add(vinfo)
        }
        var assigned_exprs = node.subexprs.copy()
        var type_expr = none
        if node.has_type_expr and assigned_exprs.len > 0 {
            type_expr = assigned_exprs[assigned_exprs.len]
            assigned_exprs = assigned_exprs.sub(
                1, assigned_exprs.len - 1
            )
        }
        if assigned_exprs == 0 {
            return later result_insts
        }
        var queue = []
        var i = 1
        while i <= assigned_exprs.len {
            queue.add([i, assigned_exprs[i]])
            i += 1
        }
        func process_queue_item(item) {
            var left_hand_storage_id =
                node.symbol_info[idx].storage_id
            var right_hand_result = generate_imr_for_expr(
                item[2],
                imr_parents=imr_parents + [node],
                func_imr_parent=func_imr_parent,
                file_imr_parent=file_imr_parent,
                is_moose64=is_moose64, msgs=msgs,
            ) later:

            await right_hand_result
            if right_hand_result != none {
                result_insts += right_hand_result.instructions
                result_insts.add(new IMRMove(
                    right_hand_result.storage_ref,
                    new st_ref.StorageRef(
                        st_ref.ST_LOCAL,
                        left_hand_storage_id
                    ),
                ))
            } else {
                result_insts = none
            }
        }
        if queue.len == 0 or result_insts == none {
            return later result_insts
        }
        var _unused = process_queue_item(queue.pop())
        later:

        await _unused
        if queue.len == 0 or result_insts == none {
            return later result_insts
        }
        _unused = process_queue_item(queue.pop())
        later repeat
    }
    if node.kind == ast.N_STMT_ASSIGN {
        var result_insts = []
        var queue = []
        var i = 1
        while i <= node.subexprs.len / 2 {
            queue.add([node.subexprs[i * 2 - 1],
                node.subexprs[i * 2]])
            i += 1
        }
        func process_queue_item(item) {
            var right_hand_result = generate_imr_for_expr(
                item[2],
                imr_parents=imr_parents + [node],
                func_imr_parent=func_imr_parent,
                file_imr_parent=file_imr_parent,
                is_moose64=is_moose64, msgs=msgs,
            ) later:

            await right_hand_result
            if right_hand_result == none {
                result_insts = none
                return later
            }
            var math_assign_token = none
            if node.assign_token.kind == token.T_MATHASSIGN {
                var t_str = node.assign_token.str
                if not t_str.ends("=") {
                    throw new ValueError("Encountered unsupported "
                        "type of math assign.")
                }
                math_assign_token = new token.Token(
                    t_str.sub(1, t_str.len - 1),
                    token.T_MATH,
                    node.assign_token.line,
                    node.assign_token.col,
                )
            }
            var left_hand_node = item[1]
            func try_handle_set_idx {
                if left_hand_node.kind != ast.N_EXPR_BINOP or
                        left_hand_node.optoken.str != "[" or
                        left_hand_node.subexprs.len < 2 {
                    return later no
                }
                var container_result = generate_imr_for_expr(
                    left_hand_node.subexprs[1],
                    imr_parents=imr_parents + [
                        node, left_hand_node],
                    func_imr_parent=func_imr_parent,
                    file_imr_parent=file_imr_parent,
                    is_moose64=is_moose64, msgs=msgs,
                ) later:

                await container_result
                var idx_result = generate_imr_for_expr(
                    left_hand_node.subexprs[2],
                    imr_parents=imr_parents + [
                        node, left_hand_node],
                    func_imr_parent=func_imr_parent,
                    file_imr_parent=file_imr_parent,
                    is_moose64=is_moose64, msgs=msgs,
                ) later:

                await idx_result
                if container_result == none or idx_result == none {
                    result_insts = none
                    return later yes
                }
                if node.assign_token.kind == token.T_ASSIGN {
                    result_insts += right_hand_result.instructions
                    result_insts.add(IMRSetIdx(
                        target_and_container_storage_ref=
                            container_result.storage_ref,
                        index_storage_ref=
                            idx_result.storage_ref,
                        value_storage_ref=
                            right_hand_result.storage_ref,
                    ))
                    return later yes
                } elseif math_assign_token != none {
                    var tmp_ref = get_new_temp_storage_ref(
                        node, imr_parents=imr_parents,
                        func_imr_parent=func_imr_parent,
                        file_imr_parent=file_imr_parent,
                        is_moose64=is_moose64, msgs=msgs,
                    )
                    result_insts.add(IMRGetIdx(
                        container_storage_ref=
                            container_result.storage_ref,
                        index_storage_ref=
                            idx_result.storage_ref,
                        target_storage_ref=tmp_ref,
                    ))
                    result_insts.add(IMRApplyOp(
                        math_assign_token,
                        operand_1_storage_ref=tmp_ref,
                        operand_2_storage_ref=
                            right_hand_result.storage_ref,
                        target_storage_ref=tmp_ref,
                        is_binary=yes,
                    ))
                    result_insts.add(IMRSetIdx(
                        target_and_container_storage_ref=
                            container_result.storage_ref,
                        index_storage_ref=
                            idx_result.storage_ref,
                        value_storage_ref=tmp_ref,
                    ))
                    return later yes
                } else {
                    throw new ValueError("Encountered unsupported "
                        "type of assign.")
                }
            }
            func try_handle_set_attr {
                if left_hand_node.kind != ast.N_EXPR_BINOP or
                        left_hand_node.optoken.str != "." or
                        left_hand_node.subexprs.len < 2 or
                        left_hand_node.subexprs[2].kind !=
                            ast.N_EXPR_IDREF {
                    return later no
                }
                var attr_name = left_hand_node.subexprs[2].label
                var obj_result = generate_imr_for_expr(
                    left_hand_node.subexprs[1],
                    imr_parents=imr_parents + [
                        node, left_hand_node],
                    func_imr_parent=func_imr_parent,
                    file_imr_parent=file_imr_parent,
                    is_moose64=is_moose64, msgs=msgs,
                ) later:

                await obj_result
                if obj_result == none {
                    result_insts = none
                    return later yes
                }
                if node.assign_token.kind == token.T_ASSIGN {
                    result_insts += right_hand_result.instructions
                    result_insts.add(IMRSetAttr(
                        target_and_obj_storage_ref=
                            obj_result.storage_ref,
                        attr_name=attr_name,
                        value_storage_ref=
                            right_hand_result.storage_ref,
                    ))
                    return later yes
                } elseif math_assign_token != none {
                    var tmp_ref = get_new_temp_storage_ref(
                        node, imr_parents=imr_parents,
                        func_imr_parent=func_imr_parent,
                        file_imr_parent=file_imr_parent,
                        is_moose64=is_moose64, msgs=msgs,
                    )
                    result_insts.add(IMRGetAttr(
                        obj_storage_ref=
                            obj_result.storage_ref,
                        attr_name=attr_name,
                        target_storage_ref=tmp_ref,
                    ))
                    result_insts.add(IMRApplyOp(
                        math_assign_token,
                        operand_1_storage_ref=tmp_ref,
                        operand_2_storage_ref=
                            right_hand_result.storage_ref,
                        target_storage_ref=tmp_ref,
                        is_binary=yes,
                    ))
                    result_insts.add(IMRSetAttr(
                        target_and_obj_storage_ref=
                            container_result.storage_ref,
                        attr_name=attr_name.storage_ref,
                        value_storage_ref=tmp_ref,
                    ))
                    return later yes
                } else {
                    throw new ValueError("Encountered unsupported "
                        "type of assign.")
                }
            }

            # Try to handle the special set index case:
            var success_idx = try_handle_set_idx() later:

            await success_idx
            if success_idx {
                return later
            }
            # Try to handle the special set attr case:
            var success_attr = try_handle_set_attr() later:

            await success_attr
            if success_attr {
                return later
            }

            # If we arrive here, it must be a regular assign
            # that isn't a set index or set attr:
            if left_hand_node.kind != ast.N_EXPR_IDREF or
                    left_hand_node.ref == none {
                return later
            }
            if result_insts != none and
                    right_hand_result != none {
                result_insts += right_hand_result.instructions
                if node.assign_token.kind == token.T_ASSIGN {
                    result_insts.add(new IMRMove(
                        right_hand_result.storage_ref,
                        left_hand_node.ref,
                    ))
                } elseif math_assign_token != none {
                    result_insts.add(new IMRApplyOp(
                        math_assign_token,
                        operand_1_storage_ref=
                            left_hand_node.ref,
                        operand_2_storage_ref=
                            right_hand_result.storage_ref,
                        target_storage_ref=
                            left_hand_node.ref,
                        is_binary=yes,
                    ))
                } else {
                    throw new ValueError("Encountered unsupported "
                        "type of assign.")
                }
            } else {
                result_insts = none
                return later yes
            }
        }
        if queue.len == 0 or result_insts == none {
            return later result_insts
        }
        var _unused = process_queue_item(queue.pop())
        later:

        await _unused
        if queue.len == 0 or result_insts == none {
            return later result_insts
        }
        _unused = process_queue_item(queue.pop())
        later repeat
    }
    return later none
}

func generate_imr_for_stmts(
        nodes, imr_parents=[],
        func_imr_parent=none,
        file_imr_parent=none,
        is_moose64=no, msgs=none,
        ) {
    var result = []
    var queue = nodes.copy()
    if queue.len == 0 {
        return later result
    }
    var item = queue.pop()
    var inner_result = generate_imr_for_stmt(
        item, imr_parents=imr_parents,
        func_imr_parent=func_imr_parent,
        file_imr_parent=file_imr_parent,
        is_moose64=is_moose64, msgs=msgs,
    ) later:

    await inner_result
    if inner_result != none {
        if typename(inner_result) == "list" {
            result += inner_result
        } else {
            result.add(inner_result)
        }
    }
    if queue.len == 0 {
        return later result
    }
    var item = queue.pop()
    var inner_result = generate_imr_for_stmt(
        item, imr_parents=imr_parents,
        func_imr_parent=func_imr_parent,
        file_imr_parent=file_imr_parent,
        is_moose64=is_moose64, msgs=msgs,
    ) later repeat
}

func generate_imr_for_file(pfile, is_moose64=no, msgs=none) {
    const program_name =
        if is_moose64 ("moosec") else ("horsec")
    var result = new IMRForFile()

    pfile.ensure_ast() later:

    var _func_stmt_to_imr_func_map = {->}

    func get_imr_node_for_func(node) {
        if not {ast.N_STMT_FUNC,
                ast.N_STMT_FUNCEXTEND}.has(
                    node.kind) {
            return none
        }

        if not _func_stmt_to_imr_func_map.has(
                node) {
            var item = result.find_global_func_by_label(
                node.label,
                type_path=node.type_path,
            )
            _func_stmt_to_imr_func_map[
                node
            ] = item
        }
        return _func_stmt_to_imr_func_map[
            node
        ]
    }

    func collect_funcs(node, parents) {
        var parent = if parents.len > 0
            (parents[parents.len]) else (none)
        if node.damaged {
            return later node
        }
        if node.kind == ast.N_STMT_FUNC or
                node.kind == ast.N_STMT_FUNCEXTEND {
            var is_extend =
                node.kind == ast.N_STMT_FUNCEXTEND
            var func_scope = node.func_scope
            assert(func_scope != none)
            var block = none
            if node.type_path != none and
                    node.type_path.len > 0 {
                assert(func_scope.is_type_attr)
                var type_id =
                    func_scope.owning_type_storage_id
                var attr_id =
                    func_scope.owning_type_scope.
                        name_to_symbol_map[
                            node.label
                        ].storage_id
                if type_id == none or attr_id == none {
                    var node_str = node.as_str()
                    print(program_name + ": error: "
                        "Found invalid func node with "
                        "invalid storage. pfile=" +
                        pfile.as_str() + " "
                        "label=" + textfmt.as_escaped_code_string(
                            node.label) + " "
                        "node=" +
                        node_str.sub(1, 100) +
                        "... "
                        "type_id=" + type_id.as_str() + " "
                        "attr_id=" + attr_id.as_str())
                    throw new RuntimeError(
                        "Internal error, encountered func "
                        "node with broken storage."
                    )
                }
                block = new IMRFuncBlock(
                    func_scope, node.label,
                    new st_ref.StorageRef(
                        st_ref.ST_GLOBALATTR,
                        [type_id, attr_id]),
                    type_path=node.type_path,
                    is_extend=is_extend,
                )
            } else {
                block = new IMRFuncBlock(
                    func_scope, node.label,
                    new st_ref.StorageRef(
                        st_ref.ST_GLOBAL,
                        func_scope.storage_id
                    ),
                    is_extend=is_extend,
                )
            }
            result.blocks.add(block)
            _func_stmt_to_imr_func_map[node] = block
        }
        return later node
    }
    var success = ast_transform.visit_ast_tree(
        pfile.ast, collect_funcs,
        pass_func_boundaries=yes,
        parent_chain=yes, backward=no,
    ) later:

    await success
    if not success {
        assert(msg.msgs_contain_error(msgs))
        return result
    }
    assert(success == yes)

    func collect_func_contents(node, parents) {
        var parent = if parents.len > 0
            (parents[parents.len]) else (none)
        if node.damaged {
            return later node
        }
        if node.kind == ast.N_STMT_FUNC or
                node.kind == ast.N_STMT_FUNCEXTEND {
            var imr_node = get_imr_node_for_func(node)
            assert(imr_node != none)

            var stmts = generate_imr_for_stmts(
                node.subblocks[1],
                imr_parents=[imr_node],
                func_imr_parent=imr_node,
                file_imr_parent=result,
                is_moose64=is_moose64,
                msgs=msgs,
            ) later:

            await stmts
            imr_node.instructions += stmts
        }
        return later node
    }
    var success = ast_transform.visit_ast_tree(
        pfile.ast, collect_func_contents,
        pass_func_boundaries=yes,
        parent_chain=yes, backward=no,
    ) later:

    await success
    if not success {
        assert(msg.msgs_contain_error(msgs))
        return result
    }
    assert(success == yes)

    return later result
}

func generate_imr_for_project(
        project,
        build_options=none,
        msgs=none, is_moose64=no, debug=no,
        ) {
    const program_name =
        if is_moose64 ("moosec") else ("horsec")
    var boptions = build_options
    var imrresult = new IMRTranslationResult()

    if boptions.print_stages {
        clog.log_or_print(
            new msg.FileMsg(
                "stage imr: " +
                "Launched on project=" +
                project.as_str() + " "
                "[t=" + time.ticks().as_str() + "]",
                kind=msg.M_INFO,
            ),
            msgs=imrresult.msgs, program_name=program_name,
            force_print=not boptions.format_output_for_scripts,
        )
    }
    if debug {
        print(program_name + ": debug: "
            "generate_imr_for_project(): "
            "Starting per file loop for "
            "project=" + project.as_str() + ", "
            "is_moose64=" +
                is_moose64.as_str())
    }

    func process_file(pfile) {
        if boptions.print_stages {
            clog.log_or_print(
                new msg.FileMsg(
                    "stage imr: " +
                    "Processing file pfile=" +
                    pfile.as_str() + " "
                    "[t=" + time.ticks().as_str() + "]",
                    kind=msg.M_INFO,
                ),
                msgs=imrresult.msgs,
                program_name=program_name,
                force_print=not boptions.format_output_for_scripts,
            )
        }
        var result = generate_imr_for_file(
            pfile, is_moose64=is_moose64)
        later:

        await result
        return later yes
    }
    var result = project.do_for_all_files(
        process_file
    ) later:

    await result
    assert(result == yes or result == no)

    return later no
}

