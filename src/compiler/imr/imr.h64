## @module compiler.imr
# Copyright (c) 2025, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import json from core.horse64.org
import textfmt from core.horse64.org
import time from core.horse64.org

import compiler.ast as ast
import compiler.ast.transform as ast_transform
import compiler.compiler_log as clog
import compiler.storage.ref as st_ref
import compiler.msg as msg

type IMRTranslationResult {
    var project_file_to_imr_map = {->}

    var msgs = []
}

type IMRNode {
    var kind
    var line
    var col
}

func IMRNode.init(kind) {
    self.kind = kind
}

type IMRInstruction base IMRNode {
    var is_block = no
    var blocks = []
}

type IMRBlock base IMRNode {
    var is_block = yes
    var instructions = []
}

func IMRBlock.as_str {
    var t = "IMRBlock{" +
        json.dump(self.as_json_obj())
    return t + "}"
}

func IMRBlock.as_json_obj {
    var instl = []
    for inst in self.instructions {
        instl.add(inst.as_json_obj())
    }
    return {
        "kind" -> IMRNodeKind.num_label(self.kind),
        "instructions" -> instl,
    }
}

type IMRFuncBlock base IMRBlock {
    var is_func_attr = no

    var global_func_id = none
    var global_type_id = none
    var type_attr_id = none
    var func_scope = none
    var label = none
    var type_path = none
    var storage_ref = none
}

func IMRFuncBlock.init(
        func_scope, label,
        storage_ref,
        type_path=none,
        ) {
    base.init(IMR_BLOCK_FUNC)
    self.func_scope = func_scope
    self.label = label + ""
    if storage_ref == none or
            not has_attr(storage_ref, "kind") or
            (storage_ref.kind != st_ref.ST_GLOBAL and
             storage_ref.kind != st_ref.ST_GLOBALATTR) {
        throw new ValueError(
            "No storage_ref was specified, or "
            "it's not of kind ST_GLOBAL or "
            "ST_GLOBALATTR."
        )
    }
    self.is_func_attr =
        storage_ref.kind == st_ref.ST_GLOBALATTR
    if self.is_func_attr {
        if type_path == none or type_path.len == 0 {
            throw new ValueError(
                "Missing type_path for a func attr."
            )
        }
        self.type_path = type_path.copy()
    } else {
        if type_path != none and type_path.len > 0 {
            throw new ValueError(
                "Unexpected type_path for a func that "
                "isn't a func attr."
            )
        }
    }
}

func IMRFuncBlock.as_str {
    var t = "IMRFuncBlock" +
        json.dump(self.as_json_obj())
    return t + "}"
}

func IMRFuncBlock.as_json_obj {
    var obj = base.as_json_obj()
    obj["label"] = self.label
    obj["is_func_attr"] = self.is_func_attr.as_str()
    obj["storage_ref"] = self.storage_ref.as_str()
    if self.is_func_attr {
        assert(self.type_path != none)
        obj["type_path"] = self.type_path.copy()
    } else {
        assert(self.type_path == none or
            self.type_path.len == 0)
    }
    return obj
}

enum IMRNodeKind {
    IMR_BLOCK_FUNC,
    IMR_BLOCK_COND,
    IMR_BLOCK_CONDLOOP,
    IMR_BLOCK_ITERLOOP,
    IMR_BLOCK_STRUCT,
    IMR_BLOCK_TYPE,
    IMR_BLOCK_DO,
    IMR_BLOCK_DO_C,
    IMR_BLOCK_RESCUE,
    IMR_BLOCK_FINALLY,
    IMR_BLOCK_WITH,
    IMR_INST_MOVE,
    IMR_INST_MOVE_CAST,
    IMR_INST_BINOP,
    IMR_INST_CALL,
    IMR_INST_BREAK,
    IMR_INST_CONTINUE,
    IMR_INST_RETURN,
    IMR_INST_AWAIT,
}

type IMRForFile {
    var project_file

    var blocks = []
}

func IMRForFile.as_str {
    var t = "IMRForFile{" +
        "project_file=" + self.project_file.as_str()
    t += ",blocks=" + self.blocks.as_str()
    return t + "}"
}

func IMRForFile.find_global_func_by_label(
        label, type_path=none) {
    for block in self.blocks {
        if block.kind != IMR_BLOCK_FUNC {
            continue
        }
        if type_path == none or type_path.len == 0 {
            if block.is_func_attr {
                continue
            }
            if block.label == label {
                return block
            }
        } else {
            if not block.is_func_attr {
                continue
            }
        }
    }
    return none
}

func generate_imr_for_expr(node) {
    
}

func generate_imr_for_stmt(node) {
    
}

func generate_imr_for_file(pfile, is_moose64=no) {
    const program_name =
        if is_moose64 ("moosec") else ("horsec")
    var result = new IMRForFile()

    pfile.ensure_ast() later:

    var _func_stmt_to_imr_func_map = {->}

    func collect_funcs(node, parents) {
        var parent = if parents.len > 0
            (parents[parents.len]) else (none)
        if node.damaged {
            return later node
        }
        func get_func_parent_imr {
            var i = parents.len
            while i >= 1 and
                    not {ast.N_STMT_FUNC,
                    ast.N_STMT_FUNCEXTEND}.has(
                        parents[i].kind) {
                i -= 1
            }
            if i < 1 {
                return none
            }
            var parent_node = parents[i]
            if parent_node == ast.N_STMT_FUNCEXTEND {
                return none
            }

            if not _func_stmt_to_imr_func_map.has(
                    parent_node) {
                var item = result.find_global_func_by_label(
                    parent_node.label,
                    type_path=parent_node.type_path,
                )
                _func_stmt_to_imr_func_map[
                    parent_node
                ] = item
            }
            return _func_stmt_to_imr_func_map[
                parent_node
            ]
        }
        if node.kind == ast.N_STMT_FUNC {
            var func_scope = node.func_scope
            assert(func_scope != none)
            var block = none
            if node.type_path != none and
                    node.type_path.len > 0 {
                assert(func_scope.is_type_attr)
                var type_id =
                    func_scope.owning_type_storage_id
                var attr_id =
                    func_scope.owning_type_scope.
                        name_to_symbol_map[
                            node.label
                        ].storage_id
                if type_id == none or attr_id == none {
                    var node_str = node.as_str()
                    print(program_name + ": error: "
                        "Found invalid func node with "
                        "invalid storage. pfile=" +
                        pfile.as_str() + " "
                        "label=" + textfmt.as_escaped_code_string(
                            node.label) + " "
                        "node=" +
                        node_str.sub(1, 100) +
                        "... "
                        "type_id=" + type_id.as_str() + " "
                        "attr_id=" + attr_id.as_str())
                    throw new RuntimeError(
                        "Internal error, encountered func "
                        "node with broken storage."
                    )
                }
                block = new IMRFuncBlock(
                    func_scope, node.label,
                    new st_ref.StorageRef(
                        st_ref.ST_GLOBALATTR,
                        [type_id, attr_id]),
                    type_path=node.type_path,
                )
            } else {
                block = new IMRFuncBlock(
                    func_scope, node.label,
                    new st_ref.StorageRef(
                        st_ref.ST_GLOBAL,
                        func_scope.storage_id
                    ),
                )
            }
            _func_stmt_to_imr_func_map[
                node
            ] = block
            result.blocks.add(block)
        }
        return later node
    }
    var success = ast_transform.visit_ast_tree(
        pfile.ast, collect_funcs,
        pass_func_boundaries=yes,
        parent_chain=yes, backward=no,
    ) later:

    await success
    assert(success == yes)

    return later result
}

func generate_imr_for_project(
        project,
        build_options=none,
        msgs=none, is_moose64=no, debug=no,
        ) {
    const program_name =
        if is_moose64 ("moosec") else ("horsec")
    var boptions = build_options
    var imrresult = new IMRTranslationResult()

    if boptions.print_stages {
        clog.log_or_print(
            new msg.FileMsg(
                "stage imr: " +
                "Launched on project=" +
                project.as_str() + " "
                "[t=" + time.ticks().as_str() + "]",
                kind=msg.M_INFO,
            ),
            msgs=imrresult.msgs, program_name=program_name,
            force_print=not boptions.format_output_for_scripts,
        )
    }
    if debug {
        print(program_name + ": debug: "
            "generate_imr_for_project(): "
            "Starting per file loop for "
            "project=" + project.as_str() + ", "
            "is_moose64=" +
                is_moose64.as_str())
    }

    func process_file(pfile) {
        if boptions.print_stages {
            clog.log_or_print(
                new msg.FileMsg(
                    "stage imr: " +
                    "Processing file pfile=" +
                    pfile.as_str() + " "
                    "[t=" + time.ticks().as_str() + "]",
                    kind=msg.M_INFO,
                ),
                msgs=imrresult.msgs,
                program_name=program_name,
                force_print=not boptions.format_output_for_scripts,
            )
        }
        var result = generate_imr_for_file(
            pfile, is_moose64=is_moose64)
        later:

        await result
        return later yes
    }
    var result = project.do_for_all_files(
        process_file
    ) later:

    await result
    assert(result == yes or result == no)

    return later no
}

