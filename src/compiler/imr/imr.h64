## @module compiler.imr
# Copyright (c) 2025, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import json from core.horse64.org
import math from core.horse64.org
import textfmt from core.horse64.org
import time from core.horse64.org

import compiler.ast as ast
import compiler.ast.expr as ast_expr
import compiler.ast.transform as ast_transform
import compiler.compiler_log as clog
import compiler.msg as msg
import compiler.storage.ref as st_ref
import compiler.storage.scope as st_scope
import compiler.token as token

type IMRTranslationResult {
    var project_file_to_imr_map = {->}

    var msgs = []
}

type IMRNode {
    var kind
    var line
    var col
}

func IMRNode.init(kind) {
    self.kind = kind
}

func IMRNode.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = {->}
    obj["kind"] = IMRNodeKind.num_label(self.kind)
    return obj
}

func IMRNode.as_str(indent=0) {
    return "IMRNode" + self.as_json_obj.as_str()
}

func IMRNode.format_inst(
        name, pos_parameter_names=[],
        skip_parameter_names=[],
        extra_text=none,
        indent=0,
        ) {
    var spaces = " ".rep(math.max(0, indent))
    var t = spaces + name
    var data = self.as_json_obj(
        _passthrough_storage_refs=yes,
    )
    for pname in pos_parameter_names {
        if not data.has(pname) {
            print("horsec: error: Internal error, " +
                "got invalid format_inst() parameters in "
                "imr.h64 during text render: " +
                "name=" + textfmt.as_escaped_code_string(
                    name
                ) +
                " pname=" + textfmt.as_escaped_code_string(
                    pname
                ))
            throw new ValueError(
                "Name given in pos_parameter_names "
                "isn't part of JSON object data.")
        }
        if typename(data[pname]) == "str" {
            t += " " + textfmt.as_escaped_code_string(
                data[pname])
        } else {
            t += " " + data[pname].as_str()
        }
    }
    if extra_text != none {
        t += " " + extra_text.trim()
    }
    for remaining_key in data {
        if pos_parameter_names.has(remaining_key) or
                remaining_key == "kind" or
                skip_parameter_names.has(remaining_key) {
            continue
        }
        t += " " + remaining_key.upper() + "="
        if typename(data[remaining_key]) == "str" {
            t += textfmt.as_escaped_code_string(
                data[remaining_key])
        } else {
            t += data[remaining_key].as_str()
        }
    }
    return t
}

type IMRBlock base IMRNode {
    var is_block = yes
    var instructions = []
}

func IMRBlock.as_str(indent=0) {
    var t = "IMRBlock{" +
        json.dump(self.as_json_obj())
    return t + "}"
}

func IMRBlock.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    var instl = []
    for inst in self.instructions {
        instl.add(inst.as_json_obj(
            _passthrough_storage_refs=
                _passthrough_storage_refs))
    }
    obj["instructions"] = instl
    return obj
}

func IMRBlock.fmt_block(indent=0) {
    var indent_s = " ".rep(math.max(0, indent))
    var t = "BEGIN\n"
    for inst in self.instructions {
        t += inst.as_str(indent=(indent + 4)) + "\n"
    }
    return t + indent_s + "END"
}

type IMRVarInfo base IMRNode {
    var label
    var type_expr
    var storage_id
}

func IMRVarInfo.init(var_label, var_type, storage_id) {
    base.init(IMR_INST_VARINFO)
    if typename(var_label) != "str" {
        throw new TypeError("The var_label parameter "
            "must be of type str.")
    }
    if typename(storage_id) != "num" {
        throw new TypeError("The storage_id parameter "
            "must be of type str.")
    }
    self.label = var_label
    self.type_expr = var_type
    self.storage_id = storage_id
}

func IMRVarInfo.as_str(indent=0) {
    return self.format_inst(
        "VARINFO", pos_parameter_names=[
            "storage_id",
            "label",
        ], indent=indent,
    )
}

func IMRVarInfo.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    obj["label"] = self.label
    if self.type_expr != none {
        obj["type_expr"] = self.type_expr.as_str()
    }
    obj["storage_id"] = self.storage_id
    return obj
}

type IMRClrZero base IMRNode {
    var target_storage_ref
}

func IMRClrZero.init(target_storage_ref) {
    base.init(IMR_INST_CLRZERO)
    if typename(target_storage_ref) != "obj" or
            not has_attr(target_storage_ref, "kind") or
            not has_attr(target_storage_ref, "id") {
        throw new TypeError("The target_storage_ref parameter "
        "must be of type StorageRef.")
    }
    self.target_storage_ref = target_storage_ref.copy()
}

func IMRClrZero.as_str(indent=0) {
    return self.format_inst(
        "CLRZERO", pos_parameter_names=[
            "target_storage_ref",
        ], indent=indent,
    )
}

func IMRClrZero.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
        _passthrough_storage_refs)
    if _passthrough_storage_refs {
        obj["target_storage_ref"] =
        self.target_storage_ref
    } else {
        obj["target_storage_ref"] =
        self.target_storage_ref.as_str()
    }
    return obj
}

type IMRSetLit base IMRNode {
    var value
    var target_storage_ref
    var literal_kind
}

func IMRSetLit.init(value, target_storage_ref, literal_kind=none) {
    base.init(IMR_INST_SETLIT)
    if typename(target_storage_ref) != "obj" or
            not has_attr(target_storage_ref, "kind") or
            not has_attr(target_storage_ref, "id") {
        throw new TypeError("The target_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if literal_kind == none {
        literal_kind = ast_expr.LK_NORMAL
    }
    self.value = value
    self.target_storage_ref = target_storage_ref.copy()
    self.literal_kind = literal_kind
}

func IMRSetLit.as_str(indent=0) {
    return self.format_inst(
        "SETLIT", pos_parameter_names=[
            "literal_kind",
            "value",
            "target_storage_ref",
        ], indent=indent,
    )
}

func IMRSetLit.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    obj["value"] = self.value
    if _passthrough_storage_refs {
        obj["target_storage_ref"] =
            self.target_storage_ref
    } else {
        obj["target_storage_ref"] =
            self.target_storage_ref.as_str()
    }
    obj["literal_kind"] = ast_expr.LiteralKind.num_label(
        self.literal_kind
    )
    return obj
}

type IMRMove base IMRNode {
    var source_storage_ref
    var target_storage_ref
}

func IMRMove.init(source_storage_ref, target_storage_ref) {
    base.init(IMR_INST_MOVE)
    if typename(source_storage_ref) != "obj" or
            not has_attr(source_storage_ref, "kind") or
            not has_attr(source_storage_ref, "id") {
        throw new TypeError("The source_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(target_storage_ref) != "obj" or
            not has_attr(target_storage_ref, "kind") or
            not has_attr(target_storage_ref, "id") {
        throw new TypeError("The target_storage_ref parameter "
            "must be of type StorageRef.")
    }
    self.source_storage_ref = source_storage_ref.copy()
    self.target_storage_ref = target_storage_ref.copy()
}

func IMRMove.as_str(indent=0) {
    return self.format_inst(
        "MOVE", pos_parameter_names=[
            "source_storage_ref",
            "target_storage_ref",
        ], indent=indent,
    )
}

func IMRMove.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    if _passthrough_storage_refs {
        obj["source_storage_ref"] =
            self.source_storage_ref
    } else {
        obj["source_storage_ref"] =
            self.source_storage_ref.as_str()
    }
    if _passthrough_storage_refs {
        obj["target_storage_ref"] =
            self.target_storage_ref
    } else {
        obj["target_storage_ref"] =
            self.target_storage_ref.as_str()
    }
    return obj
}

type IMRSetAttr base IMRNode {
    var target_and_obj_storage_ref
    var attr_name
    var value_storage_ref
}

func IMRSetAttr.init(
        target_and_obj_storage_ref=none,
        attr_name=none,
        value_storage_ref=none,
        ) {
    base.init(IMR_INST_SETATTR)
    if typename(target_and_obj_storage_ref) != "obj" or
            not has_attr(target_and_obj_storage_ref, "kind") or
            not has_attr(target_and_obj_storage_ref, "id") {
        throw new TypeError(
            "The target_and_container_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(attr_name) != "str" {
        throw new TypeError(
            "The attr_name parameter must be of type str."
        )
    }
    if typename(value_storage_ref) != "obj" or
            not has_attr(value_storage_ref, "kind") or
            not has_attr(value_storage_ref, "id") {
        throw new TypeError("The value_storage_ref parameter "
            "must be of type StorageRef.")
    }
    self.target_and_obj_storage_ref =
        target_and_obj_storage_ref.copy()
    self.attr_name = attr_name
    self.value_storage_ref = value_storage_ref.copy()
}

func IMRSetAttr.as_str(indent=0) {
    return self.format_inst(
        "SETATTR", pos_parameter_names=[
            "target_and_obj_storage_ref",
            "attr_name",
            "value_storage_ref",
        ], indent=indent,
    )
}

func IMRSetAttr.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    if _passthrough_storage_refs {
        obj["target_and_obj_storage_ref"] =
            self.target_and_obj_storage_ref
    } else {
        obj["target_and_obj_storage_ref"] =
            self.target_and_obj_storage_ref.as_str()
    }
    obj["attr_name"] = self.attr_name
    if _passthrough_storage_refs {
        obj["value_storage_ref"] =
            self.value_storage_ref
    } else {
        obj["value_storage_ref"] =
            self.value_storage_ref.as_str()
    }
    return obj
}

type IMRGetAttr base IMRNode {
    var obj_storage_ref
    var attr_name
    var target_storage_ref
}

func IMRGetAttr.init(
        obj_storage_ref=none,
        attr_name=none,
        target_storage_ref=none,
        ) {
    base.init(IMR_INST_GETATTR)
    if typename(obj_storage_ref) != "obj" or
            not has_attr(obj_storage_ref, "kind") or
            not has_attr(obj_storage_ref, "id") {
        throw new TypeError("The obj_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(attr_name) != "str" {
        throw new TypeError("The attr_name parameter "
            "must be of type str.")
    }
    if typename(target_storage_ref) != "obj" or
            not has_attr(target_storage_ref, "kind") or
            not has_attr(target_storage_ref, "id") {
        throw new TypeError("The target_storage_ref parameter "
            "must be of type StorageRef.")
    }
    self.obj_storage_ref = obj_storage_ref.copy()
    self.attr_name = attr_name
    self.target_storage_ref = target_storage_ref.copy()
}

func IMRGetAttr.as_str(indent=0) {
    return self.format_inst(
        "GETATTR", pos_parameter_names=[
            "obj_storage_ref",
            "attr_name",
            "target_storage_ref",
        ], indent=indent,
    )
}

func IMRGetAttr.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    if _passthrough_storage_refs {
        obj["obj_storage_ref"] =
            self.obj_storage_ref
    } else {
        obj["obj_storage_ref"] =
            self.obj_storage_ref.as_str()
    }
    obj["attr_name"] = self.attr_name
    if _passthrough_storage_refs {
        obj["target_storage_ref"] =
            self.target_storage_ref
    } else {
        obj["target_storage_ref"] =
            self.target_storage_ref.as_str()
    }
    return obj
}

type IMRSetIdx base IMRNode {
    var target_and_container_storage_ref
    var index_storage_ref
    var value_storage_ref
}

func IMRSetIdx.init(
        target_and_container_storage_ref=none,
        index_storage_ref=none,
        value_storage_ref=none,
        ) {
    base.init(IMR_INST_SETIDX)
    if typename(target_and_container_storage_ref) != "obj" or
            not has_attr(target_and_container_storage_ref, "kind") or
            not has_attr(target_and_container_storage_ref, "id") {
        throw new TypeError(
            "The target_and_container_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(index_storage_ref) != "obj" or
            not has_attr(index_storage_ref, "kind") or
            not has_attr(index_storage_ref, "id") {
        throw new TypeError("The index_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(value_storage_ref) != "obj" or
            not has_attr(value_storage_ref, "kind") or
            not has_attr(value_storage_ref, "id") {
        throw new TypeError("The value_storage_ref parameter "
            "must be of type StorageRef.")
    }
    self.target_and_container_storage_ref =
        target_and_container_storage_ref.copy()
    self.index_storage_ref = index_storage_ref.copy()
    self.value_storage_ref = value_storage_ref.copy()
}

func IMRSetIdx.as_str(indent=0) {
    return self.format_inst(
        "SETIDX", pos_parameter_names=[
            "target_and_container_storage_ref",
            "index_storage_ref",
            "value_storage_ref",
        ], indent=indent,
    )
}

func IMRSetIdx.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    if _passthrough_storage_refs {
        obj["target_and_container_storage_ref"] =
            self.target_and_container_storage_ref
    } else {
        obj["target_and_container_storage_ref"] =
            self.target_and_container_storage_ref.as_str()
    }
    if _passthrough_storage_refs {
        obj["index_storage_ref"] =
            self.index_storage_ref
    } else {
        obj["index_storage_ref"] =
            self.index_storage_ref.as_str()
    }
    if _passthrough_storage_refs {
        obj["value_storage_ref"] =
            self.value_storage_ref
    } else {
        obj["value_storage_ref"] =
            self.value_storage_ref.as_str()
    }
    return obj
}

type IMRGetIdx base IMRNode {
    var container_storage_ref
    var index_storage_ref
    var target_storage_ref
}

func IMRGetIdx.init(
        container_storage_ref=none,
        index_storage_ref=none,
        target_storage_ref=none,
        ) {
    base.init(IMR_INST_GETIDX)
    if typename(container_storage_ref) != "obj" or
            not has_attr(container_storage_ref, "kind") or
            not has_attr(container_storage_ref, "id") {
        throw new TypeError("The container_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(index_storage_ref) != "obj" or
            not has_attr(index_storage_ref, "kind") or
            not has_attr(index_storage_ref, "id") {
        throw new TypeError("The index_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(target_storage_ref) != "obj" or
            not has_attr(target_storage_ref, "kind") or
            not has_attr(target_storage_ref, "id") {
        throw new TypeError("The target_storage_ref parameter "
            "must be of type StorageRef.")
    }
    self.container_storage_ref = container_storage_ref.copy()
    self.index_storage_ref = index_storage_ref.copy()
    self.target_storage_ref = target_storage_ref.copy()
}

func IMRGetIdx.as_str(indent=0) {
    return self.format_inst(
        "GETIDX", pos_parameter_names=[
            "container_storage_ref",
            "index_storage_ref",
            "target_storage_ref",
        ], indent=indent,
    )
}
func IMRGetIdx.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj()
    if _passthrough_storage_refs {
        obj["container_storage_ref"] =
            self.container_storage_ref
    } else {
        obj["container_storage_ref"] =
            self.container_storage_ref.as_str()
    }
    if _passthrough_storage_refs {
        obj["index_storage_ref"] =
            self.index_storage_ref
    } else {
        obj["index_storage_ref"] =
            self.index_storage_ref.as_str()
    }
    if _passthrough_storage_refs {
        obj["target_storage_ref"] =
            self.target_storage_ref
    } else {
        obj["target_storage_ref"] =
            self.target_storage_ref.as_str()
    }
    return obj
}

type IMRCallArg {
    var ref
    var name
}

func IMRCallArg.init(ref, name) {
    self.ref = ref
    self.name = name
}

type IMRCall base IMRNode {
    var called_func_ref = none
    var return_value_ref = none

    var arg_count = 0
    var pos_arg_count = 0
    var kw_arg_count = 0
    var args = []
    var has_later = no
    var has_later_ignore = no
    var has_later_repeat = no
}

func IMRCall.init(
        called_func_ref=none,
        arg_refs=[],
        arg_names_if_any=[],
        has_later=no,
        has_later_ignore=no,
        has_later_repeat=no,
        return_value_ref=none,
        ) {
    base.init(IMR_INST_CALL)
    if arg_refs.len != arg_names_if_any.len {
        throw new RuntimeError(
            "The arg_refs list len and "
            "arg_names_if_any list len must match."
        )
    }
    if typename(called_func_ref) != "obj" or
            not has_attr(called_func_ref, "kind") or
            not has_attr(called_func_ref, "id") {
        throw new TypeError("The called_func_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(return_value_ref) != "obj" or
            not has_attr(return_value_ref, "kind") or
            not has_attr(return_value_ref, "id") {
        throw new TypeError("The return_value_ref parameter "
            "must be of type StorageRef.")
    }
    self.has_later = has_later
    self.has_later_ignore = has_later_ignore
    self.has_later_repeat = has_later_repeat
    self.called_func_ref = called_func_ref.copy()
    self.return_value_ref = return_value_ref.copy()
    var pos_args = []
    var kw_args = []
    var i = 1
    while i <= arg_refs.len {
        var ref = arg_refs[i]
        if typename(ref) != "obj" or
                not has_attr(ref, "kind") or
                not has_attr(ref, "id") {
            throw new TypeError("The arg_refs values "
                "must all be of type StorageRef.")
        }
        var name = none
        if arg_names_if_any[i] != none {
            name = arg_names_if_any[i] + ""
            self.kw_arg_count += 1
            kw_args.add([ref, name])
        } else {
            self.pos_arg_count += 1
            pos_args.add(ref)
        }
        self.arg_count += 1
        i += 1
    }
    i = 1
    while i <= pos_args.len {
        self.args.add(new IMRCallArg(
            pos_args[i], none))
        i += 1
    }
    i = 1
    while i <= kw_args.len {
        self.args.add(new IMRCallArg(
            kw_args[i][1], kw_args[i][2]
        ))
        i += 1
    }
}

func IMRCall.as_str(indent=0) {
    var t = ""
    var i = 1
    var k = 1
    while i <= self.arg_count {
        if self.args[i].name != none {
            t += " "
            t += textfmt.as_escaped_code_string(
                self.args[i].name)
            k += 1
        }
        t += " "
        t += self.args[i].ref.as_str()
        i += 1
    }
    return self.format_inst(
        "CALL", pos_parameter_names=[
            "called_func_ref",
            "return_value_ref",
            "arg_count",
        ], skip_parameter_names=[
            "args",
            "kw_arg_count",
        ], extra_text=t, indent=indent,
    )
}

func IMRCall.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    if _passthrough_storage_refs {
        obj["called_func_ref"] =
            self.called_func_ref
    } else {
        obj["called_func_ref"] =
            self.called_func_ref.as_str()
    }
    obj["has_later"] = self.has_later
    obj["has_later_ignore"] = self.has_later_ignore
    obj["has_later_repeat"] = self.has_later_repeat
    obj["arg_count"] = self.arg_count
    obj["kw_arg_count"] = self.kw_arg_count
    if _passthrough_storage_refs {
        obj["return_value_ref"] =
            self.return_value_ref
    } else {
        obj["return_value_ref"] =
            self.return_value_ref.as_str()
    }

    obj["args"] = []
    for arg in self.args {
        var argobj = {->}
        if _passthrough_storage_refs {
            argobj["ref"] = arg.ref
        } else {
            argobj["ref"] = arg.ref.as_str()
        }
        if arg.name != none {
            argobj["name"] = arg.name
        }
        obj["args"].add(argobj)
    }
    return obj
}

type IMRCond base IMRBlock {
    var evaluated_cond_ref = none
}

func IMRCond.init(
        evaluated_cond_ref=none,
        ) {
    base.init(IMR_BLOCK_COND)
    if typename(evaluated_cond_ref) != "obj" or
            not has_attr(evaluated_cond_ref, "kind") or
            not has_attr(evaluated_cond_ref, "id") {
        throw new TypeError("The evaluated_cond_ref parameter "
            "must be of type StorageRef.")
    }
    self.evaluated_cond_ref = evaluated_cond_ref.copy()
}

func IMRCond.as_str(indent=0) {
    return self.format_inst(
        "COND", pos_parameter_names=[
            "evaluated_cond_ref",
        ],
        skip_parameter_names=[
            "instructions",
        ],
        indent=indent,
    ) + " " + self.fmt_block(indent=indent)
}

func IMRCond.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    if _passthrough_storage_refs {
        obj["evaluated_cond_ref"] =
            self.evaluated_cond_ref
    } else {
        obj["evaluated_cond_ref"] =
            self.evaluated_cond_ref.as_str()
    }
    return obj
}

type IMRLoop base IMRBlock {
}

func IMRLoop.init {
    base.init(IMR_BLOCK_LOOP)
}

func IMRLoop.as_str(indent=0) {
    return self.format_inst(
        "LOOP", pos_parameter_names=[
        ],
        skip_parameter_names=[
            "instructions",
        ],
        indent=indent,
    ) + " " + self.fmt_block(indent=indent)
}

func IMRLoop.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    return obj
}

type IMRBreak base IMRNode {
}

func IMRBreak.init {
    base.init(IMR_INST_BREAK)
}

func IMRBreak.as_str(indent=0) {
    return self.format_inst(
        "BREAK", pos_parameter_names=[
        ],
        skip_parameter_names=[
        ],
        indent=indent,
    )
}

func IMRBreak.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    return obj
}

type IMRContinue base IMRNode {
}

func IMRContinue.init {
    base.init(IMR_INST_CONTINUE)
}

func IMRContinue.as_str(indent=0) {
    return self.format_inst(
        "CONTINUE", pos_parameter_names=[
        ],
        skip_parameter_names=[
        ],
        indent=indent,
    )
}

func IMRContinue.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    return obj
}

type IMRIterLoop base IMRBlock {
    var iterated_container_ref = none
    var iterator_store_ref = none
}

func IMRIterLoop.init(
        iterated_container_ref=none,
        iterator_store_ref=none,
        ) {
    base.init(IMR_BLOCK_ITERLOOP)
    if typename(iterated_container_ref) != "obj" or
            not has_attr(iterated_container_ref, "kind") or
            not has_attr(iterated_container_ref, "id") {
        throw new TypeError("The iterated_container_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(iterator_store_ref) != "obj" or
            not has_attr(iterator_store_ref, "kind") or
            not has_attr(iterator_store_ref, "id") {
        throw new TypeError("The iterator_store_ref parameter "
            "must be of type StorageRef.")
    }
    self.iterator_store_ref = iterator_store_ref.copy()
    self.iterated_container_ref = iterated_container_ref.copy()
}

func IMRIterLoop.as_str(indent=0) {
    return self.format_inst(
        "ITERLOOP", pos_parameter_names=[
            "iterated_container_ref",
            "iterator_store_ref",
        ],
        skip_parameter_names=[
            "instructions",
        ],
        indent=indent,
    ) + " " + self.fmt_block(indent=indent)
}

func IMRIterLoop.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    if _passthrough_storage_refs {
        obj["iterator_store_ref"] =
            self.iterator_store_ref
    } else {
        obj["iterator_store_ref"] =
            self.iterator_store_ref.as_str()
    }
    if _passthrough_storage_refs {
        obj["iterated_container_ref"] =
            self.iterated_container_ref
    } else {
        obj["iterated_container_ref"] =
            self.iterated_container_ref.as_str()
    }
    return obj
}

type IMRApplyOp base IMRNode {
    var is_binary = yes
    var op_token
    var target_storage_ref
    var operand_1_storage_ref
    var operand_1_storage_ref
}

func IMRApplyOp.init(op_token,
        operand_1_storage_ref=none,
        operand_2_storage_ref=none,
        target_storage_ref=none,
        is_binary=no,
        ) {
    base.init(IMR_INST_APPLY_OP)
    if typename(target_storage_ref) != "obj" or
            not has_attr(target_storage_ref, "kind") or
            not has_attr(target_storage_ref, "id") {
        throw new TypeError("The target_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if typename(operand_1_storage_ref) != "obj" or
            not has_attr(operand_1_storage_ref, "kind") or
            not has_attr(operand_1_storage_ref, "id") {
        throw new TypeError("The operand_1_storage_ref parameter "
            "must be of type StorageRef.")
    }
    if operand_2_storage_ref != none and
            (typename(operand_2_storage_ref) != "obj" or
             not has_attr(operand_2_storage_ref, "kind") or
             not has_attr(operand_2_storage_ref, "id")) {
        throw new TypeError("The operand_2_storage_ref parameter "
            "must be of type StorageRef or none.")
    }
    if is_binary and operand_2_storage_ref == none {
        throw new TypeError("The operand_2_storage_ref parameter "
            "must be specified when is_binary is set to yes.")
    }
    if not is_binary and operand_2_storage_ref != none {
        throw new TypeError("The operand_2_storage_ref parameter "
        "cannot be specified when is_binary is set to no.")
    }
    self.target_storage_ref = target_storage_ref.copy()
    self.operand_1_storage_ref = operand_1_storage_ref.copy()
    self.operand_2_storage_ref = none
    if is_binary {
        self.is_binary = yes
        self.operand_2_storage_ref =
            operand_2_storage_ref.copy()
    } else {
        self.is_binary = no
    }
    self.op_token = op_token.copy()
}

func IMRApplyOp.as_str(indent=0) {
    if self.is_binary {
        return self.format_inst(
            "APPLYOP", pos_parameter_names=[
                "operand",
                "is_binary",
                "operand_1_storage_ref",
                "operand_2_storage_ref",
                "target_storage_ref",
            ], indent=indent,
        )
    } else {
        return self.format_inst(
            "APPLYOP", pos_parameter_names=[
                "operand",
                "is_binary",
                "operand_1_storage_ref",
                "target_storage_ref",
            ], indent=indent,
        )
    }
}

func IMRApplyOp.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    if _passthrough_storage_refs {
        obj["target_storage_ref"] =
            self.target_storage_ref
    } else {
        obj["target_storage_ref"] =
            self.target_storage_ref.as_str()
    }
    if _passthrough_storage_refs {
        obj["operand_1_storage_ref"] =
            self.operand_1_storage_ref
    } else {
        obj["operand_1_storage_ref"] =
            self.operand_1_storage_ref.as_str()
    }
    if self.is_binary {
        if _passthrough_storage_refs {
            obj["operand_2_storage_ref"] =
                self.operand_2_storage_ref
        } else {
            obj["operand_2_storage_ref"] =
                self.operand_2_storage_ref.as_str()
        }
    }
    obj["is_binary"] = self.is_binary
    obj["operand"] = self.op_token.str
    return obj
}

type IMRStructOrTypeBlock base IMRBlock {
    var parent_imr_node = none
    var is_union = no
    var is_type = no
    var is_struct = no
    var is_nested = no

    var label_to_st_id_map = {->}
    var st_id_to_inst_offset_map = {->}

    var init_instructions = []

    var storage_id = none
    var label = none
    var base_type_id = none
}

func IMRStructOrTypeBlock.init(
        global_type_or_storage_id, label,
        base_type_id=none,
        is_union=no,
        is_type=no,
        is_nested=no,
        parent_imr_node=none,
        ) {
    base.init(IMR_BLOCK_STRUCTORTYPE)
    if is_nested and parent_imr_node == none {
        throw new ValueError("For nested structs or types, "
            "the parent IMR node must be specified.")
    } elseif not is_nested {
        parent_imr_node = none
    }
    self.parent_imr_node = parent_imr_node
    if label != none {
        self.label = label + ""
    } elseif not is_nested {
        throw new ValueError(
            "Any top-level struct or type must "
            "have a name."
        )
    }
    if typename(is_union) != "bool" {
        throw new TypeError(
            "The is_union parameter must "
            "be a bool."
        )
    }
    self.is_union = is_union
    if typename(is_type) != "bool" {
        throw new TypeError(
            "The is_type parameter must "
            "be a bool."
        )
    }
    self.is_type = is_type
    self.is_struct = (not is_union and not is_type)
    if typename(global_type_or_storage_id) != "num" {
        throw new TypeError(
            "The global_type_or_storage_id parameter must "
            "be a num."
        )
    }
    if is_nested {
        if base_type_id != none {
            throw new ValueError(
                "Cannot have any storage ids "
                "for nested struct or union."
            )
        }
        self.is_nested = yes
    } else {
        self.storage_id = global_type_or_storage_id
        if base_type_id != none and
                typename(base_type_id) != "num" {
            throw new TypeError(
                "The base_type_id parameter must "
                "be a num or none."
            )
        }
        self.base_type_id = base_type_id
    }
}

func IMRStructOrTypeBlock.register_var_attr(
        storage_id, label, init_insts=[],
        type_expr=none,
        ) {
    if storage_id == none {
        throw new ValueError("The storage_id "
            "for a var attr cannot be none.")
    }
    if label == none {
        throw new ValueError("The label for "
            "a var attr cannot be none.")
    }
    self.label_to_st_id_map[label] = storage_id
    var new_inst = new IMRVarInfo(label, type_expr, storage_id)
    var new_offset = self.instructions.len + 1
    self.instructions.add(new_inst)
    self.st_id_to_inst_offset_map[storage_id] = new_offset
    if init_insts != none and init_insts.len > 0 {
        self.init_instructions += init_insts
    }
}

func IMRStructOrTypeBlock.register_struct_or_union_attr(
        storage_id, label, block_item,
        ) {
    if storage_id == none {
        throw new ValueError("The storage_id "
            "for a var attr cannot be none.")
    }
    if not has_attr(block_item, "kind") or
            block_item.kind != IMR_BLOCK_STRUCTORTYPE {
        throw new ValueError("The item registered must "
            "be an IMR node of kind IMR_BLOCK_STRUCTORTYPE.")
    }
    self.label_to_st_id_map[label] = storage_id
    var new_offset = self.instructions.len + 1
    self.instructions.add(block_item)
    self.st_id_to_inst_offset_map[storage_id] = new_offset
}

func IMRStructOrTypeBlock.as_str(indent=0) {
    var name = "FUNCBLOCK"
    if self.is_union {
        name = "UNIONBLOCK"
    } elseif self.is_struct {
        name = "STRUCTBLOCK"
    }
    return self.format_inst(
        name, pos_parameter_names=[
            "storage_id",
            "label",
        ], skip_parameter_names=[
            "instructions",
        ], indent=indent,
    ) + " " + self.fmt_block(indent=indent)
}

func IMRStructOrTypeBlock.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    obj["label"] = self.label
    obj["storage_id"] = self.storage_id
    obj["base_type_id"] = self.base_type_id
    obj["is_union"] = self.is_union
    obj["is_struct"] = self.is_struct
    return obj
}

type IMRFuncBlock base IMRBlock {
    var is_func_attr = no
    var is_extend = no

    var global_func_id = none
    var global_type_id = none
    var type_attr_id = none
    var func_scope = none
    var label = none
    var type_path = none
    var storage_ref = none

    var last_assigned_temp_storage_id = 0
}

func IMRFuncBlock.init(
        func_scope, label,
        storage_ref,
        type_path=none,
        is_extend=no,
        ) {
    base.init(IMR_BLOCK_FUNC)
    self.func_scope = func_scope
    self.label = label + ""
    self.is_extend = is_extend
    if storage_ref == none or
            not has_attr(storage_ref, "kind") or
            (storage_ref.kind != st_ref.ST_GLOBAL and
             storage_ref.kind != st_ref.ST_GLOBALATTR) {
        throw new ValueError(
            "No storage_ref was specified, or "
            "it's not of kind ST_GLOBAL or "
            "ST_GLOBALATTR."
        )
    }
    self.is_func_attr =
        storage_ref.kind == st_ref.ST_GLOBALATTR
    if self.is_func_attr {
        if type_path == none or type_path.len == 0 {
            throw new ValueError(
                "Missing type_path for a func attr."
            )
        }
        self.type_path = type_path.copy()
    } else {
        if type_path != none and type_path.len > 0 {
            throw new ValueError(
                "Unexpected type_path for a func that "
                "isn't a func attr."
            )
        }
    }
}

func IMRFuncBlock.as_str(indent=0) {
    if self.is_func_attr {
        return self.format_inst(
            "FUNCBLOCK", pos_parameter_names=[
                "is_func_attr", "storage_ref",
                "type_path", "label", "is_extend",
            ], skip_parameter_names=[
                "instructions",
            ], indent=indent,
        ) + " " + self.fmt_block(indent=indent)
    } else {
        return self.format_inst(
            "FUNCBLOCK", pos_parameter_names=[
                "is_func_attr", "storage_ref",
                "label", "is_extend",
            ], skip_parameter_names=[
                "instructions",
            ], indent=indent,
        ) + " " + self.fmt_block(indent=indent)
    }
}

func IMRFuncBlock.as_json_obj(
        _passthrough_storage_refs=no,
        ) {
    var obj = base.as_json_obj(
        _passthrough_storage_refs=
            _passthrough_storage_refs)
    obj["label"] = self.label
    obj["is_func_attr"] = self.is_func_attr
    if _passthrough_storage_refs {
        obj["storage_ref"] = self.storage_ref
    } else {
        obj["storage_ref"] = self.storage_ref.as_str()
    }
    obj["is_extend"] = self.is_extend == yes
    if self.is_func_attr {
        assert(self.type_path != none)
        obj["type_path"] = self.type_path.copy()
    } else {
        assert(self.type_path == none or
            self.type_path.len == 0)
    }
    return obj
}

enum IMRNodeKind {
    IMR_BLOCK_FUNC,
    IMR_BLOCK_COND,
    IMR_BLOCK_LOOP,
    IMR_BLOCK_ITERLOOP,
    IMR_BLOCK_STRUCTORTYPE,
    IMR_BLOCK_TYPE,
    IMR_BLOCK_DO,
    IMR_BLOCK_DO_C,
    IMR_BLOCK_RESCUE,
    IMR_BLOCK_FINALLY,
    IMR_BLOCK_WITH,
    IMR_INST_VARINFO,
    IMR_INST_MOVE,
    IMR_INST_MOVE_CAST,
    IMR_INST_APPLY_OP,
    IMR_INST_CALL,
    IMR_INST_BREAK,
    IMR_INST_CONTINUE,
    IMR_INST_RETURN,
    IMR_INST_AWAIT,
    IMR_INST_CLRZERO,
    IMR_INST_SETLIT,
    IMR_INST_SETIDX,
    IMR_INST_SETATTR,
    IMR_INST_GETIDX,
    IMR_INST_GETATTR,
}

type IMRForFile {
    var project_file

    var blocks = []

    var last_assigned_temp_storage_id = 0
}

func IMRForFile.as_str(indent=0) {
    var t = "IMRForFile{" +
        "project_file=" + self.project_file.as_str()
    t += ",blocks=" + self.blocks.as_str()
    return t + "}"
}

func IMRForFile.find_global_func_by_label(
        label, type_path=none) {
    for block in self.blocks {
        if block.kind != IMR_BLOCK_FUNC {
            continue
        }
        if type_path == none or type_path.len == 0 {
            if block.is_func_attr {
                continue
            }
            if block.label == label {
                return block
            }
        } else {
            if not block.is_func_attr {
                continue
            }
        }
    }
    return none
}

type ExprIMRResult {
    var instructions = []
    var storage_ref
}

func get_new_temp_storage_ref(
        node, imr_parents=[],
        func_imr_parent=none,
        file_imr_parent=none,
        project_file=none,
        is_moose64=no, msgs=none,
        ) {
    if func_imr_parent != none {
        assert(func_imr_parent.last_assigned_temp_storage_id <= 0)
        var new_value =
            func_imr_parent.last_assigned_temp_storage_id - 1
        func_imr_parent.last_assigned_temp_storage_id = new_value
        return new st_ref.StorageRef(
            st_ref.ST_LOCAL,
            new_value
        )
    }
    if file_imr_parent == none {
        throw new RuntimeError("Cannot generate IMR "
            "storage num without file_imr_parent being "
            "set.")
    }
    assert(file_imr_parent.last_assigned_temp_storage_id <= 0)
    var new_value =
        file_imr_parent.last_assigned_temp_storage_id - 1
    file_imr_parent.last_assigned_temp_storage_id = new_value
    return new st_ref.StorageRef(
        st_ref.ST_GLOBAL,
        new_value
    )
}

func generate_imr_for_expr(
        node, imr_parents=[],
        func_imr_parent=none,
        file_imr_parent=none,
        project_file=none,
        try_target_storage_ref=none,
        is_moose64=no, msgs=none,
        ) {
    var irregular_binop_strs = {"[", "(", "."}
    var result = new ExprIMRResult()
    if node.kind == ast.N_EXPR_IDREF {
        result.storage_ref = node.ref.copy()
        return later result
    } elseif node.kind == ast.N_EXPR_LIT {
        var tmp_ref = try_target_storage_ref
        if tmp_ref == none {
            tmp_ref = get_new_temp_storage_ref(
                node, imr_parents=imr_parents,
                func_imr_parent=func_imr_parent,
                file_imr_parent=file_imr_parent,
                project_file=project_file,
                is_moose64=is_moose64, msgs=msgs,
            )
        }
        result.instructions.add(new IMRSetLit(
            node.value, tmp_ref,
            literal_kind=node.literal_kind,
        ))
        result.storage_ref = tmp_ref
        return later result
    } elseif node.kind == ast.N_EXPR_BINOP and
            node.optoken.str == "(" and
            node.subexprs.len >= 2 {
        var tmp_ref = try_target_storage_ref
        if tmp_ref == none {
            tmp_ref = get_new_temp_storage_ref(
                node, imr_parents=imr_parents,
                func_imr_parent=func_imr_parent,
                file_imr_parent=file_imr_parent,
                project_file=project_file,
                is_moose64=is_moose64, msgs=msgs,
            )
        }
        var left_hand_result = generate_imr_for_expr(
            node.subexprs[1],
            imr_parents=imr_parents + [node],
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            project_file=project_file,
            is_moose64=is_moose64,
            msgs=msgs,
        ) later:

        await left_hand_result
        if left_hand_result == none {
            return later none
        }
        result.instructions += left_hand_result.instructions

        var arg_refs = []
        var arg_names_if_any = []
        var args_node = node.subexprs[2]
        if args_node.kind != ast.N_EXPR_CALLARGS {
            throw new RuntimeError("Encountered "
                "broken call where args sub expression "
                "isn't of type N_EXPR_CALLARGS.")
        }
        var orig_arg_exprs = args_node.subexprs
        assert(not args_node.has_types)
        var queue = []
        var i = 1
        while i <= orig_arg_exprs.len {
            queue.add(orig_arg_exprs[i])
            i += 1
        }
        func process_item(item) {
            var value_expr = item
            var value_name = none
            if value_expr.kind == ast.N_EXPR_CALLKWARG {
                value_name = value_expr.label
                value_expr = value_expr.subexprs[1]
            }
            var arg_expr_result = generate_imr_for_expr(
                value_expr,
                imr_parents=imr_parents + [node],
                func_imr_parent=func_imr_parent,
                file_imr_parent=file_imr_parent,
                project_file=project_file,
                is_moose64=is_moose64,
                msgs=msgs,
            ) later:

            await arg_expr_result
            if arg_expr_result == none {
                return later
            }
            result.instructions += arg_expr_result.instructions
            arg_refs.add(arg_expr_result.storage_ref)
            arg_names_if_any.add(
                value_name
            )
        }
        func process_full_queue {
            if queue.len == 0 {
                return later
            }
            var result = process_item(queue.pop_at(1))
            later:

            await result
            if queue.len == 0 {
                return later
            }
            result = process_item(queue.pop_at(1))
            later repeat
        }
        process_full_queue() later:

        result.instructions.add(new IMRCall(
            called_func_ref=left_hand_result.storage_ref,
            arg_refs=arg_refs,
            arg_names_if_any=arg_names_if_any,
            has_later=no,
            has_later_ignore=no,
            has_later_repeat=no,
            return_value_ref=tmp_ref,
        ))
        result.storage_ref = tmp_ref
        return later result
    } elseif node.kind == ast.N_EXPR_BINOP and
            node.optoken.str == "." and
            node.subexprs.len >= 2 and
            node.subexprs[2].kind == ast.N_EXPR_IDREF {
        var tmp_ref = get_new_temp_storage_ref(
            node, imr_parents=imr_parents,
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            project_file=project_file,
            is_moose64=is_moose64, msgs=msgs,
        )
        var attr_name = node.subexprs[2].label
        assert(attr_name != none)
        var left_hand_result = generate_imr_for_expr(
            node.subexprs[1],
            imr_parents=imr_parents + [node],
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            project_file=project_file,
            is_moose64=is_moose64,
            msgs=msgs,
        ) later:

        await left_hand_result
        if left_hand_result == none {
            return later none
        }
        result.instructions += left_hand_result.instructions
        result.instructions.add(new IMRGetAttr(
            obj_storage_ref=left_hand_result.storage_ref,
            attr_name=attr_name,
            target_storage_ref=tmp_ref,
        ))
        result.storage_ref = tmp_ref
        return later result
    } elseif node.kind == ast.N_EXPR_BINOP and
            node.optoken.str == "[" and
            node.subexprs.len >= 2 {
        var tmp_ref = get_new_temp_storage_ref(
            node, imr_parents=imr_parents,
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            project_file=project_file,
            is_moose64=is_moose64, msgs=msgs,
        )
        var left_hand_result = generate_imr_for_expr(
            node.subexprs[1],
            imr_parents=imr_parents + [node],
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            project_file=project_file,
            is_moose64=is_moose64,
            msgs=msgs,
        ) later:

        await left_hand_result
        var right_hand_result = generate_imr_for_expr(
            node.subexprs[2],
            imr_parents=imr_parents + [node],
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            project_file=project_file,
            is_moose64=is_moose64, msgs=msgs,
        ) later:

        await right_hand_result
        if left_hand_result == none or
                right_hand_result == none {
            return later none
        }
        result.instructions += left_hand_result.instructions
        result.instructions += right_hand_result.instructions
        result.instructions.add(new IMRGetIdx(
            container_storage_ref=
                left_hand_result.storage_ref,
            index_storage_ref=
                right_hand_result.storage_ref,
            target_storage_ref=tmp_ref,
        ))
        result.storage_ref = tmp_ref
        return later result
    } elseif node.kind == ast.N_EXPR_BINOP and
            not irregular_binop_strs.has(node.optoken.str) and
            node.subexprs.len >= 2 {
        var tmp_ref = get_new_temp_storage_ref(
            node, imr_parents=imr_parents,
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            project_file=project_file,
            is_moose64=is_moose64, msgs=msgs,
        )
        var left_hand_result = generate_imr_for_expr(
            node.subexprs[1],
            imr_parents=imr_parents + [node],
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            project_file=project_file,
            is_moose64=is_moose64,
            msgs=msgs,
        ) later:

        await left_hand_result
        var right_hand_result = generate_imr_for_expr(
            node.subexprs[2],
            imr_parents=imr_parents + [node],
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            project_file=project_file,
            is_moose64=is_moose64, msgs=msgs,
        ) later:

        await right_hand_result
        if left_hand_result == none or
                right_hand_result == none {
            return later none
        }
        result.instructions += left_hand_result.instructions
        result.instructions += right_hand_result.instructions
        result.instructions.add(new IMRApplyOp(
            node.optoken.copy(),
            operand_1_storage_ref=
                left_hand_result.storage_ref,
            operand_2_storage_ref=
                right_hand_result.storage_ref,
            target_storage_ref=tmp_ref,
            is_binary=yes,
        ))
        result.storage_ref = tmp_ref
        return later result
    }
    return later none
}

func generate_imr_for_stmt(
        node, imr_parents=[],
        func_imr_parent=none,
        file_imr_parent=none,
        project_file=none,
        is_moose64=no, msgs=none,
        ) {
    if node.kind == ast.N_STMT_VAR {
        var result_insts = []
        var idx = 0
        for label in node.var_labels {
            idx += 1
            var vinfo = new IMRVarInfo(label,
                if node.has_type_expr
                    (node.subexprs[node.subexprs.len])
                    else (none),
                node.symbol_info[idx].storage_id)
            vinfo.line = node.line
            vinfo.col = node.col
            result_insts.add(vinfo)
        }
        var assigned_exprs = node.subexprs.copy()
        var type_expr = none
        if node.has_type_expr and assigned_exprs.len > 0 {
            type_expr = assigned_exprs[assigned_exprs.len]
            assigned_exprs = assigned_exprs.sub(
                1, assigned_exprs.len - 1
            )
        }
        if assigned_exprs == 0 {
            return later result_insts
        }
        var queue = []
        var i = 1
        while i <= assigned_exprs.len {
            queue.add([i, assigned_exprs[i]])
            i += 1
        }
        func process_queue_item(item) {
            if result_insts == none {
                return later
            }
            var left_hand_storage_id =
                node.symbol_info[idx].storage_id
            var var_ref = new st_ref.StorageRef(
                st_ref.ST_LOCAL,
                left_hand_storage_id
            )
            if (item[2] == none or
                    (item[2].kind == ast.N_EXPR_LIT and
                     item[2].literal_kind == ast_expr.LK_NORMAL and
                     item[2].value == none)) and
                    is_moose64 {
                result_insts.add(new IMRClrZero(
                    var_ref,
                ))
                return later
            }
            var right_hand_result = generate_imr_for_expr(
                item[2],
                imr_parents=imr_parents + [node],
                func_imr_parent=func_imr_parent,
                file_imr_parent=file_imr_parent,
                project_file=project_file,
                try_target_storage_ref=var_ref,
                is_moose64=is_moose64, msgs=msgs,
            ) later:

            await right_hand_result
            if right_hand_result != none {
                result_insts += right_hand_result.instructions
                if not right_hand_result.storage_ref.alike(
                        var_ref) {
                    result_insts.add(new IMRMove(
                        right_hand_result.storage_ref,
                        var_ref,
                    ))
                }
            } else {
                result_insts = none
            }
        }
        if queue.len == 0 or result_insts == none {
            return later result_insts
        }
        var _unused = process_queue_item(queue.pop_at(1))
        later:

        await _unused
        if queue.len == 0 or result_insts == none {
            return later result_insts
        }
        _unused = process_queue_item(queue.pop_at(1))
        later repeat
    }
    if node.kind == ast.N_STMT_BREAK {
        var breakst = new IMRBreak()
        breakst.line = node.line
        breakst.col = node.col
        return breakst
    }
    if node.kind == ast.N_STMT_CONTINUE {
        var continuest = new IMRContinue()
        continuest.line = node.line
        continuest.col = node.col
        return continuest
    }
    if node.kind == ast.N_STMT_DO {
        var result_insts = []

        var queue = [node]
        for clause in self.subexprs {
            queue.add(clause)
        }
        func process_item(item) {
            if result_insts == none {
                return later
            }

            var error_item_storage_refs = []
            func handle_rescue_clause_item(item) {
                # FIXME: extract class storage ids that
                # are referenced by rescue clause.
            }
            func handle_rescue_clause_if_needed {
                if item.kind != ast.N_EXPR_RESCUECLAUSE {
                    return later
                }
                var queue2 = []
                var idx = 0
                for elabel in self.error_labels {
                    idx += 1
                    if self.subexprs[idx] != none {
                        queue2.add([elabel, self.subexprs[idx]])
                    } else {
                        queue2.add([elabel, "any"])
                    }
                }
                if queue2.len == 0 {
                    return later
                }
                var result = handle_rescue_clause_item(
                    queue2.pop()) later:

                await result
                if queue2.len == 0 {
                    return lataer
                }
                result = handle_rescue_clause_item(
                    queue2.pop()) later repeat
            }
            handle_rescue_clause_if_needed() later:

            var inner_insts = generate_imr_for_stmts(
                node.subblocks[1],
                imr_parents=imr_parents + [node],
                func_imr_parent=func_imr_parent,
                file_imr_parent=file_imr_parent,
                project_file=project_file,
                is_moose64=is_moose64, msgs=msgs,
            ) later:

            await inner_insts
            if inner_insts == none or result_insts == none {
                result_insts = none
                return later
            }
            var block_item = none
            if item.kind == ast.N_STMT_DO {
                block_item = new IMRDo()
            } elseif item.kind == ast.N_EXPR_RESCUECLAUSE {
                block_item = new IMRRescue()
            } else {
                block_item = new IMRFinally()
            }
            block_item.line = node.line
            block_item.col = node.col
            block_item.instructions = []
            block_item.instructions += inner_insts
            result_insts.add(block_item)
        }
        if queue.len == 0 {
            return result_insts
        }
        var result = process_item(
            queue.pop_at(1)) later:

        await result
        if queue.len == 0 {
            return result_insts
        }
        result = process_item(
            queue.pop_at(1)) later repeat
    }
    if node.kind == ast.N_STMT_WITH {
        var result_insts = []

        var with_expr = node.subexprs[1]
        var inner_insts = generate_imr_for_stmts(
            node.subblocks[1],
            imr_parents=imr_parents + [node],
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            project_file=project_file,
            is_moose64=is_moose64, msgs=msgs,
        ) later:

        await inner_insts
        if inner_insts == none {
            result_insts = none
            return later
        }
        var with_result = generate_imr_for_expr(
            with_expr,
            imr_parents=imr_parents + [node],
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            project_file=project_file,
            is_moose64=is_moose64, msgs=msgs,
        ) later:

        await with_result
        if with_result == none {
            result_insts = none
            return later
        }
        var do_block = new IMRDo()
        do_block.line = node.line
        do_block.col = node.col
        do_block.instructions = []
        do_block.instructions += with_result.instructions
        # FIXME: see what the storage for the with label is,
        # and copy over the expression into that storage.
        do_block.instructions += inner_insts
        var finally_block = new IMRFinally()
        finally_block.line = node.line
        finally_block.col = node.col
        finally_block.instructions = []
        # FIXME: insert has_attr() calls here to check
        # if item has ".close()" and call it if it does.
        return [do_block, finally_block]
    }
    if node.kind == ast.N_STMT_WHILE {
        var result_insts = []

        var clause = node.subexprs[1]
        var inner_insts = generate_imr_for_stmts(
            node.subblocks[1],
            imr_parents=imr_parents + [node],
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            project_file=project_file,
            is_moose64=is_moose64, msgs=msgs,
        ) later:

        await inner_insts
        if inner_insts == none {
            result_insts = none
            return later
        }
        var cls_result = generate_imr_for_expr(
            node.subexprs[1],
            imr_parents=imr_parents + [node],
            func_imr_parent=func_imr_parent,
            file_imr_parent=file_imr_parent,
            project_file=project_file,
            is_moose64=is_moose64, msgs=msgs,
        ) later:

        await cls_result
        if cls_result == none {
            result_insts = none
            return later
        }
        var loop_block = new IMRLoop()
        loop_block.line = node.line
        loop_block.col = node.col
        loop_block.instructions = []
        loop_block.instructions += cls_result.instructions
        var inverse_op_token = new token.Token(
            "not",
            token.T_BOOLCOMP,
            node.line,
            node.col,
        )
        loop_block.instructions.add(IMRApplyOp(
            inverse_op_token,
            operand_1_storage_ref=cls_result.storage_ref,
            target_storage_ref=cls_result.storage_ref,
            is_binary=no,
        ))
        var cond_block = new IMRCond(
            evaluated_cond_ref=cls_result.storage_ref,
        )
        cond_block.line = node.line
        cond_block.col = node.col
        cond_block.instructions.add(new IMRBreak())
        loop_block.instructions.add(cond_block)
        loop_block.instructions += inner_insts
        return [loop_block]
    }
    if node.kind == ast.N_STMT_TYPE or
            node.kind == ast.N_STMT_STRUCT or
            (node.kind == ast.N_STMT_UNION and
             imr_parents.len > 0) {
        var anscope = none
        if imr_parents.len == 0 {
            anscope = project_file.make_attr_names_scope_from_node(
                node, msgs=msgs, is_moose64=is_moose64,
                def_project_file=project_file,
            )
            if anscope == none {
                throw new RuntimeError(
                    "Failed to get attribute names scope "
                    "for top-level struct or type."
                )
            }
        }
        var is_type = (node.kind == ast.N_STMT_TYPE)
        var is_union = (node.kind == ast.N_STMT_UNION)
        var storage_id = none
        var base_type_storage_id = none
        if anscope != none {
            storage_id = anscope.storage_id
            if is_type {
                base_type_storage_id =
                    anscope.base_global_id
            }
        }
        var label = node.label
        var unnested_ids = {}
        if anscope != none {
            unnested_ids = anscope.unnested_ids_set
        }
        var result_insts = []
        var block_item = new IMRStructOrTypeBlock(
            storage_id, label,
            base_type_id=base_type_storage_id,
            is_union=is_union,
            is_nested=imr_parents.len > 0,
            is_type=is_type
        )
        func handle_var(storage_id, var_label, type_expr, imr_parent) {
            imr_parent.register_var_attr(
                storage_id, var_label,
                init_insts=[],
                type_expr=type_expr,
            )
            return later
        }
        func handle_item(storage_id, var_label, type_expr,
                imr_parent, nestediteminfo) {
            if nestediteminfo == none {
                var result = handle_var(
                    storage_id, var_label, type_expr, imr_parent
                ) later:

                await result
                return later result
            }
            if imr_parent == none {
                imr_parent = block_item
            }
            assert(imr_parent != none)
            handle_container(
                anscope_container=nestediteminfo,
                outer_imr_parent=imr_parent
            ) later:

            return later none
        }
        func handle_container(
                anscope_container=none,
                outer_imr_parent=none) {
            var inner_is_union = is_union
            var inner_is_type = is_type
            var inner_is_nested = no
            if anscope_container != none {
                search_in = anscope_container
                inner_is_union = anscope_container.is_union
                inner_is_type = no
                inner_is_nested = yes
            } else {
                if anscope == none {
                    throw new RuntimeError(
                        "Must either have an IMRNode parent, "
                        "or an attribute names scope."
                    )
                }
                search_in = anscope
            }
            var imr_parent = block_item
            if inner_is_nested {
                if outer_imr_parent == none {
                    outer_imr_parent = block_item
                }
                assert(anscope_container.storage_id != none)
                imr_parent = new IMRStructOrTypeBlock(
                    anscope_container.storage_id,
                    anscope_container.label,
                    base_type_id=none,
                    is_union=inner_is_union,
                    is_nested=inner_is_nested,
                    is_type=inner_is_type,
                    parent_imr_node=outer_imr_parent,
                )
                outer_imr_parent.register_struct_or_union_attr(
                    anscope_container.storage_id,
                    anscope_container.label,
                    imr_parent,
                )
            }
            var var_attr_queue = []
            for id in search_in.id_to_symbol_map {
                var nestiteminfo = none
                for entry in search_in.nested_structs_unions_list {
                    if has_attr(entry,
                            "is_nested_struct_or_union_item") and
                            entry.is_nested_struct_or_union_item == yes and
                            entry.symbol_info != none and
                            entry.symbol_info.storage_id == id {
                        nestiteminfo = entry
                        break
                    }
                }
                var is_nested_multiple_layers = no
                for entry in search_in.nested_structs_unions_list {
                    if entry == nestiteminfo {
                        continue
                    }
                    if entry.contains_storage_id(id) {
                        is_nested_multiple_layers = yes
                        break
                    }
                }
                if is_nested_multiple_layers {
                    continue
                }
                var symbol_info = search_in.id_to_symbol_map[id]
                if symbol_info.kind == st_scope.SINFO_FUNCATTR {
                    continue
                }
                var_attr_queue.add([
                    symbol_info.storage_id,
                    symbol_info.name,
                    if nestiteminfo == none (symbol_info.typeref_expr)
                        else (none),
                    imr_parent, nestiteminfo,
                ])
            }
            var_attr_queue.sort(by=1)

            if var_attr_queue.len == 0 {
                return later
            }
            var item = var_attr_queue.pop_at(1)
            var _unused = handle_item(
                item[1], item[2], item[3], item[4], item[5]
            ) later:

            await _unused
            if var_attr_queue.len == 0 {
                return later
            }
            var item = var_attr_queue.pop_at(1)
            var _unused = handle_item(
                item[1], item[2], item[3], item[4], item[5]
            ) later repeat
        }

        result_insts.add(block_item)
        handle_container() later:

        return result_insts
    }
    if node.kind == ast.N_STMT_IF {
        var result_insts = []

        var previous_clauses_unentered_ref = none

        var branches_count = 0
        var queue = []
        for clause in node.subexprs {
            branches_count += 1
            queue.add(clause)
        }
        if branches_count > 1 {
            previous_clauses_unentered_ref =
                get_new_temp_storage_ref(
                    node, imr_parents=imr_parents,
                    func_imr_parent=func_imr_parent,
                    file_imr_parent=file_imr_parent,
                    project_file=project_file,
                    is_moose64=is_moose64, msgs=msgs,
                )
            result_insts.add(new IMRSetLit(
                yes, previous_clauses_unentered_ref,
                literal_kind=ast_expr.LK_NORMAL
            ))
        }

        var first_clause = yes
        var clause_idx = 0
        var clauses_insts = []
        var clauses_refs = []
        var clauses_childinsts = []
        func process_item(item) {
            clause_idx += 1
            if result_insts == none {
                return later none
            }
            func extract_clause {
                assert(clauses_insts.len == clause_idx - 1)
                if item.is_else {
                    var else_tmp_rf = get_new_temp_storage_ref(
                        item, imr_parents=imr_parents,
                        func_imr_parent=func_imr_parent,
                        file_imr_parent=file_imr_parent,
                        is_moose64=is_moose64, msgs=msgs,
                    )
                    clauses_refs.add(else_tmp_rf)
                    clauses_insts.add([])
                    return later
                }
                var cls_result = generate_imr_for_expr(
                    item.subexprs[1],
                    imr_parents=imr_parents + [node],
                    func_imr_parent=func_imr_parent,
                    file_imr_parent=file_imr_parent,
                    project_file=project_file,
                    is_moose64=is_moose64, msgs=msgs,
                ) later:

                await cls_result
                if cls_result == none {
                    result_insts = none
                    first_clause = no
                    return later
                }
                clauses_refs.add(
                    cls_result.storage_ref
                )
                clauses_insts.add(
                    cls_result.instructions
                )
                return later
            }
            extract_clause() later:

            if result_insts == none {
                return later
            }
            var insts = generate_imr_for_stmts(
                item.subblocks[1],
                imr_parents=imr_parents + [
                    node, item
                ],
                func_imr_parent=func_imr_parent,
                file_imr_parent=file_imr_parent,
                project_file=project_file,
                is_moose64=is_moose64, msgs=msgs,
            ) later:

            await insts
            if insts == none {
                result_insts = none
                first_clause = no
                return later
            }
            assert(typename(insts) == "list")
            if not first_clause {
                assert(branches_count > 1)
                assert(clauses_childinsts.len >= 1)
                var currentidx = clauses_insts.len
                var old_clause_cond_clauses = clauses_insts[currentidx]
                new_clause_precond = new IMRCond(
                    evaluated_cond_ref=previous_clauses_unentered_ref
                )
                if item.is_else {
                    assert(old_clause_cond_clauses == none or
                        old_clause_cond_clauses.len == 0)
                    var tmp_ref = clauses_refs[currentidx]
                    new_clause_precond.instructions = [
                        new IMRSetLit(
                            yes, clauses_refs[currentidx],
                            literal_kind=ast_expr.LK_NORMAL
                        )
                    ]
                } else {
                    new_clause_precond.instructions =
                        old_clause_cond_clauses
                }
                clauses_insts[currentidx] = [new IMRSetLit(
                    no, clauses_refs[currentidx],
                    literal_kind=ast_expr.LK_NORMAL
                ), new_clause_precond]
            }
            first_clause = no
            if clause_idx < branches_count and
                    branches_count > 1 {
                clauses_childinsts.add([new IMRSetLit(
                    no, previous_clauses_unentered_ref,
                    literal_kind=ast_expr.LK_NORMAL
                )] + insts)
            } else {
                clauses_childinsts.add(insts)
            }
        }
        func process_queue {
            if queue.len == 0 {
                return later
            }
            var result = process_item(queue.pop_at(1))
            later:

            await result
            if queue.len == 0 {
                return later
            }
            result = process_item(queue.pop_at(1))
            later repeat
        }
        process_queue()
        later:

        var i = 1
        while i <= clauses_insts.len {
            result_insts += clauses_insts[i]
            var cond = new IMRCond(
                evaluated_cond_ref=clauses_refs[i]
            )
            cond.instructions = clauses_childinsts[i]
            result_insts.add(cond)
            i += 1
        }
        return result_insts
    }
    if node.kind == ast.N_STMT_ASSIGN {
        var result_insts = []
        var queue = []
        var i = 1
        while i <= node.subexprs.len / 2 {
            queue.add([node.subexprs[i * 2 - 1],
                node.subexprs[i * 2]])
            i += 1
        }
        func process_queue_item(item) {
            var right_hand_result = generate_imr_for_expr(
                item[2],
                imr_parents=imr_parents + [node],
                func_imr_parent=func_imr_parent,
                file_imr_parent=file_imr_parent,
                project_file=project_file,
                is_moose64=is_moose64, msgs=msgs,
            ) later:

            await right_hand_result
            if right_hand_result == none {
                result_insts = none
                return later
            }
            var math_assign_token = none
            if node.assign_token.kind == token.T_MATHASSIGN {
                var t_str = node.assign_token.str
                if not t_str.ends("=") {
                    throw new ValueError("Encountered unsupported "
                        "type of math assign.")
                }
                math_assign_token = new token.Token(
                    t_str.sub(1, t_str.len - 1),
                    token.T_MATH,
                    node.assign_token.line,
                    node.assign_token.col,
                )
            }
            var left_hand_node = item[1]
            func try_handle_set_idx {
                if left_hand_node.kind != ast.N_EXPR_BINOP or
                        left_hand_node.optoken.str != "[" or
                        left_hand_node.subexprs.len < 2 {
                    return later no
                }
                var container_result = generate_imr_for_expr(
                    left_hand_node.subexprs[1],
                    imr_parents=imr_parents + [
                        node, left_hand_node],
                    func_imr_parent=func_imr_parent,
                    file_imr_parent=file_imr_parent,
                    project_file=project_file,
                    is_moose64=is_moose64, msgs=msgs,
                ) later:

                await container_result
                var idx_result = generate_imr_for_expr(
                    left_hand_node.subexprs[2],
                    imr_parents=imr_parents + [
                        node, left_hand_node],
                    func_imr_parent=func_imr_parent,
                    file_imr_parent=file_imr_parent,
                    project_file=project_file,
                    is_moose64=is_moose64, msgs=msgs,
                ) later:

                await idx_result
                if container_result == none or idx_result == none {
                    result_insts = none
                    return later yes
                }
                if node.assign_token.kind == token.T_ASSIGN {
                    result_insts += right_hand_result.instructions
                    result_insts.add(IMRSetIdx(
                        target_and_container_storage_ref=
                            container_result.storage_ref,
                        index_storage_ref=
                            idx_result.storage_ref,
                        value_storage_ref=
                            right_hand_result.storage_ref,
                    ))
                    return later yes
                } elseif math_assign_token != none {
                    var tmp_ref = get_new_temp_storage_ref(
                        node, imr_parents=imr_parents,
                        func_imr_parent=func_imr_parent,
                        file_imr_parent=file_imr_parent,
                        project_file=project_file,
                        is_moose64=is_moose64, msgs=msgs,
                    )
                    result_insts.add(IMRGetIdx(
                        container_storage_ref=
                            container_result.storage_ref,
                        index_storage_ref=
                            idx_result.storage_ref,
                        target_storage_ref=tmp_ref,
                    ))
                    result_insts.add(IMRApplyOp(
                        math_assign_token,
                        operand_1_storage_ref=tmp_ref,
                        operand_2_storage_ref=
                            right_hand_result.storage_ref,
                        target_storage_ref=tmp_ref,
                        is_binary=yes,
                    ))
                    result_insts.add(IMRSetIdx(
                        target_and_container_storage_ref=
                            container_result.storage_ref,
                        index_storage_ref=
                            idx_result.storage_ref,
                        value_storage_ref=tmp_ref,
                    ))
                    return later yes
                } else {
                    throw new ValueError("Encountered unsupported "
                        "type of assign.")
                }
            }
            func try_handle_set_attr {
                if left_hand_node.kind != ast.N_EXPR_BINOP or
                        left_hand_node.optoken.str != "." or
                        left_hand_node.subexprs.len < 2 or
                        left_hand_node.subexprs[2].kind !=
                            ast.N_EXPR_IDREF {
                    return later no
                }
                var attr_name = left_hand_node.subexprs[2].label
                var obj_result = generate_imr_for_expr(
                    left_hand_node.subexprs[1],
                    imr_parents=imr_parents + [
                        node, left_hand_node],
                    func_imr_parent=func_imr_parent,
                    file_imr_parent=file_imr_parent,
                    project_file=project_file,
                    is_moose64=is_moose64, msgs=msgs,
                ) later:

                await obj_result
                if obj_result == none {
                    result_insts = none
                    return later yes
                }
                if node.assign_token.kind == token.T_ASSIGN {
                    result_insts += right_hand_result.instructions
                    result_insts.add(IMRSetAttr(
                        target_and_obj_storage_ref=
                            obj_result.storage_ref,
                        attr_name=attr_name,
                        value_storage_ref=
                            right_hand_result.storage_ref,
                    ))
                    return later yes
                } elseif math_assign_token != none {
                    var tmp_ref = get_new_temp_storage_ref(
                        node, imr_parents=imr_parents,
                        func_imr_parent=func_imr_parent,
                        file_imr_parent=file_imr_parent,
                        is_moose64=is_moose64, msgs=msgs,
                    )
                    result_insts.add(IMRGetAttr(
                        obj_storage_ref=
                            obj_result.storage_ref,
                        attr_name=attr_name,
                        target_storage_ref=tmp_ref,
                    ))
                    result_insts.add(IMRApplyOp(
                        math_assign_token,
                        operand_1_storage_ref=tmp_ref,
                        operand_2_storage_ref=
                            right_hand_result.storage_ref,
                        target_storage_ref=tmp_ref,
                        is_binary=yes,
                    ))
                    result_insts.add(IMRSetAttr(
                        target_and_obj_storage_ref=
                            obj_result.storage_ref,
                        attr_name=attr_name,
                        value_storage_ref=tmp_ref,
                    ))
                    return later yes
                } else {
                    throw new ValueError("Encountered unsupported "
                        "type of assign.")
                }
            }

            # Try to handle the special set index case:
            var success_idx = try_handle_set_idx() later:

            await success_idx
            if success_idx {
                return later
            }
            # Try to handle the special set attr case:
            var success_attr = try_handle_set_attr() later:

            await success_attr
            if success_attr {
                return later
            }

            # If we arrive here, it must be a regular assign
            # that isn't a set index or set attr:
            if left_hand_node.kind != ast.N_EXPR_IDREF or
                    left_hand_node.ref == none {
                return later
            }
            if result_insts != none and
                    right_hand_result != none {
                result_insts += right_hand_result.instructions
                if node.assign_token.kind == token.T_ASSIGN {
                    result_insts.add(new IMRMove(
                        right_hand_result.storage_ref,
                        left_hand_node.ref,
                    ))
                } elseif math_assign_token != none {
                    result_insts.add(new IMRApplyOp(
                        math_assign_token,
                        operand_1_storage_ref=
                            left_hand_node.ref,
                        operand_2_storage_ref=
                            right_hand_result.storage_ref,
                        target_storage_ref=
                            left_hand_node.ref,
                        is_binary=yes,
                    ))
                } else {
                    throw new ValueError("Encountered unsupported "
                        "type of assign.")
                }
            } else {
                result_insts = none
                return later yes
            }
        }
        if queue.len == 0 or result_insts == none {
            return later result_insts
        }
        var _unused = process_queue_item(queue.pop_at(1))
        later:

        await _unused
        if queue.len == 0 or result_insts == none {
            return later result_insts
        }
        _unused = process_queue_item(queue.pop_at(1))
        later repeat
    }
    return later none
}

func generate_imr_for_stmts(
        nodes, imr_parents=[],
        func_imr_parent=none,
        file_imr_parent=none,
        project_file=none,
        is_moose64=no, msgs=none,
        ) {
    var result = []
    var queue = nodes.copy()
    if queue.len == 0 {
        return later result
    }
    var item = queue.pop_at(1)
    var inner_result = generate_imr_for_stmt(
        item, imr_parents=imr_parents,
        func_imr_parent=func_imr_parent,
        file_imr_parent=file_imr_parent,
        project_file=project_file,
        is_moose64=is_moose64, msgs=msgs,
    ) later:

    await inner_result
    if inner_result != none {
        if typename(inner_result) == "list" {
            result += inner_result
        } else {
            result.add(inner_result)
        }
    }
    if queue.len == 0 {
        return later result
    }
    var item = queue.pop_at(1)
    var inner_result = generate_imr_for_stmt(
        item, imr_parents=imr_parents,
        func_imr_parent=func_imr_parent,
        file_imr_parent=file_imr_parent,
        project_file=project_file,
        is_moose64=is_moose64, msgs=msgs,
    ) later repeat
}

func generate_imr_for_file(pfile, is_moose64=no, msgs=none) {
    const program_name =
        if is_moose64 ("moosec") else ("horsec")
    var result = new IMRForFile()
    result.project_file = pfile

    pfile.ensure_ast() later:

    var _func_stmt_to_imr_func_map = {->}

    func get_imr_node_for_func(node) {
        if not {ast.N_STMT_FUNC,
                ast.N_STMT_FUNCEXTEND}.has(
                    node.kind) {
            return none
        }

        if not _func_stmt_to_imr_func_map.has(
                node) {
            var item = result.find_global_func_by_label(
                node.label,
                type_path=node.type_path,
            )
            _func_stmt_to_imr_func_map[
                node
            ] = item
        }
        return _func_stmt_to_imr_func_map[
            node
        ]
    }

    func collect_funcs(node, parents) {
        var parent = if parents.len > 0
            (parents[parents.len]) else (none)
        if node.damaged {
            return later node
        }
        if node.kind == ast.N_STMT_FUNC or
                node.kind == ast.N_STMT_FUNCEXTEND {
            var is_extend =
                node.kind == ast.N_STMT_FUNCEXTEND
            var func_scope = node.func_scope
            assert(func_scope != none)
            var block = none
            if node.type_path != none and
                    node.type_path.len > 0 {
                assert(func_scope.is_type_attr)
                var type_id =
                    func_scope.owning_type_storage_id
                var attr_id =
                    func_scope.owning_type_scope.
                        name_to_symbol_map[
                            node.label
                        ].storage_id
                if type_id == none or attr_id == none {
                    var node_str = node.as_str()
                    print(program_name + ": error: "
                        "Found invalid func node with "
                        "invalid storage. pfile=" +
                        pfile.as_str() + " "
                        "label=" + textfmt.as_escaped_code_string(
                            node.label) + " "
                        "node=" +
                        node_str.sub(1, 100) +
                        "... "
                        "type_id=" + type_id.as_str() + " "
                        "attr_id=" + attr_id.as_str())
                    throw new RuntimeError(
                        "Internal error, encountered func "
                        "node with broken storage."
                    )
                }
                block = new IMRFuncBlock(
                    func_scope, node.label,
                    new st_ref.StorageRef(
                        st_ref.ST_GLOBALATTR,
                        [type_id, attr_id]),
                    type_path=node.type_path,
                    is_extend=is_extend,
                )
            } else {
                block = new IMRFuncBlock(
                    func_scope, node.label,
                    new st_ref.StorageRef(
                        st_ref.ST_GLOBAL,
                        func_scope.storage_id
                    ),
                    is_extend=is_extend,
                )
            }
            result.blocks.add(block)
            _func_stmt_to_imr_func_map[node] = block
        }
        return later node
    }
    var success = ast_transform.visit_ast_tree(
        pfile.ast, collect_funcs,
        pass_func_boundaries=yes,
        parent_chain=yes, backward=no,
    ) later:

    await success
    if not success {
        assert(msg.msgs_contain_error(msgs))
        return result
    }
    assert(success == yes)

    func collect_func_and_type_contents(node, parents) {
        var parent = if parents.len > 0
            (parents[parents.len]) else (none)
        if node.damaged {
            return later node
        }
        if (node.kind == ast.N_STMT_TYPE or
                node.kind == ast.N_STMT_STRUCT) and
                parent == none {
            var stmts = generate_imr_for_stmt(
                node,
                imr_parents=[],
                func_imr_parent=none,
                file_imr_parent=result,
                project_file=pfile,
                is_moose64=is_moose64,
                msgs=msgs,
            ) later:

            await stmts
            if stmts.len != 1 or
                    stmts[1].kind != IMR_BLOCK_STRUCTORTYPE {
                throw new RuntimeError(
                    "Unexpectedly didn't get a single "
                    "IMR_BLOCK_STRUCTORTYPE when processing "
                    "type or struct."
                )
            }
            result.blocks += stmts

            return later node
        }
        if node.kind == ast.N_STMT_FUNC or
                node.kind == ast.N_STMT_FUNCEXTEND {
            var imr_node = get_imr_node_for_func(node)
            assert(imr_node != none)

            var stmts = generate_imr_for_stmts(
                node.subblocks[1],
                imr_parents=[imr_node],
                func_imr_parent=imr_node,
                file_imr_parent=result,
                project_file=pfile,
                is_moose64=is_moose64,
                msgs=msgs,
            ) later:

            await stmts
            imr_node.instructions += stmts
            return later node
        }
        return later node
    }
    var success = ast_transform.visit_ast_tree(
        pfile.ast, collect_func_and_type_contents,
        pass_func_boundaries=yes,
        parent_chain=yes, backward=no,
    ) later:

    await success
    if not success {
        assert(msg.msgs_contain_error(msgs))
        return result
    }
    assert(success == yes)

    return later result
}

func generate_imr_for_project(
        project,
        build_options=none,
        msgs=none, is_moose64=no, debug=no,
        ) {
    is_moose64 =
        is_moose64 or (build_options != none and
            build_options.is_moose64)
    const program_name =
        if is_moose64 ("moosec") else ("horsec")
    var boptions = build_options
    var imrresult = new IMRTranslationResult()

    if boptions.print_stages {
        clog.log_or_print(
            new msg.FileMsg(
                "stage imr: " +
                "Launched on project=" +
                project.as_str() + " "
                "[t=" + time.ticks().as_str() + "]",
                kind=msg.M_INFO,
            ),
            msgs=imrresult.msgs, program_name=program_name,
            force_print=not boptions.format_output_for_scripts,
        )
    }
    if debug {
        print(program_name + ": debug: "
            "generate_imr_for_project(): "
            "Starting per file loop for "
            "project=" + project.as_str() + ", "
            "is_moose64=" +
                is_moose64.as_str())
    }

    func process_file(pfile) {
        if boptions.print_stages {
            clog.log_or_print(
                new msg.FileMsg(
                    "stage imr: " +
                    "Processing file pfile=" +
                    pfile.as_str() + " "
                    "[t=" + time.ticks().as_str() + "]",
                    kind=msg.M_INFO,
                ),
                msgs=imrresult.msgs,
                program_name=program_name,
                force_print=not boptions.format_output_for_scripts,
            )
        }
        var result = generate_imr_for_file(
            pfile, is_moose64=is_moose64)
        later:

        await result
        return later yes
    }
    var result = project.do_for_all_files(
        process_file
    ) later:

    await result
    assert(result == yes or result == no)

    return later no
}

