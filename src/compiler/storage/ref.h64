## @module compiler.storage.ref
# Copyright (c) 2023-2025, ellie/@ell1e & Horse64's contributors
# (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.storage.scope as st_scope

enum StorageKind {
    ST_LOCAL,
    ST_ARG,
    ST_GLOBALATTR,
    ST_CCAPTURE,
    ST_GLOBAL,
    ST_NUMLITERAL,
    ST_CEXT,  # Horse64 C extensions, compiler.cext assigns them.
    ST_MCREF,  # Moose64 C refs, compiler.moose64.c_importer assigns them.
    ST_SELF,
    ST_BASE,
    ST_EXTENDED,
    _ST_ATTRERROR,  # Internally used when access causes AttributeError.
    _ST_RESOLVELATER,  # Internally used when it can't be resolved yet.
}

type StorageRef {
    var kind
    var id
}

func StorageRef.as_str {
    if self.kind == ST_LOCAL {
        return "L" + self.id.as_str()
    } elseif self.kind == ST_GLOBALATTR {
        assert(typename(self.id) == "list")
        assert(self.id.len == 2)
        return "GLA" + self.id[1].as_str() + "_" + self.id[2].as_str()
    } elseif self.kind == ST_CCAPTURE {
        return "CC" + self.id.as_str()
    } elseif self.kind == ST_ARG {
        return "ARG" + self.id.as_str()
    } elseif self.kind == ST_GLOBAL {
        return "G" + self.id.as_str()
    } elseif self.kind == ST_NUMLITERAL {
        return "NUM(" + self.id.as_str() + ")"
    } elseif self.kind == ST_CEXT {
        return "CX" + self.id.as_str()
    } elseif self.kind == ST_MCREF {
        return "MCRF" + self.id.as_str()
    } elseif self.kind == ST_SELF {
        return "SELF"
    } elseif self.kind == ST_BASE {
        return "BASE"
    } elseif self.kind == ST_EXTENDED {
        return "EXTD"
    } elseif self.kind == _ST_ATTRERROR {
        return "<_ST_ATTRERROR !! SHOULD NEVER OCCUR IN BYTECODE>"
    } elseif self.kind == _ST_RESOLVELATER {
        return "<_ST_RESOLVELATER !! SHOULD NEVER OCCUR IN BYTECODE>"
    }
    throw new RuntimeError("Invalid StorageRef with "
        "incorrect kind set.")
}

func StorageRef.init(kind, id) {
    self.kind = kind
    self.id = id
}

func StorageRef.copy {
    return new StorageRef(self.kind, self.id)
}

func StorageRef.alike(other_ref) {
    if not has_attr(other_ref, "kind") or
            not has_attr(other_ref, "id") {
        return no
    }
    return other_ref.kind == self.kind and
        other_ref.id == self.id
}

func ref_to_item_name(project_file, fref) {
    if fref != none and fref.kind == ST_GLOBAL {
        var entry = st_scope.global_id_to_item(
            project_file.project, fref.id)
        if {ast.N_STMT_FUNC, ast.N_STMT_STRUCT,
                ast.N_STMT_TYPE}.has(entry.kind) {
            return entry.label
        }
        return none
    } elseif fref != none and fref.kind == ST_GLOBALATTR {
        var entry = st_scope.global_id_to_item(
            project_file.project, fref.id[1])
        assert(typename(entry) != "list")
        assert({ast.N_STMT_STRUCT, ast.N_STMT_TYPE,
            ast.N_STMT_ENUM}.has(entry.kind))
        var anscope = entry.attr_names_scope
        assert(anscope != none)
        if anscope.is_enum {
            # FIXME: possibly implement this some day.
            return none
        } else {
            assert(anscope.is_type or anscope.is_struct)
            var symbol = anscope.id_to_symbol_map[
                fref.id[2]]
            assert(symbol.storage_id == fref.id[2])
            for name in anscope.name_to_symbol_map {
                if anscope.name_to_symbol_map[name].storage_id ==
                        symbol.storage_id {
                    return name
                }
            }
            throw new RuntimeError("Global attr not found "
                "in AttrNamesScope symbol map. This shouldn't "
                "happen.")
        }
    } elseif fref != none and fref.kind == ST_MCREF {
        if not project_file.project.storage_id_to_csymbol_map.has(
                fref.id) {
            if not project_file.project.builtin_syms_storage.
                    storage_id_to_item_map.has(
                    fref.id) {
                return none
            }
            var st_item = project_file.project.builtin_syms_storage.
                storage_id_to_item_map[fref.id]
            return st_item.symbol_name
        }
        var csymbol = project_file.project.storage_id_to_csymbol_map[
            fref.id]
        return csymbol.symbol_name
    } elseif fref != none and fref.kind == ST_CEXT {
        var storage_id = fref.id
        if not project.storage_id_to_citem_map.has(storage_id) {
            if project.cext_builtins_storage_id_to_name_map.has(
                    storage_id) {
                return project.cext_builtins_storage_id_to_name_map[
                    storage_id
                ]
            }
            return none
        }
        var citem = project.storage_id_to_citem_map[storage_id]
        return citem.name
    }
    return none
}

func ref_is_global_func_def(project_file, storage_ref) {
    if storage_ref.kind == ST_GLOBAL {
        var entry = st_scope.global_id_to_item(
            project_file.project, storage_ref.id)
        assert(entry != none)
        return entry.kind == ast.N_STMT_FUNC
    } elseif storage_ref.kind == ST_GLOBALATTR {
        var entry = st_scope.global_id_to_item(
            project_file.project, storage_ref.id[1])
        assert(typename(entry) != "list")
        assert({ast.N_STMT_STRUCT, ast.N_STMT_TYPE,
            ast.N_STMT_ENUM}.has(entry.kind))
        var anscope = entry.attr_names_scope
        assert(anscope != none)
        if anscope.is_enum {
            throw new RuntimeError("Not implemented.")
        } else {
            assert(anscope.is_type or anscope.is_struct)
            var inner_entry = anscope.id_to_symbol_map[storage_ref.id[2]]
            assert(inner_entry.storage_id == storage_ref.id[2])
            return inner_entry.typeref_expr != none and
                inner_entry.typeref_expr.is_func_ref
        }
    } elseif storage_ref.kind == ST_LOCAL {
        return no
    } elseif storage_ref.kind == ST_ARG {
        return no
    }
    return no
}

func ref_to_corresponding_import_stmt_node(
        project_file, storage_ref, node=none) {
    var target_project_file = none
    var target_cext_modname = none
    var target_cext_pkgname = none
    var target_c_import_path = none
    if node == none and {ST_SELF, ST_EXTENDED,
            ST_BASE}.has(storage_ref.kind) {
        throw ValueError("Can't find import statement "
            "for this ref without the corresponding node "
            "in the AST that has this reference.")
    }
    if storage_ref.kind == ST_GLOBAL or
            storage_ref.kind == ST_GLOBALATTR {
        var global_id_target = none
        if storage_ref.kind == ST_GLOBAL {
            global_id_target = storage_ref.id
        } else {
            global_id_target = storage_ref.id[1]
        }
        var target_global_scope =
            project_file.project.storage_id_to_global_scope_map[
                global_id_target
            ]
        target_project_file = target_global_scope.
            known_to_be_in_project_file
        assert(target_project_file != none)
    } elseif {ST_ARG, ST_LOCAL, ST_CCAPTURE, ST_NUMLITERAL,
            }.has(
            storage_ref.kind
            ) {
        # This kind of target never needs importing.
        return none
    } elseif storage_ref.kind == ST_MCREF {
        if not project_file.project.storage_id_to_csymbol_map.has(
                storage_ref.id) {
            if project_file.project.builtin_syms_storage.
                    storage_id_to_item_map.has(
                    storage_ref.id) {
                # Builtins never need any import.
                return none
            }
            throw new ValueError("M64 C ref doesn't reference "
                "any known item.")
        }
        var csymbol = project_file.project.storage_id_to_csymbol_map[
            storage_ref.id]
        var c_import_path = csymbol.c_import_path
        if c_import_path == none {
            throw new RuntimeError("Encountered invalid C symbol "
                "with no C import path set.")
        }
        target_c_import_path = c_import_path
    } elseif storage_ref.kind == ST_CEXT {
        var project = project_file.project
        var storage_id = storage_ref.id
        if not project.storage_id_to_citem_map.has(storage_id) {
            if not project.cext_builtins_storage_id_to_name_map.has(
                    storage_id) {
                throw new ValueError("Cext storage id doesn't "
                    "reference any known item.")
            }
            # If we arrive here, then this is builtin outside of
            # any modules, so it doesn't need to be imported.
            return none
        }
        var citem = project.storage_id_to_citem_map[storage_id]
        target_cext_modname = citem.module_name
        target_cext_pkgname = citem.package_name
    } else {
        throw RuntimeError("Not implemented for "
            "this storage ref variant.")
    }
    for name in project_file.global_scope.
            name_to_stmt_map {
        var entry = project_file.global_scope.
            name_to_stmt_map[name]
        if typename(entry) != "list" or
                entry.len == 0 or
                not {ast.N_STMT_C_IMPORT, ast.N_STMT_IMPORT}.has(
                    entry[1].kind
                ) {
            continue
        }
        for imp_stmt in entry {
            if target_project_file != none and
                    imp_stmt.kind == ast.N_STMT_IMPORT and
                    imp_stmt.project_file == target_project_file {
                return imp_stmt
            }
            if target_cext_modname != none and
                    imp_stmt.kind == ast.N_STMT_IMPORT and
                    imp_stmt.cext_modname == target_cext_modname and
                    imp_stmt.cext_pkgname == target_cext_modname {
                return imp_stmt
            }
            if target_c_import_path != none and
                    import_stmt.kind == ast.N_STMT_CIMPORT {
                for ipath in import_stmt.file_paths {
                    if path.normalize(ipath) == target_c_import_path {
                        return import_stmt
                    }
                }
            }
        }
    }
    return none
}

func ref_to_symbol_info(
        storage_ref, node=none,
        project=none,
        is_moose64=no, debug=no
        ) {
    var dbg_prefix = ""
    if debug {
        if is_moose64 {
            dbg_prefix = "moosec: debug: "
                "ref_to_symbol_info():"
        } else {
            dbg_prefix = "horsec: debug: "
                "ref_to_symbol_info():"
        }
    }
    if storage_ref.kind == ST_GLOBAL {
        if debug {
            print(dbg_prefix + " Trying to resolve global "
                "id=" + storage_ref.id.as_str() + " "
                "project=" + project.as_str())
        }
        if project == none {
            return none
        }
        var entry = st_scope.global_id_to_item(
            project, storage_ref.id)
        assert(entry != none)
        if typename(entry.symbol_info) == "list" {
            for sym_info in entry.symbol_info {
                if sym_info.storage_id == storage_ref.id {
                    return sym_info
                }
            }
            return none
        } else {
            return entry.symbol_info
        }
    } elseif storage_ref.kind == ST_GLOBALATTR {
        if project == none {
            return none
        }
        var entry = st_scope.global_id_to_item(
            project, storage_ref.id[1])
        assert(typename(entry) != "list")
        assert({ast.N_STMT_STRUCT, ast.N_STMT_TYPE,
            ast.N_STMT_ENUM}.has(entry.kind))
        var anscope = entry.attr_names_scope
        assert(anscope != none)
        if anscope.is_enum {
            throw new RuntimeError("Not implemented.")
        } else {
            assert(anscope.is_type or anscope.is_struct)
            if not anscope.id_to_symbol_map.has(storage_ref.id[2]) {
                if debug {
                    print(dbg_prefix + " Unexpectedly failed "
                        "to find global attribute in respective "
                        "type or struct scope, " +
                        "anscope=" + anscope.as_str() + " "
                        "anscope.id_to_symbol_map=" +
                            anscope.id_to_symbol_map.as_str() + " "
                        "storage_ref=" + storage_ref.as_str()
                    )
                }
                return none
            }
            var inner_entry =
                anscope.id_to_symbol_map[storage_ref.id[2]]
            assert(inner_entry.storage_id == storage_ref.id[2])
            return inner_entry
        }
    } elseif storage_ref.kind == ST_LOCAL {
        if node == none or node.scope == none {
            return none
        }
        var func_scope = node.scope.func_scope
        var scope = node.scope
        while scope != none and scope.func_scope == func_scope {
            if not scope.storage_id_to_symbol_map.has(
                    storage_ref.id
                    ) {
                scope = scope.parent
                continue
            }
            var entry = scope.storage_id_to_symbol_map[
                storage_ref.id
            ]
            return entry
        }
    } elseif storage_ref.kind == ST_ARG {
        if node == none or node.scope == none {
            return none
        }
        var fscope = node.scope.func_scope
        if fscope == none {
            return none
        }
        var sinfolist = fscope.extended_final_symbol_info_list()
        assert(typename(sinfolist) == "list")
        if storage_ref.id < 0 or storage_ref.id > sinfolist.len {
            return none
        }
        var entry = sinfolist[storage_ref.id]
        return entry
    }
    return none
}

