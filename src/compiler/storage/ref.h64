## @module compiler.storage.ref
# Copyright (c) 2023-2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.storage.scope as st_scope

enum StorageKind {
    ST_LOCAL,
    ST_ARG,
    ST_CCAPTURE,
    ST_GLOBAL,
    ST_NUMLITERAL,
    ST_CEXT,  # Horse64 C extensions, compiler.cext assigns them.
    ST_MCREF,  # Moose64 C refs, compiler.moose64.c_importer assigns them.
    ST_SELF,
    ST_BASE,
    ST_EXTENDED,
}

type StorageRef {
    var kind
    var id
}

func StorageRef.as_str {
    if self.kind == ST_LOCAL {
        return "L" + self.id.as_str()
    } elseif self.kind == ST_CCAPTURE {
        return "CC" + self.id.as_str()
    } elseif self.kind == ST_ARG {
        return "ARG" + self.id.as_str()
    } elseif self.kind == ST_GLOBAL {
        return "G" + self.id.as_str()
    } elseif self.kind == ST_NUMLITERAL {
        return "NUM(" + self.id.as_str() + ")"
    } elseif self.kind == ST_CEXT {
        return "CX" + self.id.as_str()
    } elseif self.kind == ST_MCREF {
        return "MCREF" + self.id.as_str()
    } elseif self.kind == ST_SELF {
        return "SELF"
    } elseif self.kind == ST_BASE {
        return "BASE"
    }
    throw new RuntimeError("Invalid StorageRef with "
        "incorrect kind set.")
}

func StorageRef.init(kind, id) {
    self.kind = kind
    self.id = id
}

func StorageRef.copy {
    return new StorageRef(self.kind, self.id)
}

func StorageRef.alike(other_ref) {
    if not has_attr(other_ref, "kind") or
            not has_attr(other_ref, "id") {
        return no
    }
    return other_ref.kind == self.kind and
        other_ref.id == self.id
}

func ref_to_symbol_info(project_file, node, storage_ref) {
    if storage_ref.kind == ST_GLOBAL {
        if not project_file.global_scope.
                storage_id_to_entry.has(storage_ref.id) {
            return none
        }
        var entry = project_file.global_scope.
            storage_id_to_entry[storage_ref.id]
        if typename(entry.symbol_info) == "list" {
            for sym_info in entry.symbol_info {
                if sym_info.storage_id == storage_ref.id {
                    return sym_info
                }
            }
        } else {
            return entry.symbol_info
        }
    } elseif storage_ref.kind == ST_LOCAL  {
        if node.scope == none {
            return none
        }
        if not node.scope.storage_id_to_symbol_map.has(
                storage_ref.id
                ) {
            return none
        }
        var entry = node.scope.storage_id_to_symbol_map[
            storage_ref.id
        ]
        return entry
    } elseif storage_ref.kind == ST_ARG {
        return none
    }
    return none
}

