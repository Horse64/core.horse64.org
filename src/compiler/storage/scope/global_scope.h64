# @module compiler.storage.scope.global_scope
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.ast.enum_stmt as enum_stmt
import compiler.ast.func_stmt as func_stmt
import compiler.ast.type_stmt as type_stmt
import compiler.msg as msg
import compiler.storage.scope as storage_scope
import compiler.token as token

type GlobalScope {
    var name_to_stmt_map = {->}
    var storage_id_to_entry = {->}
}

func GlobalScope.as_str {
    var result = "GlobalScope<"
    var isfirst = yes
    for name in self.name_to_stmt_map {
        if not isfirst {
            result += "; "
        } else {
            isfirst = no
        }
        result += "name='" + name + "',kind="
        result += ast.NodeKind.num_label(
            if typename(self.name_to_stmt_map[name]) == "list"
                (self.name_to_stmt_map[name][1].kind) else
                (self.name_to_stmt_map[name].kind))
    }
    result += ">"
    return result
}

func GlobalScope.as_json_obj {
    var result = []
    for name in self.name_to_stmt_map {
        var entry = {"name"-> name}
        entry["kind"] = ast.NodeKind.num_label(
            if typename(self.name_to_stmt_map[name]) == "list"
                (self.name_to_stmt_map[name][1].kind) else
                (self.name_to_stmt_map[name].kind))
        result.add(entry)
    }
    return result
}

func GlobalScope.ensure_assigned_storage(msgs=none,
        project_file=none, debug_global_storage=no) {
    if self.storage_id_to_entry.len > 0 or
            self.name_to_stmt_map.len == 0 {
        return
    }
    var storage_num = 1
    if project_file != none and project_file.project != none {
        storage_num = project_file.project.
            last_global_storage_id + 1
    }
    for name in self.name_to_stmt_map {
        var value = self.name_to_stmt_map[name]
        if typename(value) == "list" {
            # Import entries have no storage or symbol info.
            continue
        } elseif not {ast.N_STMT_ENUMEXTEND, ast.N_STMT_TYPE,
                ast.N_STMT_TYPEEXTEND}.has(value.kind) {
            self.storage_id_to_entry[storage_num] = value
            var si = new storage_scope.SymbolInfo(name)
            si.def_line = value.line
            si.def_col = value.col
            si.storage_id = storage_num
            if debug_global_storage {
                print("compiler.storage.scope.global_scope: "
                    "GlobalScope.ensure_assigned_storage(): " +
                    "Assigning global storage id " +
                    storage_num.as_str() + " to global scope "
                    "item in file " +
                    project_file.source_uri.as_str() +
                    " with name '" + name + "'.")
            }
            value.symbol_info = si
            storage_num += 1
        }
    }
    if project_file != none and project_file.project != none {
        project_file.project.last_global_storage_id =
            storage_num - 1
    }
    # Now register enum values in the global scope too:
    var names_unchanged = self.name_to_stmt_map.keys()
    for name in names_unchanged {
        var value = self.name_to_stmt_map[name]
        if typename(value) == "list" or
                value.kind != ast.N_STMT_ENUM {
            continue
        }
        if value.type_or_enum_scope == none {
            continue
        }
        assert(value.type_or_enum_scope.is_enum)
        pos = 0
        for label in value.type_or_enum_scope.label_names {
            pos += 1
            if self.name_to_stmt_map.has(label) {
                if msgs != none {
                    var old_symbol = self.name_to_stmt_map[label]
                    if typename(old_symbol) == "list" {
                        old_symbol = old_symbol[1]
                    }
                    msgs.add(new msg.FileMsg(
                        "Unexpected duplicate name '" + label + "'"
                        ", name was already used in same "
                        "scope in statement in line " +
                        old_symbol.line.as_str() +
                        ", column " + old_symbol.col.as_str() + ".",
                        source_file=project_file,
                        line=value.line, col=value.col
                    ))
                }
                continue
            }
            var entry = new storage_scope.GlobalScopeEnumEntry()
            entry.enum_stmt_label = value.label
            var si = new storage_scope.SymbolInfo(label)
            si.def_line = value.line
            si.def_col = value.col
            si.storage_id = pos
            self.name_to_stmt_map[label] = entry
        }
    }
}

func GlobalScope.type_path_to_entry(tpath) {
    if typename(tpath) == "str" {
        tpath = tpath.split(".")
    }
    if not self.name_to_stmt_map.has(tpath[1]) {
        return none
    }
    # Handling of most things that aren't an import:
    if typename(self.name_to_stmt_map[tpath[1]]) != "list" {
        if tpath.len != 1 {
            return none
        }
        return self.name_to_stmt_map[tpath[1]]
    }
    # Handling of imports:
    for entry in self.name_to_stmt_map[tpath[1]] {
        assert(entry.kind == ast.N_STMT_IMPORT)
        if tpath.len == 1 and entry.renamed_as != none and
                (tpath.join(".") == entry.renamed_as or
                tpath.join(".").starts(entry.renamed_as + ".")) {
            if entry.project_file == none and
                    entry.cext_modname != none {
                return entry.cext_modname + "@" +
                    entry.cext_pkgname
            }
            return entry
        }
        if entry.module_path.len != tpath.len {
            continue
        }
        var mismatch = no
        var idx = 2
        while idx <= entry.module_path.len {
            if entry.module_path[idx] != tpath[idx] {
                mismatch = yes
                break
            }
            idx += 1
        }
        if not mismatch {
            return entry
        }
    }
    return none
}

func GlobalScope.type_path_to_project_file(tpath) {
    var entry = self.type_path_to_entry(tpath)
    if entry == none or
            entry.kind != ast.N_STMT_IMPORT {
        return none
    }
    return entry.project_file
}

func has_global_scope_duplicate(
        scope, stmt, name, msgs, project_file=none
        ) {
    if scope.name_to_stmt_map.has(name) {
        if typename(scope.name_to_stmt_map[name]) != "list" or
                stmt.kind != ast.N_STMT_IMPORT {
            var duplicate_stmt = scope.name_to_stmt_map[name]
            if typename(duplicate_stmt) == "list" {
                duplicate_stmt = duplicate_stmt[1]
            }
            msgs.add(new msg.FileMsg(
                "Unexpected duplicate name '" +
                name +
                "', name was already used "
                "in statement in line " +
                duplicate_stmt.line.as_str() +
                ", column " +
                duplicate_stmt.col.as_str() + ".",
                source_file=project_file,
                line=stmt.line, col=stmt.col,
            ))
            return yes
        }
    }
    return no
}

func get_statement_global_names(statement) {
    if statement.kind == ast.N_STMT_IMPORT {
        if statement.renamed_as != none {
            return [statement.renamed_as]
        }
        assert(statement.module_path.len > 0)
        return [statement.module_path[1]]
    } elseif statement.kind == ast.N_STMT_FUNC {
        if statement.type_path != none {
            return []
        }
        return [statement.label]
    } elseif statement.kind == ast.N_STMT_TYPE {
        return [statement.label]
    } elseif statement.kind == ast.N_STMT_ENUM {
        return [statement.label]
    } elseif statement.kind == ast.N_STMT_VAR {
        return statement.var_labels
    }
    return []
}

func process_toplevel_stmt(
        scope, statement, msgs,
        project_file=none, debug=no) {
    assert(statement != none)
    var names = get_statement_global_names(statement)
    if names.len == 0 {
        return
    }
    for name in names {
        if not has_global_scope_duplicate(
                scope, statement, name, msgs,
                project_file=project_file
                ) {
            if statement.kind == ast.N_STMT_IMPORT {
                if not scope.name_to_stmt_map.has(name) {
                    scope.name_to_stmt_map[name] = []
                }
                scope.name_to_stmt_map[name].add(statement.copy())
            } else {
                # Note: to avoid keeping the entire AST in memory
                # indirectly through this global scope, we make a
                # fake shallow stand-in node that only retains
                # the info we care about later.
                var stand_in_node = none
                if statement.kind == ast.N_STMT_ENUM {
                    stand_in_node = new enum_stmt.EnumStmt()
                } elseif statement.kind == ast.N_STMT_ENUMEXTEND {
                    stand_in_node = new enum_stmt.EnumExtendStmt()
                } elseif statement.kind == ast.N_STMT_TYPE {
                    stand_in_node = new type_stmt.TypeStmt()
                } elseif statement.kind == ast.N_STMT_TYPEEXTEND {
                    stand_in_node = new type_stmt.TypeExtendStmt()
                } elseif statement.kind == ast.N_STMT_FUNC {
                    stand_in_node = new func_stmt.FuncStmt()
                } else {
                    stand_in_node = new ast.StmtNode()
                }
                stand_in_node.kind = statement.kind
                stand_in_node.line = statement.line
                stand_in_node.col = statement.col
                scope.name_to_stmt_map[name] = stand_in_node
            }
        }
    }
}

