## @module compiler.storage.scope.global_scope
# Copyright (c) 2023-2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.ast.c_import_stmt as c_import_stmt
import compiler.ast.enum_stmt as enum_stmt
import compiler.ast.func_stmt as func_stmt
import compiler.ast.struct_or_union_stmt as struct_or_union_stmt
import compiler.ast.type_stmt as type_stmt
import compiler.ast.var_stmt as var_stmt
import compiler.msg as msg
import compiler.storage.ref as st_ref
import compiler.storage.scope as st_scope
import compiler.token as token
import compiler.typeref as typeref

import compiler.moose64.c_importer as c_importer

type GlobalScope {
    var name_to_stmt_map = {->}
    var storage_id_to_entry = {->}
}

func GlobalScope.as_str {
    var result = "GlobalScope<"
    var isfirst = yes
    for name in self.name_to_stmt_map {
        if not isfirst {
            result += "; "
        } else {
            isfirst = no
        }
        result += "name='" + name + "',kind="
        result += ast.NodeKind.num_label(
            if typename(self.name_to_stmt_map[name]) == "list"
                (self.name_to_stmt_map[name][1].kind) else
                (self.name_to_stmt_map[name].kind))
    }
    result += ">"
    return result
}

func GlobalScope.as_json_obj {
    var result = []
    for name in self.name_to_stmt_map {
        var entry = {"name"-> name}
        entry["kind"] = ast.NodeKind.num_label(
            if typename(self.name_to_stmt_map[name]) == "list"
                (self.name_to_stmt_map[name][1].kind) else
                (self.name_to_stmt_map[name].kind))
        result.add(entry)
    }
    return result
}

func GlobalScope.ensure_assigned_storage(
        msgs=none, project_file=none, is_moose64=no,
        debug_global_storage=no) {
    if self.storage_id_to_entry.len > 0 or
            self.name_to_stmt_map.len == 0 {
        return
    }

    var ast_tree = none
    if project_file != none and project_file.ast != none {
        ast_tree = project_file.ast
    }

    # Compute global storage for all values that don't have it yet:
    var storage_num = 1
    if project_file != none and project_file.project != none {
        storage_num = project_file.project.
            last_global_storage_id + 1
    }
    for name in self.name_to_stmt_map {
        var value = self.name_to_stmt_map[name]
        if typename(value) == "list" {
            # Import entries have no storage or symbol info.
            continue
        } elseif not {ast.N_STMT_ENUMEXTEND,
                ast.N_STMT_TYPEEXTEND}.has(value.kind) {
            assert(not self.storage_id_to_entry.has(storage_num))
            self.storage_id_to_entry[storage_num] = value
            if project_file != none and project_file.project != none {
                var pr = project_file.project
                assert(not pr.storage_id_to_entry.has(storage_num))
                pr.storage_id_to_entry[storage_num] = value
                pr.storage_id_to_project_file[storage_num] = project_file
            }
            var si = new st_scope.SymbolInfo(name)
            if value.kind == ast.N_STMT_FUNC {
                si.kind = st_scope.SINFO_FUNC
            } elseif value.kind == ast.N_STMT_TYPE {
                si.kind = st_scope.SINFO_TYPE
            } elseif value.kind == ast.N_STMT_STRUCT {
                si.kind = st_scope.SINFO_STRUCT
            } elseif value.kind == ast.N_STMT_ENUM {
                si.kind = st_scope.SINFO_ENUM
            }
            si.def_line = value.line
            si.def_col = value.col
            si.storage_id = storage_num
            if debug_global_storage {
                print("compiler.storage.scope.global_scope: "
                    "GlobalScope.ensure_assigned_storage(): " +
                    "Assigning global storage id " +
                    storage_num.as_str() + " to global scope "
                    "item in file " +
                    project_file.source_uri.as_str() +
                    " with name '" + name + "'.")
            }
            if value.kind == ast.N_STMT_VAR {
                if value.symbol_info == none {
                    value.symbol_info = []
                }
                value.symbol_info.add(si)
            } else {
                value.symbol_info = si
            }
            storage_num += 1
            if value.kind == ast.N_STMT_FUNC {
                si.typeref_expr =
                    typeref.create_typeref_from_func_node(
                        project_file, value
                    )
                si.typeref_expr.func_storage_ref = st_ref.StorageRef(
                    st_ref.ST_GLOBAL, si.storage_id
                )
            }
        }
    }
    if project_file != none and project_file.project != none {
        project_file.project.last_global_storage_id =
            storage_num - 1
    }

    # Now register enum values in the global scope too:
    var names_unchanged = self.name_to_stmt_map.keys()
    for name in names_unchanged {
        var value = self.name_to_stmt_map[name]
        if typename(value) == "list" or
                value.kind != ast.N_STMT_ENUM {
            continue
        }
        if value.attr_names_scope == none {
            continue
        }
        assert(value.attr_names_scope.is_enum)
        var pos = 0
        for label in value.attr_names_scope.label_names {
            pos += 1
            if self.name_to_stmt_map.has(label) {
                if msgs != none {
                    var old_symbol = self.name_to_stmt_map[label]
                    if typename(old_symbol) == "list" {
                        old_symbol = old_symbol[1]
                    }
                    msgs.add(new msg.FileMsg(
                        "Unexpected duplicate name '" + label + "'"
                        ", name was already used in same "
                        "scope in statement in line " +
                        old_symbol.line.as_str() +
                        ", column " + old_symbol.col.as_str() + ".",
                        source_file=project_file,
                        line=value.line, col=value.col
                    ))
                }
                continue
            }
            var entry = new st_scope.GlobalScopeEnumEntry()
            assert(value.label != none)
            entry.enum_stmt_label = value.label
            var si = new st_scope.SymbolInfo(label)
            si.def_line = value.line
            si.def_col = value.col
            si.storage_id = pos
            entry.symbol_info = si
            self.name_to_stmt_map[label] = entry
        }
    }

    # If an AST is available, transfer the symbol info over
    # to the original definitions:
    if project_file != none and ast_tree != none {
        self.finalize_gscope_with_ast_tree_info(
            project_file, ast_tree, msgs=msgs,
            is_moose64=is_moose64
        )
    }
}

func GlobalScope.finalize_gscope_with_ast_tree_info(
        project_file, ast_tree, msgs=none, is_moose64=no
        ) {
    for stmt in ast_tree.stmts {
        if {ast.N_STMT_FUNC, ast.N_STMT_STRUCT,
                ast.N_STMT_TYPE}.has(stmt.kind) {
            var lbl = stmt.label
            if not self.name_to_stmt_map.has(lbl) {
                if stmt.symbol_info == none and
                        stmt.kind == ast.N_STMT_FUNC and
                        stmt.type_path != none and
                        stmt.type_path.len > 0 {
                    assert(stmt.scope == none)
                    var anscope = project_file.
                        make_attr_names_scope_from_funcattr(
                            stmt, msgs=msgs, is_moose64=is_moose64,
                            def_project_file=project_file
                        )
                    if anscope == none {
                        # Note: error has already been emitted by
                        # make_attr_names_scope_from_funcattr().
                        continue
                    }
                    if anscope.name_to_symbol_map.has(lbl) {
                        if msgs == none {
                            throw new ValueError(
                                "Duplicate func attr"
                            )
                        }
                        msgs.add(new msg.FileMsg(
                            "Invalid func attribute "
                            "with duplicate name '" +
                            lbl +
                            "', already defined elsewhere.",
                            source_file=project_file,
                            line=stmt.line, col=stmt.col,
                        ))
                        continue
                    }
                    var symbol_info = new st_scope.SymbolInfo(lbl)
                    symbol_info.kind = st_scope.SINFO_FUNCATTR
                    symbol_info.def_line = stmt.line
                    symbol_info.def_col = stmt.col
                    symbol_info.def_file = project_file
                    symbol_info.storage_id =
                        anscope.name_to_symbol_map.len + 1
                    symbol_info.typeref_expr =
                        typeref.create_typeref_from_func_node(
                            project_file, stmt
                        )
                    symbol_info.func_storage_ref =
                        new st_ref.StorageRef(
                            st_ref.ST_GLOBALATTR,
                            [anscope.storage_id,
                             symbol_info.storage_id]
                        )
                    anscope.name_to_symbol_map[lbl] =
                        symbol_info
                    assert(not anscope.
                        id_to_symbol_map.has(lbl))
                    anscope.id_to_symbol_map[lbl] =
                        symbol_info.storage_id
                    stmt.symbol_info = symbol_info
                }
                continue
            }
            var si = self.name_to_stmt_map[lbl].symbol_info
            stmt.symbol_info = si
        } elseif stmt.kind == ast.N_STMT_VAR {
            if stmt.symbol_info == none {
                stmt.symbol_info = []
            }
            for lbl in stmt.var_labels {
                if not self.name_to_stmt_map.has(lbl) {
                    continue
                }

                var si_list = self.name_to_stmt_map[lbl].symbol_info
                assert(typename(si_list) == "list")
                var source_idx = none
                var i = 1
                while i <= si_list.len {
                    if si_list[i].name == lbl {
                        source_idx = i
                        break
                    }
                    i += 1
                }
                if source_idx == none {
                    continue
                }

                var target_idx = none
                i = 1
                while i <= stmt.symbol_info.len {
                    if stmt.symbol_info[i].name ==
                            si_list[source_idx].name {
                        stmt.symbol_info[i] = si_list[source_idx]
                        target_idx = i
                        break
                    }
                    i += 1
                }
                if not target_idx {
                    stmt.symbol_info.add(si_list[source_idx])
                }
            }
        }
    }
}

func GlobalScope.type_path_to_entry(tpath) {
    if typename(tpath) == "str" {
        tpath = tpath.split(".")
    }
    if tpath.len == 0 or
            not self.name_to_stmt_map.has(tpath[1]) {
        return none
    }
    # Handling of most things that aren't an import:
    if typename(self.name_to_stmt_map[tpath[1]]) != "list" {
        if tpath.len != 1 {
            return none
        }
        return self.name_to_stmt_map[tpath[1]]
    }

    # Handling of imports:
    var longest_match_len = -1
    var longest_match_entry = none
    for entry in self.name_to_stmt_map[tpath[1]] {
        assert(entry.kind == ast.N_STMT_IMPORT or
            entry.kind == ast.N_STMT_C_IMPORT)
        if tpath.len == 1 and entry.renamed_as != none and
                tpath[1] == entry.renamed_as {
            if entry.kind != ast.N_STMT_C_IMPORT and
                    entry.project_file == none and
                    entry.cext_modname != none {
                return (
                    entry.cext_modname + "@" +
                    entry.cext_pkgname
                )
            }
            return entry
        }
        if entry.kind == ast.N_STMT_C_IMPORT or
                entry.module_path.len != tpath.len {
            continue
        }
        var mismatch = no
        var idx = 2
        while idx <= entry.module_path.len {
            if entry.module_path[idx] != tpath[idx] {
                mismatch = yes
                break
            }
            idx += 1
        }
        if not mismatch {
            return entry
        }
    }
    return none
}

func GlobalScope.type_path_to_project_file(tpath) {
    var entry = self.type_path_to_entry(tpath)
    if entry == none or
            entry.kind != ast.N_STMT_IMPORT {
        return none
    }
    return entry.project_file
}

func has_global_scope_duplicate(
        scope, stmt, name, msgs, project_file=none,
        ignore_c_import_duplicates=yes
        ) {
    if scope.name_to_stmt_map.has(name) {
        if typename(scope.name_to_stmt_map[name]) != "list" or
                (stmt.kind != ast.N_STMT_IMPORT and
                stmt.kind != ast.N_STMT_C_IMPORT) {
            var duplicate_stmt = scope.name_to_stmt_map[name]
            if typename(duplicate_stmt) == "list" {
                duplicate_stmt = duplicate_stmt[1]
            }
            msgs.add(new msg.FileMsg(
                "Unexpected duplicate name '" +
                name +
                "', name was already used "
                "in statement in line " +
                duplicate_stmt.line.as_str() +
                ", column " +
                duplicate_stmt.col.as_str() + ".",
                source_file=project_file,
                line=stmt.line, col=stmt.col,
            ))
            return yes
        }
    }
    return no
}

func get_statement_global_names(statement) {
    if statement.kind == ast.N_STMT_IMPORT {
        if statement.renamed_as != none {
            return [statement.renamed_as]
        }
        assert(statement.module_path.len > 0)
        return [statement.module_path[1]]
    } elseif statement.kind == ast.N_STMT_C_IMPORT {
        if statement.renamed_as == none {
            assert(statement.has_damage())
            return []
        }
        return [statement.renamed_as]
    } elseif statement.kind == ast.N_STMT_FUNC {
        if statement.type_path != none {
            return []
        }
        return [statement.label]
    } elseif statement.kind == ast.N_STMT_TYPE {
        return [statement.label]
    } elseif statement.kind == ast.N_STMT_STRUCT {
        if statement.label != none {
            return [statement.label]
        }
        return []
    } elseif statement.kind == ast.N_STMT_ENUM {
        return [statement.label]
    } elseif statement.kind == ast.N_STMT_VAR {
        return statement.var_labels
    }
    return []
}

func process_toplevel_stmt(
        scope, statement, msgs,
        project_file=none, is_moose64=no,
        debug=no) {
    assert(statement != none)
    var names = get_statement_global_names(statement)
    if names.len == 0 {
        return later
    }
    var c_importer_queue = []
    var idx = 0
    for name in names {
        idx += 1
        if has_global_scope_duplicate(
                scope, statement, name, msgs,
                project_file=project_file
                ) {
            continue
        }
        if statement.kind == ast.N_STMT_IMPORT {
            if not scope.name_to_stmt_map.has(name) {
                scope.name_to_stmt_map[name] = []
            }
            scope.name_to_stmt_map[name].add(statement.copy())
        } elseif statement.kind == ast.N_STMT_C_IMPORT {
            var c_import_with_name = statement.copy()
            if not scope.name_to_stmt_map.has(name) {
                scope.name_to_stmt_map[name] = []
            }
            var was_merged = no
            for merge_candidate in
                    scope.name_to_stmt_map[name] {
                if merge_candidate.
                        does_import_same_module_as(c_import_with_name) {
                    merge_candidate.file_paths +=
                        c_import_with_name.file_paths
                    if merge_candidate.c_importer == none {
                        merge_candidate.c_importer =
                            new c_importer.CImportInfo()
                    }
                    c_importer_queue.add([merge_candidate.c_importer,
                        c_import_with_name.file_paths])
                    c_import_with_name = merge_candidate
                    was_merged = yes
                    break
                }
            }
            if not was_merged {
                if c_import_with_name.c_importer == none {
                    c_import_with_name.c_importer =
                        new c_importer.CImportInfo()
                }
                c_importer_queue.add([c_import_with_name.c_importer,
                    c_import_with_name.file_paths])
                scope.name_to_stmt_map[name].add(c_import_with_name)
            }
        } else {
            # Note: to avoid keeping the entire AST in memory
            # indirectly through this global scope, we make a
            # fake shallow stand-in node that only retains
            # the info we care about later.
            var stand_in_node = none
            if statement.kind == ast.N_STMT_ENUM {
                stand_in_node = new enum_stmt.EnumStmt()
                stand_in_node.label = statement.label
            } elseif statement.kind == ast.N_STMT_ENUMEXTEND {
                stand_in_node = new enum_stmt.EnumExtendStmt()
            } elseif statement.kind == ast.N_STMT_STRUCT {
                stand_in_node = new struct_or_union_stmt.StructStmt()
                stand_in_node.label = statement.label
            } elseif statement.kind == ast.N_STMT_STRUCTEXTEND {
                stand_in_node =
                    new struct_or_union_stmt.StructExtendStmt()
            } elseif statement.kind == ast.N_STMT_TYPE {
                stand_in_node = new type_stmt.TypeStmt()
                stand_in_node.label = statement.label
            } elseif statement.kind == ast.N_STMT_TYPEEXTEND {
                stand_in_node = new type_stmt.TypeExtendStmt()
            } elseif statement.kind == ast.N_STMT_FUNC {
                stand_in_node = new func_stmt.FuncStmt()
                stand_in_node.label = statement.label
            } elseif statement.kind == ast.N_STMT_VAR {
                stand_in_node = new var_stmt.VarStmt()
                stand_in_node.var_labels = [name]
                stand_in_node.subexprs.add(
                    statement.subexprs[idx]
                )
            } else {
                stand_in_node = new ast.StmtNode()
            }
            stand_in_node.kind = statement.kind
            stand_in_node.line = statement.line
            stand_in_node.col = statement.col
            scope.name_to_stmt_map[name] = stand_in_node
        }
    }

    # Actually load up the external headers for any outstanding
    # C imports (only used for moose64):

    if c_importer_queue.len == 0 {
        return later
    }
    var next_entry = c_importer_queue.pop()
    var result = next_entry[1].add_import_paths(next_entry[2])
    later:

    await result
    if c_importer_queue.len == 0 {
        return later
    }
    next_entry = c_importer_queue.pop()
    result = next_entry[1].add_import_paths(next_entry[2])
    later repeat
}

