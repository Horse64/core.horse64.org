# @module compiler.storage.scope
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.ast.enum_stmt as enum_stmt
import compiler.ast.func_stmt as func_stmt
import compiler.ast.transform as transform
import compiler.ast.type_stmt as type_stmt
import compiler.msg as msg
import compiler.project as project

type SymbolInfo {
    var name
    var storage_id
    var def_line, def_col, def_uri
    var value_node
}

func SymbolInfo.init(name) {
    self.name = name
}

type FuncScope {
    var last_inner_storage_id = 0
    var is_type_attr = no
    var is_later_func = no
    var storage_id = 0
    var owning_type_storage_id
    var parent
}

extend func_stmt.FuncStmt {
    var func_scope
}

type TypeScope {
    const is_enum = no
    var damaged = no
    var storage_id = none

    var node_map = {->}
    var name_to_symbol_map = {->}
    var base_key = none
    var label

    var base_global_id = none
    var base_cext_id = none
    var _base_escope_key = none
    var is_error = no

    var def_line, def_col, def_uri
}

type EnumScope {
    const is_enum = yes
    var damaged = no
    var storage_id = none

    var node_map = {->}
    var first_entry_pos
    var label_names = []
    var label_nums = []
    var label

    var def_line, def_col, def_uri
}

type LocalScope {
    var parent
    var name_to_symbol_map = {->}
    var storage_id_to_symbol_map = {->}
    var func_scope
}

type GlobalScopeEnumEntry {
    var is_enum_entry = yes
    var enum_stmt_label
    var symbol_info
}

func LocalScope.lookup(name) {
    if self.name_to_symbol_map.has(name) {
        return self.name_to_symbol_map[name]
    }
    if self.parent == none {
        return none
    }
    return self.parent.lookup(name)
}

func LocalScope.get_combined_names {
    var names = {}
    var scope = self
    while scope != none {
        names += scope.name_to_symbol_map.keys()
        scope = scope.parent
    }
    return names
}

extend ast.TreeNode {
    var scope
    var symbol_info
}

extend type_stmt.TypeStmt {
    var type_or_enum_scope
}

extend type_stmt.TypeExtendStmt {
    var type_or_enum_scope
}

extend enum_stmt.EnumStmt {
    var type_or_enum_scope
}

extend enum_stmt.EnumExtendStmt {
    var type_or_enum_scope
}

extend project.Project {
    var type_or_enum_scope_map = {->}

    var storage_id_to_global_scope_map = {->}

    var storage_id_to_escope_map = {->}
}

