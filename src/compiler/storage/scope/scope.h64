## @module compiler.storage.scope
# Copyright (c) 2023-2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.ast.enum_stmt as enum_stmt
import compiler.ast.func_stmt as func_stmt
import compiler.ast.struct_or_union_stmt as struct_or_union_stmt
import compiler.ast.transform as transform
import compiler.ast.type_stmt as type_stmt
import compiler.msg as msg
import compiler.project as project
import compiler.storage.ref as st_ref
import compiler.token as token

enum SymbolInfoKind {
    SINFO_VAR,
    SINFO_FUNC,
    SINFO_VARATTR,
    SINFO_FUNCATTR,
    SINFO_TYPE,
    SINFO_ENUM,
    SINFO_STRUCT,
}

type SymbolInfo {
    var name
    var kind = SINFO_VAR
    var is_closure_captured = no
    var is_ever_written_to = no
    var storage_id
    var def_line, def_col, def_file
    var value_node
}

func SymbolInfo.init(name) {
    self.name = name
}

func SymbolInfo.as_str {
    var t = "SymbolInfo{"
        "name=" + token.as_escaped_code_string(self.name) + ", "
        "kind=" + SymbolInfoKind.num_label(
            self.kind).as_str() + ", "
        "is_closure_captured=" +
            self.is_closure_captured.as_str() + ", "
        "is_ever_written_to=" +
            self.is_ever_written_to.as_str() + ", "
        "storage_id=" +
            self.storage_id.as_str() + "}"
    return t
}

type FuncScope {
    var last_inner_storage_id = 0
    var last_inner_ccapture_id = 0
    var arg_names = []
    var arg_symbol_info = []
    var is_type_attr = no
    var is_type_extend_attr = no
    var is_later_func = no
    var storage_id = 0
    var owning_type_storage_id
    var owning_type_scope
    var extends_storage_id = 0
    var inner_scope
    var parent
}

func FuncScope.add_arg(name, ast_node=none, project_file=none) {
    if self.arg_names.has(name) {
        throw new ValueError(
            "Invalid duplicate name specified, this "
            "name was already used."
        )
    }
    var sinfo = new SymbolInfo(name)
    if ast_node != none {
        sinfo.def_line = ast_node.line
        sinfo.def_col = ast_node.col
    }
    if project_file != none {
        sinfo.def_file = project_file
    }
    sinfo.storage_id = self.arg_names.len + 1
    self.arg_symbol_info.add(sinfo)
    self.arg_names.add(name)
}

extend type func_stmt.FuncStmt {
    var func_scope
}

type AttrNamesScope {
    var is_enum = no
    var is_struct = no
    var damaged = no
    var label
    var storage_id = none
}

type TypeNamesScope base AttrNamesScope {
    var is_error = no
    var display_name = none
    var base_display_name = none

    var func_attr_name_to_arg_labels = {->}
    var func_attr_name_to_kwarg_count = {->}
    var name_to_symbol_map = {->}
    var id_to_symbol_map = {->}

    var base_global_id = none
    var base_cext_id = none
    var _base_anscope_key = none

    var def_line, def_col, def_file
}

func TypeNamesScope.init {
    self.is_enum = no
    self.is_struct = no
}

type StructNamesScope base AttrNamesScope {
    var display_name = none
    var is_error = no

    var func_attr_name_to_arg_labels = {->}
    var func_attr_name_to_kwarg_count = {->}
    var name_to_symbol_map = {->}
    var id_to_symbol_map = {->}

    var storage_id = none

    var def_line, def_col, def_file
}

func StructNamesScope.init {
    self.is_enum = no
    self.is_struct = yes
}

type EnumNamesScope base AttrNamesScope {
    var first_entry_pos
    var label_names = []
    var label_nums = []

    var def_line, def_col, def_file
}

func EnumNamesScope.init {
    self.is_enum = yes
    self.is_struct = no
}

type LocalScope {
    var parent
    var name_to_symbol_map = {->}
    var storage_id_to_symbol_map = {->}
    var ccapture_id_to_symbol_map = {->}
    var ccapture_name_to_id_map = {->}
    var func_scope

    var start_line, start_col
}

type GlobalScopeEnumEntry {
    var is_enum_entry = yes
    var enum_stmt_label
    var symbol_info
}

func LocalScope.reassign_after_move_into_closure(
        storage_id, outside_closure_inner_scope
        ) {
    var outer_symbol_info = none
    var found_in_outer_inner_scope = no
    var lookat_scope = outside_closure_inner_scope
    assert(lookat_scope.func_scope != none)
    var reference_func_scope = lookat_scope.func_scope
    while lookat_scope != none {
        if lookat_scope.storage_id_to_symbol_map.has(storage_id) {
            # Found it!
            lookat_scope.storage_id_to_symbol_map[storage_id].
                is_closure_captured = yes
            outer_symbol_info =
                lookat_scope.storage_id_to_symbol_map[storage_id]
            found_in_outer_inner_scope = yes
            break
        }
        lookat_scope = lookat_scope.parent
        if lookat_scope != none and
                lookat_scope.func_scope != reference_func_scope {
            break
        }
    }
    if not found_in_outer_inner_scope {
        throw new RuntimeError("Symbol unexpectedly not found.")
    }
    var result_pair = self.lookup(
        outer_symbol_info.name, is_write_access=no, cross_func_scopes=no
    )
    if result_pair != none {
        # Already added to inner scope.
        return
    }
    self.func_scope.last_inner_ccapture_id += 1
    var st_id = self.func_scope.last_inner_ccapture_id
    self.ccapture_name_to_id_map[outer_symbol_info.name] = st_id
    self.ccapture_id_to_symbol_map[st_id] = outer_symbol_info
}

func LocalScope.add_symbol(
        symbol_name, def_file,
        line, col) {
    if self.name_to_symbol_map.has(symbol_name) {
        throw new ValueError("Symbol name already taken.")
    }
    var sinfo = new SymbolInfo(symbol_name)
    sinfo.storage_id =
        self.func_scope.last_inner_storage_id + 1
    self.func_scope.last_inner_storage_id += 1
    sinfo.def_line = line
    sinfo.def_col = col
    sinfo.def_file = def_file
    self.name_to_symbol_map[symbol_name] = sinfo
    self.storage_id_to_symbol_map[sinfo.storage_id] = sinfo
    return [new st_ref.StorageRef(
        st_ref.ST_LOCAL, sinfo.storage_id
    ), sinfo]
}

func LocalScope.as_str {
    var t = "<LocalScope name_to_symbol_map.keys()=" +
        self.name_to_symbol_map.keys().as_str() +
        " start_line=" + self.start_line.as_str() +
        " start_col=" + self.start_col.as_str()
    t += ">"
    return t
}

func LocalScope.lookup(name,
        is_write_access=yes, cross_func_scopes=yes,
        auto_add_ccapture=yes) {
    var ref
    var lookup_scope = self
    var our_func_scope = self.func_scope
    if our_func_scope == none {
        print("horsec: error: Critical internal error, "
            "LocalScope.lookup called on scope with no func_scope "
            "set. Looked up name: \"" + name + "\", "
            "self=" + self.as_str() +
            " self.parent: " + self.parent.as_str())
        throw new RuntimeError("Internal error, "
            "self.func_scope must be not none.")
    }
    while yes {
        if lookup_scope.name_to_symbol_map.has(name) {
            assert(lookup_scope.func_scope != none)
            if is_write_access {
                lookup_scope.name_to_symbol_map[name].
                    is_ever_written_to = yes
            }
            if lookup_scope.func_scope == our_func_scope or
                    not auto_add_ccapture {
                ref = new st_ref.StorageRef(st_ref.ST_LOCAL,
                    lookup_scope.name_to_symbol_map[name].storage_id)
                return [ref, lookup_scope.name_to_symbol_map[name]]
            } else {
                # This is a closure capture.
                var sinfo = lookup_scope.name_to_symbol_map[name]
                sinfo.is_closure_captured = yes
                self.func_scope.last_inner_ccapture_id += 1
                var cap_id = self.func_scope.last_inner_ccapture_id
                self.ccapture_id_to_symbol_map[cap_id] = sinfo
                self.ccapture_name_to_id_map[name] = cap_id
                ref = new st_ref.StorageRef(st_ref.ST_CCAPTURE, cap_id)
                return [ref, sinfo]
            }
        } elseif (lookup_scope.parent == none or
                lookup_scope.parent.func_scope !=
                lookup_scope.func_scope) {
            if lookup_scope.func_scope != none {
                var arg_idx = lookup_scope.func_scope.arg_names.find(
                    name
                )
                if arg_idx != none {
                    if our_func_scope != lookup_scope.func_scope and
                            auto_add_ccapture {
                        # This is a closure capture.
                        self.func_scope.last_inner_ccapture_id += 1
                        var sinfo = new SymbolInfo(name)
                        sinfo.storage_id = none
                        sinfo.is_closure_captured = yes
                        var cap_id = self.func_scope.last_inner_ccapture_id
                        self.ccapture_id_to_symbol_map[cap_id] = sinfo
                        self.ccapture_name_to_id_map[name] = cap_id
                        ref = new st_ref.StorageRef(
                            st_ref.ST_CCAPTURE, cap_id
                        )
                        return [ref, sinfo]
                    }
                    ref = new st_ref.StorageRef(
                        st_ref.ST_ARG, arg_idx
                    )
                    return [ref, none]
                }
            }
            if lookup_scope.ccapture_name_to_id_map.has(name) {
                var cap_id = lookup_scope.ccapture_name_to_id_map[name]
                var sinfo = lookup_scope.ccapture_id_to_symbol_map[
                    cap_id
                ]
                ref = new st_ref.StorageRef(st_ref.ST_CCAPTURE, cap_id)
                return [ref, sinfo]
            }
        }
        if lookup_scope.parent == none {
            return none
        }
        lookup_scope = lookup_scope.parent
        if not cross_func_scopes and
                lookup_scope.func_scope != our_func_scope {
            return none
        }
    }
}

func LocalScope.name_is_free(name, global_scope) {
    if global_scope.name_to_stmt_map.has(name) {
        return no
    }
    if self.lookup(name, auto_add_ccapture=no) != none {
        return no
    }
    return yes
}

func LocalScope.get_combined_names {
    var names = {}
    var scope = self
    while scope != none {
        names += scope.name_to_symbol_map.keys()
        scope = scope.parent
    }
    return names
}

extend type ast.TreeNode {
    var scope
    var symbol_info
}

extend func ast.TreeNode.copy {
    var self_copy = extended()
    self_copy.symbol_info = self.symbol_info.copy()
    return self_copy
}

extend type type_stmt.TypeStmt {
    var attr_names_scope
}

extend type type_stmt.TypeExtendStmt {
    var attr_names_scope
}

extend type enum_stmt.EnumStmt {
    var attr_names_scope
}

extend type enum_stmt.EnumExtendStmt {
    var attr_names_scope
}

extend type struct_or_union_stmt.StructStmt {
    var attr_names_scope
}

extend type struct_or_union_stmt.StructExtendStmt {
    var attr_names_scope
}

extend type project.Project {
    var attr_names_scope_map = {->}

    var storage_id_to_global_scope_map = {->}

    var storage_id_to_anscope_map = {->}
}

