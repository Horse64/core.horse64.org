## @module compiler.storage.scope
# Copyright (c) 2023-2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.ast.enum_stmt as enum_stmt
import compiler.ast.func_stmt as func_stmt
import compiler.ast.struct_or_union_stmt as struct_or_union_stmt
import compiler.ast.transform as transform
import compiler.ast.type_stmt as type_stmt
import compiler.msg as msg
import compiler.project as project
import compiler.storage.ref as st_ref
import compiler.token as token

enum SymbolInfoKind {
    SINFO_VAR,
    SINFO_FUNC,
    SINFO_VARATTR,
    SINFO_FUNCATTR,
    SINFO_TYPE,
    SINFO_ENUM,
    SINFO_STRUCT,
}

type SymbolInfo {
    var name
    var kind = SINFO_VAR
    var is_closure_captured = no
    var is_ever_written_to = no
    var storage_id
    var def_line, def_col, def_file
    var value_node
}

func SymbolInfo.init(name) {
    self.name = name
}

func SymbolInfo.as_str {
    var t = "SymbolInfo{"
        "name=" + token.as_escaped_code_string(self.name) + ", "
        "kind=" + SymbolInfoKind.num_label(
            self.kind).as_str() + ", "
        "is_closure_captured=" +
            self.is_closure_captured.as_str() + ", "
        "is_ever_written_to=" +
            self.is_ever_written_to.as_str() + ", "
        "storage_id=" +
            self.storage_id.as_str() + ", "
        "def_line=" + self.def_line.as_str() + ", " +
        "def_col=" + self.def_col.as_str()
    t += "}"
    return t
}

type FuncScope {
    var last_inner_storage_id = 0
    var last_inner_ccapture_id = 0
    var base_func_scope = none
    var extended_by_scopes = []
    var arg_names = []
    var arg_symbol_info = []
    var arg_type_exprs = []
    var kw_arg_count = 0
    var has_return_type = no
    var has_arg_types = no
    var return_type_expr = none
    var is_type_attr = no
    var is_type_extend_attr = no
    var is_later_func = no
    var is_override = no
    var is_closure = no
    var is_marked_readonly = no
    var has_failable = no
    var storage_id = 0
    var owning_type_storage_id
    var owning_type_scope
    var inner_scope
    var parent
}

extend type project.Project {
    var key_to_func_scope_map = {->}
}

func FuncScope._extended_final_arg_names_split {
    var base_func_scope = self.base_func_scope
    if base_func_scope == none {
        base_func_scope = self
    }
    var pos_arg_names = []
    var pos_arg_type_exprs = []
    var kw_arg_names = []
    var kw_arg_type_exprs = []
    func add_names_of_func_scope(fscope) {
        var idx = 0
        for arg_name in fscope.arg_names {
            idx += 1
            if idx <= fscope.arg_names.len -
                    fscope.kw_arg_count {
                pos_arg_names.add(arg_name)
                pos_arg_type_exprs.add(fscope.arg_type_exprs[idx])
            } else {
                if not kw_arg_names.has(arg_name) {
                    kw_arg_names.add(arg_name)
                    kw_arg_type_exprs.add(fscope.arg_type_exprs[idx])
                }
            }
        }
    }
    add_names_of_func_scope(base_func_scope)
    for extend_scope in base_func_scope.extended_by_scopes {
        assert(extend_scope != base_func_scope)
        add_names_of_func_scope(extend_scope)
    }
    return [pos_arg_names, pos_arg_type_exprs,
        kw_arg_names, kw_arg_type_exprs]
}

func FuncScope.extended_final_is_readonly {
    var base_func_scope = self.base_func_scope
    if base_func_scope == none {
        base_func_scope = self
    }
    return base_func_scope.is_marked_readonly
}

func FuncScope.extended_final_arg_names {
    var result = self._extended_final_arg_names_split()
    return result[1] + result[3]
}

func FuncScope.extended_final_arg_count {
    return self.extended_final_arg_names().len
}

func FuncScope.extended_final_kw_arg_count {
    var result = self._extended_final_arg_names_split()
    return result[3].len
}

func FuncScope.extended_final_arg_type_exprs {
    var result = self._extended_final_arg_names_split()
    return result[2] + result[4]
}

func FuncScope.extended_final_symbol_info_list {
    var base_func_scope = self.base_func_scope
    if base_func_scope == none {
        base_func_scope = self
    }
    return base_func_scope.arg_symbol_info.copy()
}

func FuncScope.add_arg(
        name, ast_node=none, type_expr=none,
        project_file=none, is_kw_arg=no) {
    var base_func_scope = self.base_func_scope
    if base_func_scope == none {
        if ast_node != none and
                ast_node.kind == ast.N_STMT_FUNCEXTEND {
            return
        }
        base_func_scope = self
    }
    if self.arg_names.has(name) {
        return
    }
    self.arg_names.add(name)
    self.arg_type_exprs.add(type_expr)
    if is_kw_arg {
        self.kw_arg_count += 1
    }
    var all_arg_names = self.extended_final_arg_names()
    var idx = 0
    for arg_name in self.arg_names {
        idx += 1
        assert(all_arg_names.has(arg_name))
        var arg_idx = all_arg_names.find(arg_name)
        while arg_idx > base_func_scope.arg_symbol_info.len {
            base_func_scope.arg_symbol_info.add(none)
        }
        var sinfo = new SymbolInfo(name)
        base_func_scope.arg_symbol_info[arg_idx] = sinfo
        if ast_node != none {
            sinfo.def_line = ast_node.line
            sinfo.def_col = ast_node.col
        }
        if project_file != none {
            sinfo.def_file = project_file
        }
        sinfo.storage_id = arg_idx
    }
}

func get_base_func_scope_from_func_node(
        project_file, node, msgs=none, is_moose64=no
        ) {
    assert({ast.N_STMT_FUNC, ast.N_STMT_FUNCEXTEND}.has(
        node.kind
    ))
    if project_file.project == none or node.damaged {
        return none
    }
    if node.type_path != none and node.type_path.len > 0 {
        var anscope = project_file.make_attr_names_scope_from_funcattr(
            node, msgs=msgs, is_moose64=is_moose64,
            def_project_file=project_file
        )
        if anscope == none {
            if not node.damaged {
                if msgs == none {
                    throw new ValueError("Failed to find base type "
                        "for func attribute.")
                }
                msgs.add(new msg.FileMsg(
                    "Unexpectedly failed to find base type "
                    "for func attribute '" +
                    node.label + "'.",
                    source_file=project_file,
                    line=node.line,
                    col=node.col,
                ))
            }
            node.damaged = yes
            return none
        }
        var key = anscope.anscope_key + "@" + node.label
        if not project_file.project.key_to_func_scope_map.has(key) {
            project_file.project.key_to_func_scope_map[key] =
                new FuncScope()
        }
        var fscope = project_file.project.
            key_to_func_scope_map[key]
        if node.kind == ast.N_STMT_FUNC and node.is_readonly {
            fscope.is_marked_readonly = yes
        }
        return fscope
    }
    if node.kind == ast.N_STMT_FUNC {
        if node.scope != none {
            # This is a local function which can't be extended,
            # so just return an arbitrary independent func scope.
            var fscope = new FuncScope()
            fscope.is_closure = yes
            return fscope
        }
        var mod_info = project_file.modinfo
        var type_path = "<inline>@<unknown>"
        if mod_info != none {
            type_path = mod_info.module_name
            assert(type_path != none)
            if mod_info.package_name != none {
                type_path += "@" + mod_info.package_name
            } else {
                type_path += "@<unknown>"
            }
        }
        var key = type_path + "@" + node.label
        if not project_file.project.key_to_func_scope_map.has(key) {
            project_file.project.key_to_func_scope_map[key] =
                new FuncScope()
        }
        return project_file.project.key_to_func_scope_map[key]
    }
    assert(node.kind == ast.N_STMT_FUNCEXTEND)
    assert(node.type_path == none or node.type_path.len == 0)
    var full_type_path
    full_type_path = "<inline>@<unknown>"
    if project_file.modinfo != none and
            project_file.modinfo.module_name != none {
        full_type_path = project_file.modinfo.module_name
        if project_file.modinfo != none and
                project_file.modinfo.package_name != none {
            full_type_path += "@" +
                project_file.modinfo.package_name
        } else {
            full_type_path += "@<unknown>"
        }
    }
    var key = full_type_path + "@" + node.label
    if not project_file.project.key_to_func_scope_map.has(key) {
        project_file.project.key_to_func_scope_map[key] =
            new FuncScope()
    }
    return project_file.project.key_to_func_scope_map[key]
}

extend type func_stmt.FuncStmt {
    var func_scope
    var _owning_anscope_key
}

type AttrNamesScope {
    var is_enum = no
    var is_struct = no
    var is_type = no
    var damaged = no
    var label
    var storage_id = none
    var anscope_key
}

func AttrNamesScope.as_str {
    var t = "AttrNamesScope{" +
        "is_enum=" + self.is_enum.as_str() + "," +
        "is_struct=" + self.is_struct.as_str() + "," +
        "damaged=" + self.damaged.as_str() + "," +
        "label=" + self.label.as_str() + "," +
        "storage_id=" + self.storage_id.as_str() +
        "}"
    return t
}

func AttrNamesScope.get_item_if_present(
        name, project=none) {
    return none
}

func AttrNamesScope.get_funcattr_node(attr_id) {
    assert(typename(attr_id) == "num")
    if not has_attr(self, "id_to_origin_gscope_map") {
        return none
    }
    if not self.id_to_origin_gscope_map.has(attr_id) {
        return none
    }
    var gscope = self.id_to_origin_gscope_map[
        attr_id]
    gnode = gscope.get_func_attr_node_by_anscope(
        self, attr_id
    )
    assert(gnode.kind == ast.N_STMT_FUNC)
    assert(gnode.func_scope != none)
    return gnode
}

func AttrNamesScope.get_funcattr_typeref_expr(attr_id) {
    assert(typename(attr_id) == "num")
    var gnode = self.get_funcattr_node(attr_id)
    if gnode == none {
        return none
    }
    assert(gnode.symbol_info != none)
    assert(gnode.symbol_info.typeref_expr != none)
    assert(gnode.symbol_info.typeref_expr.is_func_ref)
    return gnode.symbol_info.typeref_expr
}

type TypeNamesScope base AttrNamesScope {
    var is_error = no
    var display_name = none
    var base_display_name = none

    var name_to_symbol_map = {->}
    var id_to_symbol_map = {->}
    var id_to_origin_gscope_map = {->}
    var nested_structs_unions_list = []
    var unnested_ids_set = {}

    var base_global_id = none
    var base_cext_id = none
    var _base_anscope_key = none

    var def_line, def_col, def_file
}

func TypeNamesScope.init {
    self.is_enum = no
    self.is_struct = no
    self.is_type = yes
}

func find_nested_structs_unions_parent(
        anscope, storage_id
        ) {
    if anscope.unnested_ids_set.has(storage_id) {
        return none
    }
    func check_for_item_in(nest_info) {
        if nest_info.id_to_symbol_map.has(
                storage_id) {
            return nest_info
        }
        for child in nest_info.nested_structs_unions_list {
            var inner_nest_info = check_for_item_in(child)
            if inner_nest_info != none {
                return inner_nest_info
            }
        }
        return none
    }
    for child in anscope.nested_structs_unions_list {
        var inner_nest_info = check_for_item_in(child)
        if inner_nest_info != none {
            return inner_nest_info
        }
    }
    return none
}

func TypeNamesScope.get_item_if_present(
        name, project=none) {
    if project == none {
        return none
    }
    var anscope = self
    while yes {
        if anscope.name_to_symbol_map.has(name) {
            var sinfo = anscope.name_to_symbol_map[name]
            for storage_id in anscope.id_to_symbol_map {
                if anscope.id_to_symbol_map[storage_id] != sinfo {
                    continue
                }
                return [sinfo, new st_ref.StorageRef(
                    st_ref.ST_GLOBALATTR, [
                        anscope.storage_id, storage_id])]
            }
            throw new RuntimeError("Encountered damaged "
                "item which is in name_to_symbol_map but "
                "doesn't have corresponding id_to_symbol_map entry.")
        }
        if anscope.base_global_id != none {
            assert(anscope._base_anscope_key != none)
            anscope = project.
                attr_names_scope_map[anscope._base_anscope_key]
            continue
        }
        break
    }
    return none
}

type NestedStructOrUnionInfo {
    var is_union = no
    var is_anonymous = no
    var label = none
    var parent = none

    var name_to_symbol_map = {->}
    var id_to_symbol_map = {->}
    var nested_structs_unions_list = []
}

func NestedStructOrUnionInfo.get_name_path {
    var npath = ""
    var look_at = self
    while look_at != none {
        if not look_at.is_anonymous {
            if npath != "" {
                npath = "." + npath
            }
            npath = look_at.label + npath
        }
        look_at = look_at.parent
    }
    return npath
}

func NestedStructOrUnionInfo.has_nested_struct_or_union(
        nested_info) {
    if self.nested_structs_unions_list.has(nested_info) {
        return yes
    }
    for child in self.nested_structs_unions_list {
        if child.has_nested_struct_or_union(nested_info) {
            return yes
        }
    }
    return no
}

type StructNamesScope base AttrNamesScope {
    var is_error = no
    var display_name = none

    var name_to_symbol_map = {->}
    var id_to_symbol_map = {->}
    var id_to_origin_gscope_map = {->}
    var nested_structs_unions_list = []
    var unnested_ids_set = {}

    var struct_inner_ids_in_order = []

    var storage_id = none

    var def_line, def_col, def_file
}

func StructNamesScope.init {
    self.is_enum = no
    self.is_struct = yes
    self.is_type = no
}

func StructNamesScope.get_item_if_present(
        name, project=none) {
    if project == none {
        return none
    }
    if self.name_to_symbol_map.has(name) {
        var sinfo = self.name_to_symbol_map[name]
        for storage_id in self.id_to_symbol_map {
            if self.id_to_symbol_map[storage_id] != sinfo {
                continue
            }
            return [sinfo, new st_ref.StorageRef(
                st_ref.ST_GLOBALATTR, [
                    self.storage_id, storage_id])]
        }
        throw new RuntimeError("Encountered damaged "
            "item which is in name_to_symbol_map but "
            "doesn't have corresponding id_to_symbol_map entry.")
    }
    return none
}

type EnumNamesScope base AttrNamesScope {
    var first_entry_pos
    var label_names = []
    var label_nums = []

    var def_line, def_col, def_file
}

func EnumNamesScope.init {
    self.is_enum = yes
    self.is_struct = no
}

func EnumNamesScope.get_item_if_present(
        name, project=none) {
    var idx = self.label_names.find(name)
    if idx != none {
        return [self.label_names[name],
            new st_ref.StorageRef(
                st_ref.ST_NUMLITERAL, self.label_nums[idx]
            )]
    }
    return none
}

type LocalScope {
    var parent
    var name_to_symbol_map = {->}
    var storage_id_to_symbol_map = {->}
    var ccapture_id_to_symbol_map = {->}
    var ccapture_name_to_id_map = {->}
    var func_scope

    var start_line, start_col
}

type GlobalScopeEnumEntry {
    var is_enum_entry = yes
    var enum_stmt_label
    var symbol_info
}

func LocalScope.reassign_after_move_into_closure(
        storage_id, outside_closure_inner_scope
        ) {
    var outer_symbol_info = none
    var found_in_outer_inner_scope = no
    var lookat_scope = outside_closure_inner_scope
    assert(lookat_scope.func_scope != none)
    var reference_func_scope = lookat_scope.func_scope
    while lookat_scope != none {
        if lookat_scope.storage_id_to_symbol_map.has(storage_id) {
            # Found it!
            lookat_scope.storage_id_to_symbol_map[storage_id].
                is_closure_captured = yes
            outer_symbol_info =
                lookat_scope.storage_id_to_symbol_map[storage_id]
            found_in_outer_inner_scope = yes
            break
        }
        lookat_scope = lookat_scope.parent
        if lookat_scope != none and
                lookat_scope.func_scope != reference_func_scope {
            break
        }
    }
    if not found_in_outer_inner_scope {
        throw new RuntimeError("Symbol unexpectedly not found.")
    }
    var result_pair = self.lookup(
        outer_symbol_info.name, is_write_access=no, cross_func_scopes=no
    )
    if result_pair != none {
        # Already added to inner scope.
        return
    }
    self.func_scope.last_inner_ccapture_id += 1
    var st_id = self.func_scope.last_inner_ccapture_id
    self.ccapture_name_to_id_map[outer_symbol_info.name] = st_id
    self.ccapture_id_to_symbol_map[st_id] = outer_symbol_info
}

func LocalScope.add_symbol(
        symbol_name, def_file,
        line, col) {
    if self.name_to_symbol_map.has(symbol_name) {
        throw new ValueError("Symbol name already taken.")
    }
    var sinfo = new SymbolInfo(symbol_name)
    sinfo.storage_id =
        self.func_scope.last_inner_storage_id + 1
    self.func_scope.last_inner_storage_id += 1
    sinfo.def_line = line
    sinfo.def_col = col
    sinfo.def_file = def_file
    self.name_to_symbol_map[symbol_name] = sinfo
    self.storage_id_to_symbol_map[sinfo.storage_id] = sinfo
    return [new st_ref.StorageRef(
        st_ref.ST_LOCAL, sinfo.storage_id
    ), sinfo]
}

func LocalScope.as_str {
    var t = "<LocalScope name_to_symbol_map.keys()=" +
        self.name_to_symbol_map.keys().as_str() +
        " start_line=" + self.start_line.as_str() +
        " start_col=" + self.start_col.as_str()
    t += ">"
    return t
}

func find_def_node_from_idref_node(
        idref_expr, parents
        ) {
    var name = idref_expr.label
    var scope = idref_expr.scope
    var result = scope.lookup(name,
        is_write_access=no, cross_func_scopes=no,
        auto_add_ccapture=no)
    if result == none or result[2] == none or
            not {st_ref.ST_LOCAL,
                st_ref.ST_CCAPTURE}.has(result[1].kind) {
        return none
    }
    var def_scope = scope
    while def_scope != none {
        if def_scope.name_to_symbol_map.has(name) {
            break
        }
        def_scope = def_scope.parent
    }
    var any_node_had_scope = no
    var i = parents.len
    while i >= 1  {
        var this_block_has_scope =
            (parents[i].scope == def_scope)
        if this_block_has_scope and
                {ast.N_STMT_FOR,
                ast.N_STMT_WITH}.has(
                    parents[i].kind
                ) {
            if parents[i].label == name {
                return parents[i]
            }
        }
        var child_node = if i < parents.len
            (parents[i + 1]) else (idref_expr)
        var any_block_had_scope = no
        func find_in_block(block) {
            if block.len > 0 and block[1].scope == def_scope {
                any_block_had_scope = yes
            } else {
                return none
            }
            var idx = block.find(child_node)
            if idx == none {
                return none
            }
            idx -= 1
            while idx >= 1 {
                if block[idx].kind == ast.N_STMT_VAR and
                        block[idx].var_labels.has(name) {
                    return block[idx]
                }
                idx -= 1
            }
            return none
        }
        for block in parents[i].subblocks {
            var result = find_in_block(block)
            if result != none {
                return result
            }
        }
        if parents[i].kind == ast.N_STMT_IF {
            for clause in parents[i].subexprs {
                if clause.kind != ast.N_EXPR_IFELSECLAUSE {
                    continue
                }
                for block in clause.subblocks {
                    var result = find_in_block(block)
                    if result != none {
                        return result
                    }
                }
            }
        }
        if parents[i].kind == ast.N_STMT_DO {
            for clause in parents[i].subexprs {
                if not {ast.N_EXPR_RESCUECLAUSE,
                        N_EXPR_FINALLYCLAUSE}.has(
                            clause.kind
                        ) {
                    continue
                }
                for block in clause.subblocks {
                    var result = find_in_block(block)
                    if result != none {
                        return result
                    }
                }
            }
        }
        if this_block_has_scope or any_block_had_scope {
            any_node_had_scope = yes
        } elseif any_node_had_scope {
            return none
        }
        i -= 1
    }
    return none
}

func check_if_idref_matches_var_node(
        idref_expr, var_node
        ) {
    var name = idref_expr.label
    var scope = idref_expr.scope
    var result = scope.lookup(name,
        is_write_access=no, cross_func_scopes=no,
        auto_add_ccapture=no)
    if result == none or result[1] == none or
            not {st_ref.ST_LOCAL,
                st_ref.ST_CCAPTURE}.has(result[1].kind) {
        return no
    }
    var lookup_scope = scope
    while lookup_scope != none {
        if lookup_scope.name_to_symbol_map.has(name) {
            return (lookup_scope == var_node.scope)
        }
        lookup_scope = lookup_scope.parent
    }
    return no
}

func LocalScope.lookup(name,
        is_write_access=yes, cross_func_scopes=yes,
        auto_add_ccapture=yes) {
    var ref
    var lookup_scope = self
    var our_func_scope = self.func_scope
    if our_func_scope == none {
        print("horsec: error: Critical internal error, "
            "LocalScope.lookup called on scope with no func_scope "
            "set. Looked up name: \"" + name + "\", "
            "self=" + self.as_str() +
            " self.parent: " + self.parent.as_str())
        throw new RuntimeError("Internal error, "
            "self.func_scope must be not none.")
    }
    while yes {
        if lookup_scope.name_to_symbol_map.has(name) {
            assert(lookup_scope.func_scope != none)
            if is_write_access {
                lookup_scope.name_to_symbol_map[name].
                    is_ever_written_to = yes
            }
            if lookup_scope.func_scope == our_func_scope or
                    not auto_add_ccapture {
                ref = new st_ref.StorageRef(st_ref.ST_LOCAL,
                    lookup_scope.name_to_symbol_map[name].storage_id)
                return [ref, lookup_scope.name_to_symbol_map[name]]
            } else {
                # This is a closure capture.
                var sinfo = lookup_scope.name_to_symbol_map[name]
                sinfo.is_closure_captured = yes
                self.func_scope.last_inner_ccapture_id += 1
                var cap_id = self.func_scope.last_inner_ccapture_id
                self.ccapture_id_to_symbol_map[cap_id] = sinfo
                self.ccapture_name_to_id_map[name] = cap_id
                ref = new st_ref.StorageRef(st_ref.ST_CCAPTURE, cap_id)
                return [ref, sinfo]
            }
        } elseif (lookup_scope.parent == none or
                lookup_scope.parent.func_scope !=
                lookup_scope.func_scope) {
            var arg_idx = none
            if lookup_scope.func_scope != none {
                arg_idx = lookup_scope.func_scope.arg_names.find(
                    name
                )
                if arg_idx != none and
                        our_func_scope == lookup_scope.func_scope {
                    ref = new st_ref.StorageRef(
                        st_ref.ST_ARG, arg_idx
                    )
                    return [ref, none]
                }
            }
            if lookup_scope.ccapture_name_to_id_map.has(name) {
                var cap_id = lookup_scope.ccapture_name_to_id_map[name]
                var sinfo = lookup_scope.ccapture_id_to_symbol_map[
                    cap_id
                ]
                ref = new st_ref.StorageRef(st_ref.ST_CCAPTURE, cap_id)
                return [ref, sinfo]
            }
            if arg_idx != none {
                if our_func_scope != lookup_scope.func_scope and
                        auto_add_ccapture {
                    # This is a new closure capture.
                    self.func_scope.last_inner_ccapture_id += 1
                    var sinfo = new SymbolInfo(name)
                    sinfo.storage_id = none
                    sinfo.is_closure_captured = yes
                    var cap_id = self.func_scope.last_inner_ccapture_id
                    self.ccapture_id_to_symbol_map[cap_id] = sinfo
                    self.ccapture_name_to_id_map[name] = cap_id
                    ref = new st_ref.StorageRef(
                        st_ref.ST_CCAPTURE, cap_id
                    )
                    return [ref, sinfo]
                }
                return [ref, none]
            }
        }
        if lookup_scope.parent == none {
            return none
        }
        lookup_scope = lookup_scope.parent
        if not cross_func_scopes and
                lookup_scope.func_scope != our_func_scope {
            return none
        }
    }
}

func LocalScope.name_is_free(name, global_scope) {
    if global_scope.name_to_stmt_map.has(name) {
        return no
    }
    if self.lookup(name, auto_add_ccapture=no) != none {
        return no
    }
    return yes
}

func LocalScope.get_combined_names {
    var names = {}
    var scope = self
    while scope != none {
        names += scope.name_to_symbol_map.keys()
        scope = scope.parent
    }
    return names
}

func global_id_to_item(project, gid) {
    if gid == none or project == none {
        return none
    }
    if not project.storage_id_to_global_scope_map.has(gid) {
        return none
    }
    var gscope = project.storage_id_to_global_scope_map[gid]
    assert(gscope.storage_id_to_entry.has(gid))
    return gscope.storage_id_to_entry[gid]
}

extend type ast.TreeNode {
    var scope
    var symbol_info
}

extend func ast.TreeNode.copy {
    var self_copy = extended()
    if typename(self.symbol_info) == "list" {
        self_copy.symbol_info = []
        for entry in self.symbol_info {
            self_copy.symbol_info.add(entry.copy())
        }
    } else {
        self_copy.symbol_info = self.symbol_info.copy()
    }
    return self_copy
}

extend type type_stmt.TypeStmt {
    var attr_names_scope
}

extend type type_stmt.TypeExtendStmt {
    var attr_names_scope
}

extend type enum_stmt.EnumStmt {
    var attr_names_scope
}

extend type enum_stmt.EnumExtendStmt {
    var attr_names_scope
}

extend type struct_or_union_stmt.StructStmt {
    var attr_names_scope
}

extend type struct_or_union_stmt.StructExtendStmt {
    var attr_names_scope
}

extend type project.Project {
    var attr_names_scope_map = {->}

    var storage_id_to_global_scope_map = {->}

    var storage_id_to_anscope_map = {->}
}

