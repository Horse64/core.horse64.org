## @module compiler.storage.scope.manage
# Copyright (c) 2023-2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.ast.expr as ast_expr
import compiler.ast.call_or_assign_stmt as call_or_assign_stmt
import compiler.ast.func_stmt as func_stmt
import compiler.ast.transform as transform
import compiler.ast.var_stmt as var_stmt
import compiler.cext as cext
import compiler.msg as msg
import compiler.project as project
import compiler.storage.ref as storage_ref
import compiler.storage.scope as st_scope

func project.ProjectFile.type_path_to_full_module_path_and_pfile(
        tpath, msgs=none) {
    var pfile =
        self.global_scope.type_path_to_project_file(tpath)
    if pfile == none {
        var entry = self.global_scope.type_path_to_entry(tpath)
        if entry == none or entry.kind != ast.N_STMT_IMPORT {
            return none
        }
        # If we arrive here, it could be a C extension.
        var referenced_pkg = entry.package_name
        if referenced_pkg == none {
            referenced_pkg = self.project.package_name
        }
        if referenced_pkg == none or not self.project.
                package_name_to_cext.has(referenced_pkg) {
            return none
        }
        var modpath = self.project.
            package_name_to_cext[referenced_pkg].
                import_to_modname(entry)
        if modpath != none {
            return [modpath + "@" + referenced_pkg, none]
        }
        return none
    }
    var t = pfile.modinfo.module_name
    if pfile.modinfo.package_name != none {
        t += "@" + pfile.modinfo.package_name
    }
    return [t, pfile]
}

func project.ProjectFile.try_lookup_symbol_path(
        local_scope, name=none, type_path=none,
        is_write_access=yes, is_moose64=no
        ) {
    if name == none and type_path == none {
        throw new ValueError("Need to supply at least one of "
            "name or type_path.")
    }
    var check_path = type_path
    if check_path == none {
        check_path = []
    }
    if typename(check_path) == "str" {
        check_path = check_path.split(".")
    }
    if name != none {
        check_path = check_path + [name]
    }
    if check_path.len == 0 {
        return none
    }

    # First, try local scopes:
    if local_scope != none {
        var lookup_pair =
            local_scope.lookup(check_path[1],
                is_write_access=is_write_access)
        if lookup_pair != none {
            var symbol_ref = lookup_pair[1]
            if check_path.len > 1 {
                return none
            }
            return symbol_ref
        }
    }

    # Then, try 'self' and 'extended' built in names:
    if check_path[1] == "extended" and
            local_scope != none and local_scope.func_scope != none {
        var nested_in_type_extend_attr = no
        var check_func_scope = local_scope.func_scope
        while check_func_scope != none {
            if check_func_scope.is_type_extend_attr {
                nested_in_type_extend_attr = yes
            }
            check_func_scope = check_func_scope.parent
        }
        if nested_in_type_extend_attr {
            return new storage_ref.StorageRef(
                storage_ref.ST_EXTENDED, 0)
        }
    }
    if check_path[1] == "self" and
            local_scope != none and local_scope.func_scope != none {
        var nested_in_type_attr = no
        var check_func_scope = local_scope.func_scope
        while check_func_scope != none {
            if check_func_scope.is_type_attr {
                nested_in_type_attr = yes
            }
            check_func_scope = check_func_scope.parent
        }
        if nested_in_type_attr {
            return new storage_ref.StorageRef(
                storage_ref.ST_SELF, 0)
        }
    }

    # Then, try global scopes:
    var entry = self.global_scope.type_path_to_entry(
        check_path)
    if entry != none and has_attr(entry, "kind") and
            {ast.N_STMT_IMPORT,
            ast.N_STMT_C_IMPORT}.has(entry.kind) {
        # This can't be referenced directly.
        entry = none
    }
    if entry != none {
        if has_attr(entry, "is_enum_entry") and
                entry.is_enum_entry {
            if check_path.len > 1 {
                return none
            }
            if not self.global_scope.name_to_stmt_map.has(
                    entry.enum_stmt_label) {
                # Weird, maybe a follow-up error. Shouldn't
                # be possible in undamaged code.
                return none
            }
            var enum_stmt = self.global_scope.
                name_to_stmt_map[entry.enum_stmt_label]
            assert(enum_stmt.kind == ast.N_STMT_ENUM)
            var anscope = enum_stmt.attr_names_scope
            assert(entry.symbol_info.storage_id >= 1 and
                entry.symbol_info.storage_id <=
                    anscope.label_names.len)
            return new storage_ref.StorageRef(
                storage_ref.ST_NUMLITERAL,
                anscope.label_nums[
                    entry.symbol_info.storage_id]
            )
        }
        if entry.symbol_info == none {
            return none
        }
        return new storage_ref.StorageRef(
            storage_ref.ST_GLOBAL,
            entry.symbol_info.storage_id
        )
    }
    if check_path.len > 1 {
        var module_item_path_without_item = check_path.sub(
            1, check_path.len - 1)
        var item_name = check_path[check_path.len]
        assert(module_item_path_without_item.len >= 1)
        entry = self.global_scope.type_path_to_entry(
            module_item_path_without_item)
        if entry != none and {ast.N_STMT_IMPORT,
                ast.N_STMT_C_IMPORT}.has(entry.kind) {
            var can_be_non_cext_non_cref = yes
            var stmt_map = none
            if entry.kind == ast.N_STMT_C_IMPORT or
                    entry.project_file == none or
                    entry.project_file.global_scope == none {
                # An import, but not to any actual code file.
                # This is only the case for C extension imports.
                can_be_non_cext_non_cref = no
            } else {
                stmt_map =
                    entry.project_file.global_scope.name_to_stmt_map
            }
            # First, check if this is a C extension item:
            var def_file
            var in_module_name = entry.module_path.join(".")
            var in_package_name =
                if entry.kind != ast.N_STMT_C_IMPORT
                    (entry.package_name) else (none)
            if entry.kind != ast.N_STMT_C_IMPORT and
                    entry.project_file != none {
                def_file = entry.project_file
                in_module_name = def_file.modinfo.module_name
                in_package_name = def_file.modinfo.package_name
            }
            var storage_id = none
            if not is_moose64 {
                cext.get_cext_item_storage_id(
                    item_name,
                    in_module_name=in_module_name,
                    in_package_name=in_package_name,
                    project=self.project,
                    can_match_moduleless=no)
                if storage_id != none {
                    return new storage_ref.StorageRef(
                        storage_ref.ST_CEXT,
                        storage_id
                    )
                }
            }
            if entry.kind == ast.N_STMT_C_IMPORT {
                assert(entry.c_importer != none)
                if not entry.c_importer.known_items.has(item_name) {
                    return no
                }
                return new storage_ref.StorageRef(
                    storage_ref.ST_MCREF,
                    entry.c_importer.known_items[item_name].storage_id
                )
            }
            if not can_be_non_cext_non_cref or
                    not stmt_map.has(item_name) {
                return no
            }
            # If we arrive here, it's not a C extension item.
            def_file = entry.project_file
            entry = stmt_map[item_name]
            if typename(entry) == "list" {
                return no
            }
            if has_attr(entry, "is_enum_entry") and
                    entry.is_enum_entry {
                if not def_file.global_scope.
                        name_to_stmt_map.has(entry.enum_stmt_label) {
                    return no
                }
                var enum_stmt = def_file.global_scope.
                    name_to_stmt_map[entry.enum_stmt_label]
                assert(enum_stmt.kind == ast.N_STMT_ENUM)
                var anscope = enum_stmt.attr_names_scope
                assert(entry.symbol_info.storage_id >= 1 and
                    entry.symbol_info.storage_id <=
                        anscope.label_names.len)
                return new storage_ref.StorageRef(
                    storage_ref.ST_NUMLITERAL,
                    anscope.label_nums[
                        entry.symbol_info.storage_id]
                )
            }
            if entry.symbol_info == none {
                return no
            }
            return new storage_ref.StorageRef(
                storage_ref.ST_GLOBAL,
                entry.symbol_info.storage_id
            )
        }
        # This can no longer be resolved at this point.
        return none
    }
    var in_module_name = none
    var in_package_name = none
    if self.modinfo != none {
        in_module_name = self.modinfo.module_name
        in_package_name = self.modinfo.package_name
    }
    var st_id = cext.get_cext_item_storage_id(
        check_path[1], in_module_name=in_module_name,
        in_package_name=in_package_name,
        project=self.project,
        can_match_moduleless=yes)
    if st_id != none {
        return new storage_ref.StorageRef(
            storage_ref.ST_CEXT, st_id)
    }
    return none
}

func project.ProjectFile.find_cext_injected_item_storage_id_by_modpkg(
        name, mod_pkg_path, limit_to_kind=none
        ) {
    var project = self.project
    if project == none {
        return none
    }
    var split_at = mod_pkg_path.find("@")
    if split_at == none {
        return none
    }
    var search_in_pkg = mod_pkg_path.sub(split_at + 1)
    var search_in_module = mod_pkg_path.sub(1, split_at - 1)
    var result = cext.get_cext_item_storage_id(
        name, in_module_name=search_in_module,
        in_package_name=search_in_pkg, project=project,
        can_match_moduleless=no,
        limit_to_kind=limit_to_kind
    )
    return result
}

func project.ProjectFile.check_item_exists_by_modpkg(
        name, mod_pkg_path, origin_project_file=none,
        limit_to_kind=none, project=none
        ) {
    if origin_project_file != none and
            origin_project_file.global_scope.
                name_to_stmt_map.has(name) {
        var entry = origin_project_file.global_scope.
            name_to_stmt_map[name]
        assert(entry != none)
        if typename(entry) == "list" {
            return no
        }
        if limit_to_kind != none and entry.kind != limit_to_kind {
            return no
        }
        return yes
    } elseif origin_project_file != none or project != none {
        if project == none {
            project = origin_project_file.project
        }
        var storage_id = cext.get_cext_item_storage_id(
            name,
            in_module_name=mod_pkg_path.sub(
                1, mod_pkg_path.find("@")
            ), in_package_name=mod_pkg_path.sub(
                mod_pkg_path.find("@") + 1
            ),
            project=project,
            can_match_moduleless=no,
            limit_to_kind=limit_to_kind)
        if storage_id != none {
            return yes
        }
    }
    return (self.find_cext_injected_item_storage_id_by_modpkg(
        name, mod_pkg_path, limit_to_kind=limit_to_kind) != none)
}

## Like @{compiler.project.ProjectFile.make_attr_names_scope_from_node},
## but instead of taking the N_STMT_TYPE or N_STMT_TYPEEXTEND node,
## this works from any N_STMT_FUNC or N_STMT_FUNCEXTEND node of
## the given type.
func project.ProjectFile.make_attr_names_scope_from_funcattr(
        node, msgs=none, is_moose64=no, def_project_file=none
        ) {
    assert(node.kind == ast.N_STMT_FUNC or
        node.kind == ast.N_STMT_FUNCEXTEND)
    assert(node.type_path != none)
    var info = self.get_gscope_type_node_info_from_funcattr(
        node, msgs=msgs, is_moose64=is_moose64,
        def_project_file=def_project_file
    )
    var type_node = info[1]
    var type_file = info[2]
    if type_node == none {
        return none
    }
    return self.make_attr_names_scope_from_node(
        type_node, msgs=msgs, is_moose64=is_moose64,
        def_project_file=type_file
    )
}

## Find the type underlying the given func attribute AST node,
## and get its stand-in global scope AST node from whatever
## project file it actually is defined in.
func project.ProjectFile.get_gscope_type_node_info_from_funcattr(
        func_attr_node, msgs=none, is_moose64=no,
        def_project_file=none
        ) {
    var node = func_attr_node
    assert(node.kind == ast.N_STMT_FUNC or
        node.kind == ast.N_STMT_FUNCEXTEND)
    var action = "declared"
    if node.kind == ast.N_STMT_FUNCEXTEND {
        action = "extended"
    }
    assert(node.type_path != none)
    if node.func_scope != none and
            node.func_scope.owning_type_storage_id != none and
            def_project_file != none and
            def_project_file.project != none {
        # We can obvious this obvious and lazy path since it's set.
        var pr = def_project_file.project
        assert(pr.storage_id_to_entry.has(
            node.func_scope.owning_type_storage_id))
        var type_node = pr.storage_id_to_entry[
            node.func_scope.owning_type_storage_id
        ]
        var type_file = pr.storage_id_to_project_file[
            node.func_scope.owning_type_storage_id
        ]
        assert(node.kind == ast.N_STMT_TYPE or
               node.kind == ast.N_STMT_STRUCT)
        return [type_node, type_file]
    }
    if def_project_file == none or node.type_path.len <= 0 {
        return [none, none]
    }
    var global_entry_file = def_project_file
    var global_entry = none
    if node.type_path.len > 1 {
        var type_path_without_type_name =
            node.type_path.sub(1, node.type_path.len - 1)
        global_entry = def_project_file.global_scope.
            type_path_to_entry(type_path_without_type_name)
    } else {
        global_entry = def_project_file.global_scope.
            type_path_to_entry(node.type_path.sub(1, 1))
    }

    if global_entry == none {
        if msgs != none {
            var tpath = node.type_path + [node.label]
            assert(typename(tpath) == "list")
            var emsg =
                "Unexpected func "
                "attribute '" + node.label +
                "' " + action +
                " while referencing invalid "
                "type, "
            if node.type_path.len > 1 {
                emsg += "type '" + node.type_path.join(".") +
                    "' wasn't imported or found anywhere."
            } else {
                emsg += "base type '" + node.type_path[1] +
                    "' not found anywhere."
            }
            if not func_attr_node.damaged {
                msgs.add(new msg.FileMsg(
                    emsg,
                    source_file=def_project_file,
                    line=node.line, col=node.col,
                ))
            }
        } else {
            throw new ValueError("Couldn't resolve func "
                "attribute's type path.")
        }
        return [none, none]
    }
    if global_entry.kind == ast.N_STMT_IMPORT {
        # We have to access the target file this is in,
        # since it's not ours, to find out what this is.
        var pfile = global_entry.project_file
        var type_name = node.type_path[node.type_path.len]
        var type_module = node.type_path.sub(
            1, node.type_path.len - 1
        )
        if not pfile.global_scope.name_to_stmt_map.
                    has(type_name) or
                pfile.global_scope.
                    name_to_stmt_map[type_name].kind !=
                    ast.N_STMT_TYPE {
            if msgs != none {
                assert(typename(node.type_path) == "list")
                var emsg =
                    "Unexpected func "
                    "attribute '" + node.label +
                    "' " + action +
                    " while referencing invalid "
                    "type, "
                    "module '" + type_module.join(".") +
                    "' doesn't contain a type named '" +
                    type_name + "'."
                if not func_attr_node.damaged {
                    msgs.add(new msg.FileMsg(
                        emsg,
                        source_file=def_project_file,
                        line=node.line, col=node.col,
                    ))
                }
            } else {
                throw new ValueError("Couldn't resolve func "
                    "attribute's type path.")
            }
            return [none, none]
        }
        global_entry =
            pfile.global_scope.name_to_stmt_map[type_name]
        global_entry_file = pfile
    } elseif global_entry.kind != ast.N_STMT_TYPE and
            (not is_moose64 or
            global_entry.kind != ast.N_STMT_STRUCT) {
        if msgs != none {
            assert(typename(node.type_path) == "list")
            var emsg =
                "Unexpected func "
                "attribute '" + node.label +
                "' " + action +
                " while referencing invalid "
                "type, "
                "since '" + node.label + "' was found but "
                "isn't a type."
            if not func_attr_node.damaged {
                msgs.add(new msg.FileMsg(
                    emsg,
                    source_file=def_project_file,
                    line=node.line, col=node.col,
                ))
            }
        } else {
            throw new ValueError("Couldn't resolve func "
                "attribute's type path.")
        }
    }
    assert(global_entry != none and
        (global_entry.kind == ast.N_STMT_TYPE or
        (is_moose64 and global_entry.kind == ast.N_STMT_STRUCT)))
    return [global_entry, global_entry_file]
}

## This function will obtain a project-wide, unique shared
## instance of a compiler.scope.AttrNameScope
## type to store everything about a type, struct, or enum.
## It can do this from both extends and enum or type definitions all
## over a project, and it will return the same scope if they refer
## to the same type.
## These project-wide scopes are stored in the map stored in
## @{compiler.project.Project.attr_names_scope_map} associated
## with a respective project.
func project.ProjectFile.make_attr_names_scope_from_node(
        node, msgs=none, is_moose64=no, def_project_file=none
        ) {
    assert(node.kind == ast.N_STMT_TYPE or
        node.kind == ast.N_STMT_TYPEEXTEND or
        node.kind == ast.N_STMT_ENUM or
        node.kind == ast.N_STMT_ENUMEXTEND or
        (is_moose64 and (node.kind == ast.N_STMT_STRUCT or
        node.kind == ast.N_STMT_STRUCTEXTEND)))
    var stmt_base_full_type_path
    var stmt_base_label
    var stmt_base_project_file
    var stmt_full_type_path
    var stmt_project_file
    var stmt_label

    var key
    var result_scope
    var is_enum
    var is_struct
    var based_on_cext_id = none
    var base_anscope_key = none
    if node.kind == ast.N_STMT_TYPE or
            node.kind == ast.N_STMT_ENUM or
            (is_moose64 and node.kind == ast.N_STMT_STRUCT) {
        # This is a self-contained new declaration and not an extends.
        is_enum = if node.kind == ast.N_STMT_TYPE or
                  node.kind == ast.N_STMT_STRUCT (no)
                  else (yes)
        is_struct = if node.kind == ast.N_STMT_STRUCT (yes)
                    else (no)
        stmt_full_type_path = "<inline>@<unknown>"
        var mod_info = none
        if def_project_file != none and def_project_file.modinfo != none {
            mod_info = def_project_file.modinfo
        } elseif self.modinfo != none {
            mod_info = self.modinfo
        }
        if mod_info != none {
            stmt_full_type_path = mod_info.module_name
            assert(stmt_full_type_path != none)
            if mod_info.package_name != none {
                stmt_full_type_path += "@" + mod_info.package_name
            } else {
                stmt_full_type_path += "@<unknown>"
            }
        }
        stmt_label = node.label
        assert(stmt_full_type_path != none)
        assert(stmt_label != none)

        # If it's a 'type' with a 'base', figure out what the base is:
        if node.kind == ast.N_STMT_TYPE and
                node.subexprs.len >= 1 and
                node.subexprs[1].kind == ast.N_EXPR_IDREF {
            var had_type_path_specified = no
            if node.subexprs[1].type_path != none {
                had_type_path_specified = yes
                var result =
                    self.type_path_to_full_module_path_and_pfile(
                        node.subexprs[1].type_path)
                if result != none {
                    stmt_base_full_type_path = result[1]
                    stmt_base_project_file = result[2]
                }
            } else {
                stmt_base_full_type_path = stmt_full_type_path
                assert(stmt_base_full_type_path != none)
                stmt_base_project_file = self
            }
            stmt_base_label = node.subexprs[1].label

            # Obtain storage of our base type:
            var item_exists = no
            if stmt_base_full_type_path != none {
                item_exists = self.check_item_exists_by_modpkg(
                    stmt_base_label, stmt_base_full_type_path,
                    limit_to_kind=ast.N_STMT_TYPE,
                    origin_project_file=stmt_base_project_file,
                    project=self.project)
            }
            if not item_exists {
                var self_module_name = "<inline>"
                var self_pkg = none
                if self.modinfo != none {
                    self_module_name = self.modinfo.module_name
                    self_pkg = self.modinfo.package_name
                }
                var storage_id = cext.get_cext_item_storage_id(
                    stmt_base_label,
                    in_module_name=self_module_name,
                    in_package_name=self_pkg,
                    project=self.project,
                    can_match_moduleless=yes)
                if storage_id != none {
                    item_exists = yes
                    based_on_cext_id = storage_id
                }
            }
            if stmt_base_full_type_path == none {
                if msgs != none {
                    var tpath = node.subexprs[1].type_path
                    assert(typename(tpath) == "list")
                    msgs.add(new msg.FileMsg(
                        "Unexpected type statement with invalid base "
                        "type, module '" + tpath.join(".") +
                        "' wasn't imported anywhere.",
                        source_file=def_project_file,
                        line=node.line, col=node.col,
                    ))
                } else {
                    throw new ValueError("Couldn't resolve type's "
                        "base type path.")
                }
                return none
            } elseif not item_exists {
                if msgs != none {
                    msgs.add(new msg.FileMsg(
                        "Unexpected type statement with invalid base "
                        "type '" + stmt_base_label + "', module '" +
                        stmt_base_full_type_path +
                        "' doesn't contain such a type.",
                        source_file=def_project_file,
                        line=node.line, col=node.col,
                    ))
                } else {
                    throw new ValueError("Base type module "
                        "doesn't contain given type.")
                }
                return none
            } else {
                base_anscope_key = stmt_base_full_type_path +
                    "@" + stmt_base_label
            }
        }

        # Project-wide unique key to look up this definition's scope:
        key = stmt_full_type_path + "@" + stmt_label
    } else {
        assert(node.kind == ast.N_STMT_TYPEEXTEND or
            node.kind == ast.N_STMT_ENUMEXTEND or
            node.kind == ast.N_STMT_STRUCTEXTEND)
        is_enum = if node.kind == ast.N_STMT_TYPEEXTEND or
                  node.kind == ast.N_STMT_STRUCTEXTEND (no)
                  else (yes)
        is_struct if nodekind == ast.N_STMT_STRUCTEXTEND (yes)
                  else (no)
        var base_def_type = if is_enum (ast.N_STMT_ENUM) else
                            (ast.N_STMT_TYPE)
        if node.kind == ast.N_STMT_STRUCTEXTEND {
            base_def_type = ast.N_STMT_STRUCT
        }

        # See what enum or type we're extending:
        if node.subexprs.len < 1 or
                node.subexprs[1].kind != ast.N_EXPR_IDREF {
            if msgs != none {
                msgs.add(new msg.FileMsg(
                    "Unexpected extend statement with "
                    "no specified base.",
                    source_file=def_project_file,
                    line=node.line, col=node.col,
                ))
            } else {
                throw new ValueError("Found extend "
                    "statement with missing base parameter.")
            }
            return none
        }
        if node.subexprs[1].type_path != none {
            var result =
                self.type_path_to_full_module_path_and_pfile(
                    node.subexprs[1].type_path)
            if result != none {
                stmt_full_type_path = result[1]
                stmt_project_file = result[2]
            }
        } else {
            var mod_info = none
            if def_project_file != none and
                    def_project_file.modinfo != none {
                mod_info = def_project_file.modinfo
            } elseif self.modinfo != none {
                mod_info = self.modinfo
            }
            if mod_info != none {
                stmt_full_type_path = mod_info.module_name
                if mod_info.package_name != none {
                    stmt_full_type_path += "@" + mod_info.package_name
                } else {
                    stmt_full_type_path += "@<unknown>"
                }
            } else {
                stmt_full_type_path = "<inline>@<unknown>"
            }
            stmt_project_file = self
            assert(stmt_full_type_path != none)
        }
        stmt_label = node.subexprs[1].label
        if stmt_full_type_path == none {
            if msgs != none {
                msgs.add(new msg.FileMsg(
                    "Unexpected extend statement, "
                    "given module path '" +
                    node.subexprs[1].type_path.join(".") +
                    "' doesn't match any import.",
                    source_file=def_project_file,
                    line=node.line, col=node.col,
                ))
                return none
            } else {
                throw new ValueError("Couldn't resolve extend's "
                    "type path.")
            }
        } elseif stmt_project_file == none or
                not stmt_project_file.global_scope.
                    name_to_stmt_map.has(stmt_label) or
                stmt_project_file.global_scope.
                    name_to_stmt_map[stmt_label].kind !=
                    base_def_type {
            if msgs != none {
                if self.check_item_exists_by_modpkg(
                        stmt_label, stmt_full_type_path,
                        origin_project_file=none,
                        limit_to_kind=base_def_type,
                        project=self.project
                        ) {
                    # It exists but is not in the scope,
                    # this only happens for C extensions.
                    msgs.add(new msg.FileMsg(
                        "Unexpected extend statement, "
                        "cannot extend C extension " +
                        if is_enum ("enums") else ("types") + ".",
                        source_file=def_project_file,
                        line=node.line, col=node.col,
                    ))
                } else {
                    msgs.add(new msg.FileMsg(
                        "Unexpected extend statement, " +
                        if is_enum ("enum") else ("type") + " '" +
                        stmt_label + "' not found in "
                        "referenced module.",
                        source_file=def_project_file,
                        line=node.line, col=node.col,
                    ))
                }
                return none
            } else {
                throw new ValueError("Couldn't find extend's "
                    "referenced type, or its a C extension.")
            }
        }

        # Project-wide unique key of the type or enum we're extending:
        key = stmt_full_type_path + "@" + stmt_label
    }
    if not self.project.attr_names_scope_map.has(key) {
        # Not seen before, therefore add a new definition:
        result_scope = none
        if not is_enum {
            if not is_struct {
                result_scope = new st_scope.TypeNamesScope()
            } else {
                result_scope = new st_scope.StructNamesScope()
            }
        } else {
            result_scope = new st_scope.EnumNamesScope()
        }
        result_scope.display_name =
            "'" + stmt_label + "' from " +
            key.sub(1, key.rfind("@") - 1)
        result_scope.label = stmt_label
        assert(result_scope.is_enum == is_enum)
        assert(result_scope.is_struct == is_struct)
        result_scope.def_line = node.line
        result_scope.def_col = node.col
        if def_project_file != none {
            result_scope.def_file = def_project_file
        }
        self.project.attr_names_scope_map[key] = result_scope
        assert(self.project.attr_names_scope_map.has(key))
    } else {
        result_scope = self.project.attr_names_scope_map[key]
    }

    assert(based_on_cext_id == none or not is_enum)
    if not is_enum {
        if based_on_cext_id != none {
            result_scope.base_cext_id = based_on_cext_id
        }
        if stmt_base_full_type_path != none {
            var base_display_name = "'" + stmt_base_label + "' " +
                "from " + stmt_base_full_type_path
            result_scope.base_display_name = base_display_name
        }
        if base_anscope_key != none {
            assert(result_scope.base_display_name != none)
            result_scope._base_anscope_key = base_anscope_key
        }
    }

    if result_scope.is_enum != is_enum {
        var stmt_name = if is_enum ("enum") else ("type")
        if is_struct {
            stmt_name = "struct"
        }
        var opposite_name = "enum"
        if is_enum {
            if is_moose64 {
                opposite_name = "type or struct"
            } else {
                opposite_name = "type"
            }
        }
        if msgs != none {
            var where = "elsewhere"
            if result_scope.def_file != none and
                    result_scope.def_file.source_uri != none {
                where = "in " + result_scope.def_file.source_uri
                if result_scope.def_line != none {
                    where += ":" + result_scope.def_line.as_str()
                    if result_scope.def_col != none {
                        where += ":" + result_scope.def_col.as_str()
                    }
                }
            }
            msgs.add(new msg.FileMsg(
                "This " + stmt_name + " statement has "
                "a mismatched extend statement " + where + " "
                "treating it as " + opposite_name + ".",
                source_file=def_project_file,
                line=node.line, col=node.col,
            ))
        } else {
            throw new ValueError("Found " + stmt_name +
                "statement that has extend statement "
                "treating it as " + opposite_name + ".")
        }
        return none
    }
    return result_scope
}

