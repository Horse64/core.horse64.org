# @module compiler.storage.manage
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.ast.transform as transform
import compiler.msg as msg
import compiler.project as project
import compiler.storage.scope as scope

func project.ProjectFile.type_path_to_full_module_path(tpath) {
    var pfile_or_modpkgkey =
        self.global_scope.type_path_to_project_file(tpath)
    if pfile_or_modpkgkey == none {
        return none
    }
    if typename(pfile_or_modpkgkey) == "str" {
        return pfile_or_modpkgkey
    }
    var t = pfile_or_modpkgkey.modinfo.module_name
    if pfile_or_modpkgkey.modinfo.package_name != none {
        t += "@" + pfile_or_modpkgkey.modinfo.package_name
    }
    return t
}

func project.ProjectFile.try_lookup_symbol_path(
        project_file, local_scope, name=none, type_path=none
        ) {
    if name == none and type_path == none {
        throw new ValueError("Need to supply at least one of "
            "name or type_path.")
    }
    var check_path = type_path
    if check_path == none {
        check_path = []
    }
    if typename(check_path) == "str" {
        check_path = check_path.split(".")
    }
    if name != none {
        check_path = check_path + [name]
    }
    if check_path.len == 0 {
        return none
    }
    if local_scope != none {
        var symbol_info =
            local_scope.lookup(check_path[1])
        if symbol_info != none {
            if check_path.len > 1 {
                return none
            }
            return new storage_ref.StorageRef(
                storage_ref.ST_LOCAL,
                symbol_info
            )
        }
    }
    var entry = project_file.global_scope.type_path_to_entry(
        check_path)
    if entry != none {
        project_file.global_scope.ensure_assigned_storage()
        return new storage_ref.StorageRef(
            storage_ref.ST_GLOBAL,
            entry.symbol_info.storage_id
        )
    }
    if check_path.len > 1 {
        # This can no longer be resolved at this point.
        return none
    }
    var builtin_id = cext.get_builtin_cext_storage_id(check_path[1])
    if builtin_id != none {
        return new storage_ref.StorageRef(
            storage_ref.ST_BUILTIN, builtin_id)
    }
    return none
}

func project.ProjectFile.make_type_or_enum_scope_from_node(
        node, msgs=none, project_file=none) {
    assert(node.kind == ast.N_STMT_TYPE or
        node.kind == ast.N_STMT_TYPEEXTEND or
        node.kind == ast.N_STMT_ENUM or
        node.kind == ast.N_STMT_ENUMEXTEND)
    var stmt_base_full_type_path
    var stmt_base_label
    var stmt_full_type_path
    var stmt_label

    var key
    var result_scope
    var is_enum
    if node.kind == ast.N_STMT_TYPE or
            node.kind == ast.N_STMT_ENUM {
        is_enum = if node.kind == ast.N_STMT_TYPE (no)
                  else (yes)
        stmt_full_type_path = self.modinfo.module_name
        assert(stmt_full_type_path != none)
        if self.modinfo.package_name != none {
            stmt_full_type_path += "@" + self.modinfo.package_name
        }
        stmt_label = node.label
        if node.kind == ast.N_STMT_TYPE and
                node.subexprs.len >= 1 and
                node.subexprs[1].kind == ast.N_EXPR_IDREF {
            if node.subexprs[1].type_path != none {
                stmt_base_full_type_path =
                    self.type_path_to_full_module_path(
                        node.subexprs[1].type_path)
            } else {
                stmt_base_full_type_path = stmt_full_type_path
            }
            stmt_base_label = node.subexprs[1].label
            if stmt_base_full_type_path == none and msgs != none {
                msgs.add(new msg.FileMsg(
                    "Unexpected type statement with invalid base type, "
                    "module '" +
                    node.subexprs[1].type_path.join(".") +
                    "' wasn't imported anywhere.",
                    source_file=self,
                    line=node.line, col=node.col,
                ))
            } elseif stmt_base_full_type_path == none {
                throw new ValueError("Couldn't resolve type's "
                    "base type path.")
            }
        }
        key = stmt_full_type_path + "." + stmt_label
    } else {
        assert(node.kind == ast.N_STMT_TYPEEXTEND or
            node.kind == ast.N_STMT_ENUMEXTEND)
        is_enum = if node.kind == ast.N_STMT_TYPEEXTEND (no)
                  else (yes)
        if node.subexprs.len < 1 or
                node.subexprs[1].kind != ast.N_EXPR_IDREF {
            if msgs != none {
                msgs.add(new msg.FileMsg(
                    "Invalid extend statement with "
                    "no specified base.",
                    source_file=self,
                    line=node.line, col=node.col,
                ))
            } else {
                throw new ValueError("Found extend "
                    "statement with missing base parameter.")
            }
            return none
        }
        if node.subexprs[1].type_path != none {
            stmt_full_type_path =
                self.type_path_to_full_module_path(
                    node.subexprs[1].type_path)
        } else {
            stmt_full_type_path = self.modinfo.module_name
            assert(stmt_full_type_path != none)
            if self.modinfo.package_name != none {
                stmt_full_type_path += "@" + self.modinfo.package_name
            }
        }
        stmt_label = node.subexprs[1].label
        if stmt_full_type_path == none and msgs != none {
            msgs.add(new msg.FileMsg(
                "Unexpected extend statement, "
                "there isn't any import for this module: " +
                node.subexprs[1].type_path.join("."),
                source_file=self,
                line=node.line, col=node.col,
            ))
            return none
        } elseif stmt_full_type_path == none {
            throw new ValueError("Couldn't resolve extend's "
                "type path.")
        }
        key = stmt_full_type_path + "." + stmt_label
    }
    if not self.project.type_or_enum_scope_map.has(key) {
        result_scope = if not is_enum (new scope.TypeScope())
                else (new scope.EnumScope())
        assert(result_scope.is_enum == is_enum)
        result_scope.def_line = node.line
        result_scope.def_col = node.col
        if project_file != none {
            result_scope.def_uri = project_file.source_uri
        }
        if stmt_base_full_type_path != none {
            var base_key = stmt_base_full_type_path + "." +
                stmt_base_label
            result_scope.base_key = base_key
        }
        self.project.type_or_enum_scope_map[key] = result_scope
    } else {
        result_scope = self.project.type_or_enum_scope_map[key]
    }
    if result_scope.is_enum != is_enum {
        var stmt_name = if is_enum ("enum") else ("type")
        var opposite_name = if is_enum ("type") else ("enum")
        if msgs != none {
            var where = "elsewhere"
            if result_scope.def_uri != none {
                where = "in " + result_scope.def_uri
                if result_scope.def_line != none {
                    where += ":" + result_scope.def_line.as_str()
                    if result_scope.def_col != none {
                        where += ":" + result_scope.def_col.as_str()
                    }
                }
            }
            msgs.add(new msg.FileMsg(
                "This " + stmt_name + " statement has "
                "a mismatched extend statement " + where + " "
                "treating it as " + opposite_name + ".",
                source_file=self,
                line=node.line, col=node.col,
            ))
        } else {
            throw new ValueError("Found " + stmt_name +
                "statement that has extend statement "
                "treating it as " + opposite_name + ".")
        }
        return none
    }
    return result_scope
}

