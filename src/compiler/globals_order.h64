## @module compiler.globals_order
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import ordering from core.horse64.org
import random from core.horse64.org
import textfmt from core.horse64.org

import compiler.ast as ast
import compiler.project
import compiler.storage.ref as st_ref
import compiler.token as token

type GlobalsInitTracker {
    var st_id_to_globals_init_info_map = {->}
    var st_id_to_ordering_node_map = {->}
    var globals_init_ordering = none
    var list_of_final_ordered_st_ids = []
    var project = none
    var computed_init_func_info_map = {->}
}

type GlobalInitInfo {
    var st_id = none
    var depends_on_st_ids = []
    var contains_call = no
    var project_file = none
}

func GlobalsInitTracker.init {
    self.globals_init_ordering =
        new ordering.Ordering()
}

func GlobalInitInfo.as_str {
    return "GlobalInitInfo{" +
        "st_id=" + self.st_id.as_str() + ","
        "depends_on_st_ids=" +
            self.depends_on_st_ids.as_str() + ","
        "contains_call=" + self.contains_call.as_str() +
        "}"
}

extend type compiler.project.Project {
    var globals_init_tracker = none
}

func register_global(project_file, stmt,
        msgs=none, is_moose64=no, debug=no) {
    var program_name =
        if is_moose64 ("moosec") else ("horsec")
    if stmt.kind != ast.N_STMT_VAR {
        return yes
    }
    func get_contains_call(expr) {
        var result = []
        if expr.kind == ast.N_EXPR_BINOP and
                expr.optoken.str == "(" {
            return yes
        } elseif expr.kind == ast.N_EXPR_UNOP and
                expr.optoken.kind == token.T_NEWOP {
            return yes
        }
        for inner_expr in expr.subexprs {
            if get_contains_call(inner_expr) {
                return yes
            }
        }
        return no
    }
    func get_global_refs(expr) {
        var result = []
        if expr.kind == ast.N_EXPR_IDREF and
                expr.ref != none and
                {st_ref.ST_GLOBAL,
                    st_ref.ST_GLOBALATTR}.has(
                        expr.ref.kind
                    ) {
            if expr.ref.kind == st_ref.ST_GLOBALATTR {
                result.add(expr.ref.id[1])
            } else {
                result.add(expr.ref.id)
            }
        }
        for inner_expr in expr.subexprs {
            result += get_global_refs(inner_expr)
        }
        return result
    }
    var ginittracker = project_file.
        project.globals_init_tracker
    var ordering = ginittracker.globals_init_ordering
    var idx = 0
    for lbl in stmt.var_labels {
        idx += 1
        var sym = stmt.symbol_info[idx]
        if stmt.is_empty or
                stmt.subexprs[idx] == none or
                (stmt.subexprs[idx].kind ==
                     ast.N_EXPR_LIT and
                 stmt.subexprs[idx].value == none) {
            continue
        } else {
            assert(idx >= 1 and
                idx <= stmt.var_labels.len and
                idx <= stmt.subexprs.len)
            var ginit_info = new GlobalInitInfo()
            ginittracker.st_id_to_globals_init_info_map[
                sym.storage_id
            ] = ginit_info
            ginit_info.st_id = sym.storage_id
            ginit_info.depends_on_st_ids =
                get_global_refs(stmt.subexprs[idx])
            ginit_info.contains_call =
                get_contains_call(stmt.subexprs[idx])
            ginit_info.project_file = project_file
            var order_node = ordering.add_node(
                name="G" + sym.storage_id.as_str(),
            )
            ginittracker.st_id_to_ordering_node_map[
                sym.storage_id
            ] = order_node
            if debug {
                print(program_name + ": debug: "
                    "globals_order.h64: " +
                    "Added global init with st_id=" +
                        sym.storage_id.as_str() + " "
                    "expr=" + stmt.subexprs[idx].as_str() + " "
                    "node=" + order_node.as_str())
            }
        }
    }
    return yes
}

func register_globals_for_project(
        project, msgs=none, is_moose64=no,
        debug=no) {
    var program_name =
        if is_moose64 ("moosec") else ("horsec")
    if project.globals_init_tracker == none {
        project.globals_init_tracker =
            new GlobalsInitTracker()
        project.globals_init_tracker.project = project
    }
    var ginittracker = project.globals_init_tracker
    var had_error = no
    func process_file(project_file) {
        project_file.ensure_ast() later:

        for stmt in project_file.ast.stmts {
            if not register_global(
                    project_file, stmt, msgs=msgs,
                    is_moose64=is_moose64,
                    debug=debug) {
                had_error = yes
            }
        }
        return later yes
    }
    var result = project.do_for_all_files(
        process_file
    ) later:

    await result

    # First, register all globals with init exprs in a graph:
    var ginit_map = ginittracker.st_id_to_globals_init_info_map
    var order_node_map = ginittracker.st_id_to_ordering_node_map
    for storage_id in ginit_map {
        var order_node = order_node_map[
            storage_id
        ]
        for target_id in ginit_map[storage_id].depends_on_st_ids {
            var target_node = order_node_map[
                target_id
            ]
            order_node.add_rel_to(target_node)
            if debug {
                print(program_name + ": debug: globals_order.h64: " +
                    "Added relation from " + order_node.as_str() + " "
                    "to " + target_node.as_str())
            }
        }
    }
    ginittracker.list_of_final_ordered_st_ids = []
    var final_st_ids_list = []
    var final_st_ids_set = {}

    # Now sort the graph by dependencies, and iterate the result:
    var ordering = ginittracker.globals_init_ordering
    var sorted_node_lists = ordering.order_by_depth(
        backward=yes,
    )
    var pfiles_with_basic_inits_done = {}
    var all_basic_inits_done = no
    var sort_stage = 1
    while sort_stage <= 2 {
        var allow_calls = (sort_stage == 2)

        func add_basic_inits_from_project_file(pfile) {
            if pfiles_with_basic_inits_done.has(
                    pfile
                    ) {
                return
            }
            pfiles_with_basic_inits_done.add(
                pfile
            )
            for st_id in curr_project_file.
                    global_scope.
                    storage_id_to_entry {
                var entry = curr_project_file.
                    global_scope.
                    storage_id_to_entry[st_id]
                if typename(entry) == "list" or
                        entry.kind != ast.N_STMT_VAR {
                    continue
                }
                if not ginit_map.has(st_id) {
                    final_st_ids_list.add(st_id)
                    final_st_ids_set.add(st_id)
                }
            }
        }

        if allow_calls and not all_basic_inits_done {
            # We must ensure all files had their basic
            # inits processed here first, or the inits
            # with calls may fail to make use of them.
            all_basic_inits_done = yes
            var pfile_queue = []
            for pfile in project.module_uri_to_file_map.values() {
                if not pfiles_with_basic_inits_done.has(pfile) {
                    pfile_queue.add(pfile)
                }
            }
            for pfile in project.no_uri_files {
                if not pfiles_with_basic_inits_done.has(pfile) {
                    pfile_queue.add(pfile)
                }
            }
            for pfile in pfile_queue {
                add_basic_inits_from_project_file(pfile)
            }
        }

        # Now walk through all depths to place inits in order:
        var idx = 1
        while idx <= sorted_node_lists.len {
            # At each level of depth in the dependencies,
            # we want to extract as much from a single file as
            # possible, per file, until everything at this
            # depth is ordered.
            # (The idea is that the C code gen wants to group
            # as much as possible into one function. Grouping
            # can only be done with statements from the same
            # depth in the same file.)
            var current_depth_list = sorted_node_lists[idx]
            var idx2 = 1
            while idx2 <= current_depth_list.len {
                var first_node = current_depth_list[idx2]
                assert(first_node.name != none and
                    first_node.name.starts("G"))
                var first_st_id =
                    first_node.name.sub(2).to_num()
                if final_st_ids_set.has(first_st_id) {
                    idx2 += 1
                    continue
                }
                if not allow_calls and
                        ginit_map[first_st_id].contains_call {
                    idx2 += 1
                    continue
                }
                var curr_project_file =
                    project.storage_id_to_global_scope_map[
                        first_st_id
                    ].known_to_be_in_project_file
                assert(curr_project_file != none)
                add_basic_inits_from_project_file(
                    curr_project_file
                )
                assert(not final_st_ids_list.has(first_st_id))
                final_st_ids_list.add(first_st_id)
                final_st_ids_set.add(first_st_id)

                var idx3 = idx2 + 1
                while idx3 <= current_depth_list.len {
                    var other_node = current_depth_list[idx3]
                    assert(other_node.name != none and
                        other_node.name.starts("G"))
                    var other_st_id =
                        other_node.name.sub(2).to_num()
                    if final_st_ids_set.has(other_st_id) {
                        idx3 += 1
                        continue
                    }
                    var other_project_file =
                        project.storage_id_to_global_scope_map[
                            first_st_id
                        ].known_to_be_in_project_file
                    if other_project_file != curr_project_file or
                            (not allow_calls and
                             ginit_map[other_st_id].
                                 contains_call) {
                        idx3 += 1
                        continue
                    }
                    if not allow_calls or not all_basic_inits_done {
                        # Only in this branch, it's possible
                        # some global we depend on isn't available
                        # yet. Check this:
                        var have_unavailable_dep = no
                        for dep_id in ginit_map[other_st_id].
                                depends_on_st_ids {
                            add_basic_inits_from_project_file(
                                dep_id
                            )
                            if not final_st_ids_set.has(dep_id) {
                                # In this case, it likely contains
                                # a call and was skipped so far.
                                have_unavailable_dep = yes
                                break
                            }
                        }
                        if have_unavailable_dep {
                            idx3 += 1
                            continue
                        }
                    }
                    assert(not final_st_ids_set.has(other_st_id))
                    final_st_ids_list.add(other_st_id)
                    final_st_ids_set.add(other_st_id)
                    idx3 += 1
                }
                idx2 += 1
            }
            idx += 1
        }
        sort_stage += 1
    }
    ginittracker.list_of_final_ordered_st_ids =
        final_st_ids_list

    if debug {
        print(program_name + ": debug: globals_order.h64: " +
            "st_id_to_globals_init_info_map=" +
            ginit_map.as_str())
        print(program_name + ": debug: globals_order.h64: " +
            "globals_init_ordering=" + ordering.as_str())
        print(program_name + ": debug: globals_order.h64: " +
            "sorted_node_lists=" + sorted_node_lists.as_str())
        print(program_name + ": debug: globals_order.h64: " +
            "final_st_ids_list=" + final_st_ids_list.as_str())
    }
    return later not had_error
}

type InitFuncInfo {
    var suggested_name
    var storage_ids_for_init = []
    var project_file
}

func InitFuncInfo.as_str {
    var t = "InitFuncInfo{" +
        "suggested_name=" + textfmt.as_escaped_code_string(
            self.suggested_name
        ) + " storage_ids_for_init=" +
        storage_ids_for_init.as_str() + " "
        "project_file=" + self.project_file.as_str() +
        "}"
    return t
}

func generate_init_funcs_for_file(project_file) {
    var project = project_file.project
    if project.globals_init_tracker == none {
        throw new RuntimeError(
            "Cannot find global init tracker, "
            "has the global init info been computed yet?"
        )
    }
    var gtracker = project.globals_init_tracker
    if gtracker.computed_init_func_info_map != none and
            gtracker.computed_init_func_info_map.len > 0 {
        if gtracker.computed_init_func_info_map.has(
                project_file) {
            return later gtracker.
                computed_init_func_info_map[
                    project_file
                ]
        }
        return later []
    }
    var init_func_info_map = {->}
    init_func_info_map[project_file] = []

    func process_file(project_file) {
        var file_list = []
        var current_func_info = none
        var ids_list = gtracker.list_of_final_ordered_st_ids
        var idx = 1
        while idx <= ids_list.len {
            var st_id = ids_list[idx]
            var assigned_project_file =
                project.storage_id_to_global_scope_map[
                    st_id
                ].known_to_be_in_project_file
            if assigned_project_file != project_file {
                if current_func_info != none {
                    file_list.add(current_func_info)
                    current_func_info = none
                }
                idx += 1
                continue
            }
            if current_func_info == none {
                current_func_info = new InitFuncInfo()
                current_func_info.project_file =
                    project_file
                current_func_info.suggested_name =
                    "init_globals_" + random.gen_id().as_str()
            }
            current_func_info.storage_ids_for_init.add(
                st_id
            )
            idx += 1
        }
        if current_func_info != none {
            file_list.add(current_func_info)
            current_func_info = none
        }
        init_func_info_map[project_file] = file_list
        return later yes
    }
    var result = project.do_for_all_files(
        process_file
    ) later:

    await result
    if not result {
        throw new RuntimeError(
            "Failed to compute init func info for "
            "files."
        )
    }

    gtracker.computed_init_func_info_map = init_func_info_map

    return later gtracker.
        computed_init_func_info_map[
            project_file
        ]
}

