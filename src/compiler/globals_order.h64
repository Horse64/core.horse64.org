## @module compiler.globals_order
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import ordering from core.horse64.org

import compiler.ast as ast
import compiler.project

type GlobalsInitTracker {
    var globals_with_init_storage_ref_list = []
    var globals_init_ordering = none
    var project = none
}

func GlobalsInitTracker.init {
    self.globals_init_ordering =
        new ordering.Ordering()
}

extend type compiler.project.Project {
    var globals_init_tracker = none
}

func register_global(project_file, stmt, msgs=none) {
    if stmt.kind != ast.N_STMT_VAR {
        return yes
    }
    print("OOPSIE REGISTER GLOBAL: " + stmt.as_str())
    return yes
}

func register_globals_for_project(project, msgs=none) {
    if project.globals_init_tracker == none {
        project.globals_init_tracker =
            new GlobalsInitTracker()
        project.globals_init_tracker.project = project
    }
    var had_error = no
    func process_file(project_file) {
        project_file.ensure_ast() later:

        for stmt in project_file.ast.stmts {
            if not register_global(
                    project_file, stmt, msgs=msgs) {
                had_error = yes
            }
        }
        return later yes
    }
    var result = project.do_for_all_files(
        process_file
    ) later:

    await result
    return later not had_error
}
