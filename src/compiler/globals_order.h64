## @module compiler.globals_order
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import ordering from core.horse64.org

import compiler.ast as ast
import compiler.project
import compiler.storage.ref as st_ref
import compiler.token as token

type GlobalsInitTracker {
    var st_id_to_globals_init_info_map = {->}
    var st_id_to_ordering_node_map = {->}
    var globals_init_ordering = none
    var list_of_final_ordered_st_ids = []
    var project = none
}

type GlobalsInitInfo {
    var depends_on_st_ids = []
    var contains_call = no
}

func GlobalsInitTracker.init {
    self.globals_init_ordering =
        new ordering.Ordering()
}

extend type compiler.project.Project {
    var globals_init_tracker = none
}

func register_global(project_file, stmt, msgs=none) {
    if stmt.kind != ast.N_STMT_VAR {
        return yes
    }
    func get_contains_call(expr) {
        var result = []
        if expr.kind == ast.N_EXPR_BINOP and
                expr.optoken.str == "(" {
            return yes
        } elseif expr.kind == ast.N_EXPR_UNOP and
                expr.optoken.kind == token.T_NEWOP {
            return yes
        }
        for inner_expr in expr.subexprs {
            if get_contains_call(inner_expr) {
                return yes
            }
        }
        return no
    }
    func get_global_refs(expr) {
        var result = []
        if expr.kind == ast.N_EXPR_IDREF and
                expr.ref != none and
                {st_ref.ST_GLOBAL,
                    st_ref.ST_GLOBALATTR}.has(
                        expr.ref.kind
                    ) {
            if expr.ref.kind == st_ref.ST_GLOBALATTR {
                result.add(expr.ref.id[1])
            } else {
                result.add(expr.ref.id)
            }
        }
        for inner_expr in expr.subexprs {
            result += get_global_refs(inner_expr)
        }
        return result
    }
    var ginittracker = project_file.
        project.globals_init_tracker
    var ordering = ginittracker.globals_init_ordering
    var idx = 0
    for lbl in stmt.var_labels {
        idx += 1
        var sym = stmt.symbol_info[idx]
        if stmt.is_empty or
                stmt.subexprs[idx] == none or
                (stmt.subexprs[idx].kind ==
                     ast.N_EXPR_LIT and
                 stmt.subexprs[idx].value == none) {
            continue
        } else {
            assert(idx >= 1 and
                idx <= stmt.var_labels.len and
                idx <= stmt.subexprs.len)
            var ginit_info = new GlobalsInitInfo()
            ginittracker.st_id_to_globals_init_info_map[
                sym.storage_id
            ] = ginit_info
            ginit_info.depends_on_st_ids =
                get_global_refs(stmt.subexprs[idx])
            ginit_info.contains_call =
                get_contains_call(stmt.subexprs[idx])
            var order_node = ordering.add_node(
                name="G" + sym.storage_id.as_str(),
            )
            ginittracker.st_id_to_ordering_node_map[
                sym.storage_id
            ] = order_node
        }
    }
    return yes
}

func register_globals_for_project(
        project, msgs=none, is_moose64=no) {
    var program_name =
        if is_moose64 ("moosec") else ("horsec")
    if project.globals_init_tracker == none {
        project.globals_init_tracker =
            new GlobalsInitTracker()
        project.globals_init_tracker.project = project
    }
    var ginittracker = project.globals_init_tracker
    var had_error = no
    func process_file(project_file) {
        project_file.ensure_ast() later:

        for stmt in project_file.ast.stmts {
            if not register_global(
                    project_file, stmt, msgs=msgs) {
                had_error = yes
            }
        }
        return later yes
    }
    var result = project.do_for_all_files(
        process_file
    ) later:

    await result

    # First, register all globals with init exprs in a graph:
    var ginit_map = ginittracker.st_id_to_globals_init_info_map
    var order_node_map = ginittracker.st_id_to_ordering_node_map
    for storage_id in ginit_map {
        var order_node = order_node_map[
            storage_id
        ]
        for target_id in ginit_map[storage_id].depends_on_st_ids {
            var target_node = order_node_map[
                target_id
            ]
            order_node.add_rel_to(target_node)
        }
    }
    ginittracker.list_of_final_ordered_st_ids = []
    var final_st_ids_list = []
    var final_st_ids_set = {}

    # Now sort the graph by dependencies, and iterate the result:
    var ordering = ginittracker.globals_init_ordering
    var sorted_node_lists = ordering.order_by_depth(
        backward=yes,
    )
    var sort_stage = 1
    while sort_stage <= 2 {
        var allow_calls = (sort_stage == 2)

        var idx = 1
        while idx <= sorted_node_lists.len {
            # Look at one level of depth in the dependencies.
            # We want to extract as much from a single file as
            # possible, per file, until everything in the depth
            # is ordered.
            # (The idea is that the C code gen wants to group
            # as much as possible into one function, which can
            # only be done with statements from the same depth
            # in the same file.)
            var current_depth_list = sorted_node_lists[idx]
            var idx2 = 1
            while idx2 <= current_depth_list.len {
                if final_st_ids_set.has(
                        current_depth_list[idx2]) {
                    idx2 += 1
                    continue
                }
                var first_node = current_depth_list[1]
                assert(first_node.name != none and
                    first_node.starts("G"))
                var first_st_id = first_node.sub(2).to_num()
                if not allow_calls and
                        ginit_map[first_st_id].contains_call {
                    idx2 += 1
                    continue
                }
                final_st_ids_list.add(first_st_id)
                final_st_ids_set.add(first_st_id)
                var curr_project_file =
                    project.storage_id_to_global_scope_map[
                        first_st_id
                    ].known_to_be_in_project_file
                assert(curr_project_file != none)

                var idx3 = 2
                while idx3 <= current_depth_list.len {
                    var other_node = current_depth_list[idx3]
                    var other_st_id =
                        other_node.sub(2).to_num()
                    var other_project_file =
                        project.storage_id_to_global_scope_map[
                            first_st_id
                        ].known_to_be_in_project_file
                    if other_project_file != curr_project_file or
                            (not allow_calls and
                             ginit_map[other_st_id].
                                 contains_call) {
                        idx3 += 1
                        continue
                    }
                    if not allow_calls {
                        # We must ensure all of the deps had no
                        # calls either, which means they must be
                        # in our result set already.
                        var have_skipped_dep = no
                        for dep_id in ginit_map[other_st_id].
                                depends_on_st_ids {
                            if not final_st_ids_set.has(dep_id) {
                                have_skipped_dep = yes
                                break
                            }
                        }
                        if have_skipped_dep {
                            idx3 += 1
                            continue
                        }
                    }
                    final_st_ids_list.add(other_st_id)
                    final_st_ids_set.add(other_st_id)
                    idx3 += 1
                }
                idx2 += 1
            }
            idx += 1
        }
        sort_stage += 1
    }
    ginittracker.list_of_final_ordered_st_ids =
        final_st_ids_list

    #print(program_name + ": debug: " +
    #    ginittracker.st_id_to_globals_with_init_map.as_str())
    #print(program_name + ": debug: " + final_st_ids_list.as_str())
    return later not had_error
}
