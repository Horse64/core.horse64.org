## @module compiler.typeinfo
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

extend type SymbolInfo {
    var typeref
    var type_storage_ref
}

func try_resolve_symbol_typeref(
        project_file, var_decl_node, type_expr,
        sym_info, msgs, is_moose64=no
        ) {
    if var_decl_node.damaged or
            sym_info.type_storage_ref != none {
        return
    }
    var name = sym_info.name
    var cname = type_expr.get_c_builtin_for_base_type(
        is_moose64=is_moose64
    )
    if cname != none {
        # FIXME: register here as c builtin??
        sym_info.type_storage_ref = cname
        return
    }
    var st_ref = project_file.try_lookup_symbol_path(
        none, name=sym_info.typeref.name,
        type_path=sym_info.typeref.type_path,
        is_write_access=no, is_moose64=is_moose64
    )
    if st_ref != none {
        sym_info.type_storage_ref = st_ref
        return
    }
    var_decl_node.damaged = yes
    msgs.add(new msg.FileMsg(
        "Unexpected typeref " +
        sym_info.typeref.as_str() + ", "
        "failed to find referenced underlying type.",
        source_file=project_file,
        line=node.line,
        col=node.col,
    ))
    return
}

