## @module compiler.typeinfo
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.ast.analyze as ast_analyze
import compiler.ast.transform as ast_transform
import compiler.builtin_syms as builtin_syms
import compiler.msg as msg
import compiler.storage.scope as st_scope

extend type st_scope.SymbolInfo {
    var typeref
    var type_storage_ref
}

func try_resolve_symbol_typeref(
        project_file, var_decl_node, type_expr,
        sym_info, msgs, is_moose64=no
        ) {
    if var_decl_node.damaged or
            sym_info.type_storage_ref != none {
        return
    }
    sym_info.typeref = type_expr.copy()
    var name = sym_info.name
    if is_moose64 {
        var cname = type_expr.get_c_builtin_for_m64_base_type()
        if cname != none {
            var builtin_ref =
                builtin_syms.get_m64_c_type_builtin_by_name(
                    project_file.project, cname, create_if_missing=yes
                )
            if builtin_ref == none {
                var_decl_node.damaged = yes
                msgs.add(new msg.FileMsg(
                    "Unexpectedly failed to register internal "
                    "C type \"" + cname + "\", is there a clash "
                    "with any included header files?",
                    source_file=project_file,
                    line=var_decl_node.line,
                    col=var_decl_node.col,
                ))
                return
            }
            sym_info.type_storage_ref = builtin_ref
            return
        }
    }
    var st_ref = type_expr.try_resolve_to_user_type(
        project_file, is_moose64=is_moose64
    )
    if st_ref != none {
        sym_info.type_storage_ref = st_ref
        return
    }
    var_decl_node.damaged = yes
    msgs.add(new msg.FileMsg(
        "Unexpected typeref " +
        sym_info.typeref.as_str() + ", "
        "failed to find referenced underlying type.",
        source_file=project_file,
        line=var_decl_node.line,
        col=var_decl_node.col,
    ))
    return
}

func ensure_type_info_for_file(project_file, msgs, is_moose64=no) {
    var ast_tree = project_file.ast

    func resolve_typeref_visitor(node, parent) {
        if node.damaged {
            return later node
        }
        if node.kind == ast.N_STMT_VAR and node.has_type_expr {
            if node.symbol_info == none or
                    typename(node.symbol_info) != "list" {
                msgs.add(new msg.FileMsg(
                    "Internal error, encountered damaged node "
                    "with no symbol info: " + node.as_str() + " "
                    "Please report this to the compiler "
                    "makers.",
                    source_file=project_file,
                    line=node.line,
                    col=node.col,
                ))
                node.damaged = yes
                return later node
            }
            var type_expr = node.subexprs[node.subexprs.len]
            var idx = 0
            for lbl in node.var_labels {
                idx += 1
                try_resolve_symbol_typeref(
                    project_file, node, type_expr,
                    node.symbol_info[idx], msgs,
                    is_moose64=is_moose64
                )
            }
        } elseif node.kind == ast.N_STMT_FUNC or
                node.kind == ast.N_STMT_FUNCEXTEND {
            if node.symbol_info == none or
                    typename(node.symbol_info) == "list" {
                msgs.add(new msg.FileMsg(
                    "Internal error, encountered damaged node "
                    "with no symbol info: " + node.as_str() + " "
                    "Please report this to the compiler "
                    "makers.",
                    source_file=project_file,
                    line=node.line,
                    col=node.col,
                ))
                node.damaged = yes
                return later node
            }
            if node.kind != ast.N_STMT_FUNCEXTEND and
                    node.has_return_type {
                var type_expr = node.subexprs[node.subexprs.len]
                try_resolve_symbol_typeref(
                    project_file, node, type_expr,
                    node.symbol_info, msgs,
                    is_moose64=is_moose64
                )
            }
            if node.has_arg_types {
                var sinfo_list = node.get_local_args_symbol_info_list()
                var type_expr_list =
                    node.get_local_args_type_expr_list()
                var i = 1
                while i <= sinfo_list.len {
                    try_resolve_symbol_typeref(
                        project_file, node, type_expr_list[i],
                        sinfo_list[i], msgs,
                        is_moose64=is_moose64
                    )
                    i += 1
                }
            }
        }
        return later node
    }

    var result = ast_transform.visit_ast_tree(
        ast_tree, resolve_typeref_visitor,
        pass_func_boundaries=yes, parent_chain=no, backward=no)
    later:

    await result
    return later result
}

func ensure_all_type_info(project, msgs, is_moose64=no) {
    func do_unsafe {
        func process_file(pfile) {
            pfile.ensure_ast() later:

            var result = ensure_type_info_for_file(
                pfile, msgs, is_moose64=is_moose64
            ) later:

            await result
            if not result {
                return later no
            }
            return later yes
        }
        var check_went_ok = project.do_for_all_files(process_file)
        later:

        await check_went_ok
        for m in msgs {
            if m.kind == msg.M_ERROR {
                check_went_ok = no
            }
        }

        return later check_went_ok
    }
    var result = do_unsafe() later:

    await result

    ast_analyze.ensure_analysis_has_needed_error(
        result, msgs
    )
    return later result
}

