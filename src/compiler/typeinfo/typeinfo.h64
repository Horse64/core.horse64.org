## @module compiler.typeinfo
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org
import textfmt from core.horse64.org

import compiler.ast as ast
import compiler.ast.analyze as ast_analyze
import compiler.ast.expr as ast_expr
import compiler.ast.transform as ast_transform
import compiler.moose64.builtins as m64_builtins
import compiler.msg as msg
import compiler.storage.ref as st_ref
import compiler.storage.scope as st_scope
import compiler.typeinfo.ast_typeref as ast_typeref

extend type st_scope.SymbolInfo {
    var typeref_expr
    var type_storage_ref
}

extend func st_scope.SymbolInfo.as_str {
    var result = extended()
    assert(result.ends("}"))
    result = result.sub(1, result.len - 1) + ", " +
        "typeref_expr=" + self.typeref_expr.as_str() + ", " +
        "type_storage_ref=" + self.type_storage_ref.as_str() +
        "}"

    return result
}

extend type ast_expr.IdRefExpr {
    var value_typeref_expr
}

enum TypeInfoKind {
    TI_H64BUILTIN_TYPE,
    TI_M64BUILTIN_TYPE,
    TI_C_TYPE,
    TI_USERTYPE,
    TI_FUNCREF,
}

## This is a concrete type info instance based on what was
## previously described on a syntactical level by
## @{compiler.typeinfo.ast_typeref.TypeRefExpr}.
## The main dfference is that the concrete type info can
## be bound to closure values like the self value.
type TypeInfo {
    var kind
    var c_type_name

    ## If set, this is the original horse64 or moose64 type name
    ## before converstion to the corresponding C type.
    var orig_type_name = none

    ## The @{type modifiers|compiler.typeinfo.ast_typeref.TypeRefMod},
    ## if any.
    var modifiers = []

    ## For `TI_USERTYPE` or `TI_FUNCREF`, this holds a @{compiler.
    ## storage.ref.StorageRef} that points to the global scope item.
    var user_type_ref

    ## For `TI_FUNCREF` or if it's a `TI_H64BUILTIN_TYPE`/
    ## `TI_M64BUILTIN_TYPE` that is a known func, this retains the
    ## @{compiler.typeinfo.ast_typeref.TypeRefFuncExpr} with the exact
    ## parameter types.
    var func_typeexpr

    ## For `TI_FUNCREF`, this is either @{none} or if it was a func attr
    ## on an object instance, the @{compiler.storage.ref.StorageRef}
    ## that points to the concrete object instance.
    var func_self_ref

    ## This can be set to a {token|compiler.token.Token} representing
    ## a known value, if easily known in the given context. Usually,
    ## it'll be set to @{none}.
    var known_literal_value_token = none

    var _orig_typeexpr protect
}

func TypeInfo.init(ti_kind) {
    self.kind = ti_kind
}

func TypeInfo.is_readonly {
    for mod in self.modifiers {
        if {"readonly"}.has(mod.name) {
            return yes
        }
    }
    return no
}

func TypeInfo.is_array {
    var array_idx = none
    var idx = 0
    for mod in self.modifiers {
        idx += 1
        if {"array"}.has(mod.name) {
            array_idx = idx
        }
    }
    if not array_idx {
        return no
    }
    idx = 0
    for mod in self.modifiers {
        idx += 1
        if {"ref", "c_array"}.has(mod.name) and
                idx > array_idx {
            return no
        }
    }
    return yes
}

func TypeInfo.get_c_zeroing_code {
    if self.ref_count(include_c_arrays=yes, include_arrays=no,
            include_implicit_refs=yes,
            include_explicit_refs=yes) {
        return "((void*)0)"
    } elseif self.kind == TI_USERTYPE {
        return "{0}"
    } elseif self.kind == TI_FUNCREF {
        return "((void*)0)"
    } else {
        return "(0)"
    }
}

func TypeInfo.ref_count(include_c_arrays=yes, include_arrays=no,
        include_implicit_refs=no,
        include_explicit_refs=yes) {
    const mod_len = self.modifiers.len
    var count = 0

    # If we don't count arrays or explicit refs, skip behind them:
    var skip_idx = 0
    var mod_idx = 1
    while mod_idx <= mod_len {
        var mod = self.modifiers[mod_idx]
        if not include_explicit_refs and mod.name == "ref" {
            skip_idx = mod_idx
        } elseif not include_c_arrays and mod.name == "c_array" {
            skip_idx = mod_idx
        } elseif not include_arrays and mod.name == "array" {
            skip_idx = mod_idx
        }
        mod_idx += 1
    }

    # Now count what we actually want to count:
    mod_idx = math.max(1, skip_idx + 1)
    while mod_idx <= mod_len {
        var mod = self.modifiers[mod_idx]
        if include_explicit_refs and mod.name == "ref" {
            count += 1
        } elseif include_implicit_refs and mod.name == "implicit ref" {
            count += 1
        } elseif include_c_arrays and mod.name == "c_array" {
            count += 1
        } elseif include_arrays and mod.name == "array" {
            count += 1
        }
        mod_idx += 1
    }
    return count
}

func get_known_type_size(tinfo) {
    var is_array = tinfo.is_array()
    var mods_without_refs_and_junk = []
    for mod in tinfo.modifiers {
        if {"ref", "c_array", "implicit ref",
                "array", "readonly"}.has(mod.name) {
            continue
        }
        mods_without_refs_and_junk.add(mod.copy())
    }
    if is_array or mods_without_refs_and_junk.len > 0 {
        return none
    }
    if tinfo.kind != TI_C_TYPE {
        # Not implemented for now.
        return none
    }
    return ast_typeref.get_known_c_type_size(
        tinfo.c_type_name
    )
}

func TypeInfo.has_outer_implicit_ref {
    var idx = self.modifiers.len + 1
    while idx > 1 {
        idx -= 1
        mod = self.modifiers[idx]
        if {"array", "c_array", "ref"}.has(mod.name) {
            return no
        }
        if mod.name == "implicit ref" {
            return yes
        }
    }
    return no
}

func TypeInfo.has_equivalent_modifiers(
        other_tinfo, allow_autodrop_mods=no,
        allow_autoadd_mods=no
        ) {
    var droppable_names = ["implicit ref"]
    var addable_names = ["readonly", "implicit ref"]
    var did_implicit_ref_change = no
    if not allow_autodrop_mods and
            not allow_autoadd_mods and
            other_tinfo.modifiers.len != self.modifiers.len {
        return no
    }
    var claimed_indexes = {}
    var had_non_implicit_ref = no
    var idx = self.modifiers.len + 1
    while idx > 1 {
        idx -= 1
        mod = self.modifiers[idx]
        if {"array", "c_array", "ref"}.has(mod.name) {
            had_non_implicit_ref = yes
        }
        var found_equivalent = no
        var idx = 0
        for other_mod in other_tinfo.modifiers {
            idx += 1
            if claimed_indexes.has(idx) {
                continue
            }
            if other_mod.is_equivalent_mod_to(mod) or
                    (other_mod.name == "array" and
                     self.kind == TI_C_TYPE and
                     self.orig_type_name == "any" and
                     mod.name == "ref") {
                claimed_indexes.add(idx)
                found_equivalent = yes
                break
            }
        }
        if not found_equivalent {
            if not allow_autoadd_mods or
                    not addable_names.has(mod.name) or
                    (mod.name == "implicit ref" and
                     (did_implicit_ref_change or
                      had_non_implicit_ref)) {
                return no
            } elseif mod.name == "implicit ref" {
                did_implicit_ref_change = yes
            }
        }
    }
    if claimed_indexes.len < other_tinfo.modifiers.len and
            not allow_autodrop_mods {
        return no
    }
    had_non_implicit_ref = 0
    var idx = other_tinfo.modifiers.len + 1
    while idx > 1 {
        idx -= 1
        other_mod = other_tinfo.modifiers[idx]
        if {"array", "c_array", "ref"}.has(other_mod.name) {
            had_non_implicit_ref = yes
        }
        if not claimed_indexes.has(idx) and (
                not allow_autodrop_mods or
                not droppable_names.has(other_mod.name) or
                (other_mod.name == "implicit ref" and
                 (did_implicit_ref_change or
                  had_non_implicit_ref))) {
            return no
        } elseif other_mod.name == "implicit ref" {
            did_implicit_ref_change = yes
        }
    }
    return yes
}

func TypeInfo.copy {
    var copied = base.copy()
    copied.modifiers = []
    for mod in self.modifiers {
        copied.modifiers.add(mod.copy())
    }
    if self._orig_typeexpr != none {
        copied._orig_typeexpr = self._orig_typeexpr.copy()
    }
    if self.known_literal_value_token != none {
        if not {"num", "bool", "none", "str",
                "bytes"}.has(
                    typename(self.known_literal_value_token)
                ) {
            copied.known_literal_value_token =
                self.known_literal_value_token.copy()
        }
    }
    if self.func_self_ref != none {
        copied.func_self_ref = self.func_self_ref.copy()
    }
    if self.func_typeexpr != none {
        copied.func_typeexpr = self.func_typeexpr.copy()
    }
    return copied
}

func create_from_simple_m64_type(m64_type) {
    const is_moose64 = yes
    var c_type_name = ast_typeref._m64_to_c_name_map[m64_type]
    var tinfo = new TypeInfo(TI_C_TYPE)
    tinfo.c_type_name = c_type_name
    tinfo.orig_type_name = m64_type + ""
    return tinfo
}

func create_typeinfo_from_typeexpr(
        type_expr, is_moose64=no, debug=no
        ) {
    if not is_moose64 {
        throw new RuntimeError("Not implemented for Horse64.")
    }
    if not type_expr.is_func_ref and
            not type_expr.is_user_type() and
            ast_typeref._m64_to_c_name_map.has(
                type_expr.name
            ) {
        var tinfo = new TypeInfo(TI_C_TYPE)
        tinfo.c_type_name = ast_typeref._m64_to_c_name_map[
            type_expr.name + ""
        ]
        tinfo.orig_type_name =  type_expr.name + ""
        for mod in type_expr.modifiers {
            tinfo.modifiers.add(mod)
        }
        tinfo._orig_typeexpr = type_expr.copy()
        return tinfo
    } elseif type_expr.is_func_ref and
            self.func_typeexpr != none {
        var tinfo = new TypeInfo(TI_FUNCREF)
        tinfo.func_typeexpr = type_expr.copy()
        if type_expr.func_storage_ref != none {
            tinfo.user_type_ref =
                type_expr.func_storage_ref.copy()
        }
        tinfo._orig_typeexpr = type_expr.copy()
        return tinfo
    } elseif not type_expr.is_func_ref and
            type_expr.is_user_type() and
            type_expr.storage_ref != none {
        var tinfo = new TypeInfo(TI_USERTYPE)
        tinfo.orig_type_name = type_expr.name
        tinfo.user_type_ref =
            type_expr.storage_ref
        for mod in type_expr.modifiers {
            tinfo.modifiers.add(mod)
        }
        tinfo._orig_typeexpr = type_expr.copy()
        return tinfo
    } else {
        if debug {
            print("moosec: debug: "
                "create_typeinfo_from_typeexpr(): "
                "Failed to return type expr, debug "
                "info is: " +
                [type_expr, type_expr.is_func_ref,
                type_expr.is_user_type(),
                type_expr.name,
                ast_typeref._m64_to_c_name_map.has(
                    type_expr.name
                )].as_str())
        }
        return none
    }
}

func create_typeinfo_from_simple_c_type(
        c_type, is_moose64=no) {
    if not is_moose64 {
        throw new RuntimeError("Not implemented for Horse64.")
    }
    var reverse_types = []
    for entry in ast_typeref._m64_to_c_name_map {
        if ast_typeref._m64_to_c_name_map[entry] == c_type {
            reverse_types.add(entry)
        }
    }
    if reverse_types.len != 1 {
        throw new ValueError(
            "Cannot create TypeInfo() directly from this "
            "C type, since it doesn't have a direct "
            "unique Moose64 reverse."
        )
    }
    var tinfo = new TypeInfo(TI_C_TYPE)
    tinfo.c_type_name = c_type + ""
    tinfo.orig_type_name = reverse_types[1]
    return tinfo
}

func TypeInfo.as_str {
    var t = "TypeInfo{"
        "kind=" + TypeInfoKind.num_label(self.kind) + " "
    if self.kind == TI_C_TYPE {
        t += "c_type_name=" + if self.c_type_name != none
            (textfmt.as_escaped_code_string(self.c_type_name))
            else ("none") + " "
    }
    if self.kind == TI_C_TYPE or
            (self.kind == TI_USERTYPE and
             self.orig_type_name != none) {
        t += "orig_type_name=" + if self.orig_type_name != none
            (textfmt.as_escaped_code_string(self.orig_type_name))
            else ("none") + " "
    }
    if self.kind == TI_USERTYPE and
            self._orig_typeexpr != none {
        t += "_orig_typeexpr=" +
            self._orig_typeexpr.as_str() + " "
    }
    if self.kind != TI_C_TYPE {
        t += "user_type_ref=" + self.user_type_ref.as_str() + " "
    }
    if self.kind != TI_C_TYPE and self.kind != TI_USERTYPE {
        t += "func_typeexpr=" + self.func_typeexpr.as_str() + " "
            "func_self_ref=" + self.func_self_ref.as_str() + " "
    }
    t += "modifiers=" + self.modifiers.as_str()
    t += "}"
    return t
}

func TypeInfo._set_orig_type_expr(texpr) {
    self._orig_typeexpr = texpr.copy()
}

func TypeInfo.describe_to_user(
        project=none, add_quotes_where_useful=no,
        is_moose64=no) {
    var texpr = self.convert_to_typeref_expr(
        project=project, is_moose64=is_moose64
    )
    if texpr == none {
        return "<unknown type description for typeinfo=" +
            self.as_str() + ">"
    }
    var t = texpr.as_code()
    if add_quotes_where_useful {
        if texpr.is_func_ref {
            return "'" + t + "' (func)"
        } elseif texpr.is_user_type() {
            return "'" + t + "'"
        }
        return t
    }
    return t
}

func TypeInfo.add_implicit_ref_modifier {
    var mod = new ast_typeref.TypeRefMod("implicit ref")
    self.modifiers.add(mod)
    if self._orig_typeexpr != none {
        self._orig_typeexpr = self._orig_typeexpr.copy()
        self._orig_typeexpr.modifiers.add(mod)
    }
}

func TypeInfo.add_ref_modifier {
    var mod = new ast_typeref.TypeRefMod("ref")
    self.modifiers.add(mod)
    if self._orig_typeexpr != none {
        self._orig_typeexpr = self._orig_typeexpr.copy()
        self._orig_typeexpr.modifiers.add(mod)
    }
}

func TypeInfo.convert_array_type_to_data_type {
    var datatypeinfo = self.copy()
    var arraymodidx = none
    var idx = datatypeinfo.modifiers.len
    while idx >= 1 {
        if datatypeinfo.modifiers[idx].name == "array" {
            arraymodidx = idx
            break
        } elseif {"c_array", "ref"}.has(
                datatypeinfo.modifiers[idx].name) {
            break
        }
        idx -= 1
    }
    if arraymodidx == none {
        throw new TypeError(
            "This tyepinfo doesn't refer to an array type."
        )
    }
    datatypeinfo.modifiers = datatypeinfo.modifiers.sub(
        1, arraymodidx - 1
    ) + datatypeinfo.modifiers.sub(arraymodidx + 1)
    return datatypeinfo
}

func TypeInfo.convert_to_typeref_expr(
        project=none, in_local_scope=none,
        in_project_file=none,
        is_moose64=no
        ) {
    if self.func_typeexpr != none {
        var result = self.func_typeexpr.copy()
        result.modifiers = []
        for mod in self.modifiers {
            result.modifiers.add(mod.copy())
        }
        return result
    } elseif self._orig_typeexpr != none {
        var result = self._orig_typeexpr.copy()
        result.modifiers = []
        for mod in self.modifiers {
            result.modifiers.add(mod.copy())
        }
        return result
    } elseif is_moose64 and
            self.orig_type_name != none and
            ast_typeref.builtin_moose64_types.has(
                self.orig_type_name
            ) {
        var expr = new ast_typeref.TypeRefExpr()
        expr.name = self.orig_type_name
        for mod in self.modifiers {
            expr.modifiers.add(mod.copy())
        }
        return expr

    } elseif self.user_type_ref != none and
            (project != none or in_project_file != none) and
            self.user_type_ref.kind == st_ref.ST_GLOBALATTR {
        if project == none and in_project_file != none {
            project = in_project_file.project
        }
        if project != none and
                project.storage_id_to_global_scope_map.has(
                    self.user_type_ref.id[1]
                ) {
            var gitem = st_scope.global_id_to_item(
                project, self.user_type_ref.id[1]
            )
            var anscope = project.get_any_file().
                make_attr_names_scope_from_gid(
                    self.user_type_ref.id[1],
                    is_moose64=is_moose64)
            if has_attr(anscope, "id_to_symbol_map") and
                    anscope.id_to_symbol_map.has(
                        self.user_type_ref.id[2]
                    ) {
                var sym = anscope.id_to_symbol_map[
                    self.user_type_ref.id[2]
                ]
                if sym.typeref_expr != none {
                    return sym.typeref_expr.copy()
                }
                return none
            }
        }
    } elseif self.user_type_ref != none and
            (project != none or in_project_file != none) and
            {st_ref.ST_GLOBAL,
             st_ref.ST_MCREF}.has(self.user_type_ref.kind) {
        if project == none and in_project_file != none {
            project = in_project_file.project
        }
        if self.user_type_ref.kind == st_ref.ST_GLOBAL and
                project != none and
                project.storage_id_to_global_scope_map.has(
                    self.user_type_ref.id
                ) {
            var gscope_node = st_scope.global_id_to_item(
                project, self.user_type_ref.id
            )
            if gscope_node.kind == ast.N_STMT_STRUCT {
                var texpr = new ast_typeref.TypeRefExpr()
                texpr.name = gscope_node.label
                if in_project_file != none {
                    var import_typepath = in_project_file.
                        global_scope.get_import_path_for_global(
                            in_project_file,
                            self.user_type_ref.id
                        )
                    if import_type_path != none and
                            import_typepath.len > 0 {
                        texpr.type_path = import_typepath
                    }
                }
                for mod in self.modifiers {
                    texpr.modifiers.add(mod.copy())
                }
                return texpr
            }
        }
    }
    return none
}

func set_vattr_syminfo_early_type_info(
        vardef_stmt, symbol_info
        ) {
    if symbol_info.typeref_expr == none and
            vardef_stmt.has_type_expr {
        symbol_info.typeref_expr =
            vardef_stmt.subexprs[vardef_stmt.subexprs.len].copy()
    }
}

func try_resolve_symbol_typeref_or_type_expr(
        project_file, var_decl_node, type_expr,
        sym_info, msgs, is_moose64=no
        ) {
    if var_decl_node.damaged or (sym_info != none and
            sym_info.type_storage_ref != none) {
        return later
    }
    if type_expr != none and sym_info != none {
        if {st_scope.SINFO_FUNC, st_scope.SINFO_FUNCATTR}.has(
                sym_info.kind
                ) and not type_expr.is_func_ref {
            throw new TypeError("The given type_expr "
                "isn't referring to a func, but the given "
                "sym_info is. This doesn't make any sense.")
        }
        sym_info.typeref_expr = type_expr.copy()
    }
    if type_expr != none {
        if type_expr.is_user_type {
            return later none
        }
        var st_ref = type_expr.try_resolve_to_user_type(
            project_file, is_moose64=is_moose64
        ) later:

        await st_ref
        if st_ref == none and (
                not type_expr.is_func_ref or
                type_expr.func_storage_ref != none) {
            var_decl_node.damaged = yes
            msgs.add(new msg.FileMsg(
                "Unexpected typeref " +
                sym_info.typeref_expr.as_str() + ", "
                "failed to find referenced underlying type.",
                source_file=project_file,
                line=var_decl_node.line,
                col=var_decl_node.col,
            ))
        }
        return later
    }
    if sym_info == none or
            sym_info.typeref_expr == none {
        return later
    }
    var name = sym_info.name
    if is_moose64 {
        var cname = type_expr.get_c_builtin_for_m64_base_type()
        if cname != none {
            var builtin_ref =
                m64_builtins.get_m64_c_type_builtin_ref_by_name(
                    project_file.project, cname,
                    create_if_missing=yes,
                    create_type=m64_builtins.BI_BASICTYPE,
                )
            if builtin_ref == none {
                var_decl_node.damaged = yes
                msgs.add(new msg.FileMsg(
                    "Unexpectedly failed to register internal "
                    "C type \"" + cname + "\", is there a clash "
                    "with any included header files?",
                    source_file=project_file,
                    line=var_decl_node.line,
                    col=var_decl_node.col,
                ))
                return
            }
            assert(typename(builtin_ref) == "obj" and
                has_attr(builtin_ref, "kind"))
            sym_info.type_storage_ref = builtin_ref
            return
        }
    }
    var st_ref = type_expr.try_resolve_to_user_type(
        project_file, is_moose64=is_moose64
    ) later:

    await st_ref
    if st_ref != none {
        assert(typename(st_ref) == "obj" and
            has_attr(st_ref, "kind"))
        sym_info.type_storage_ref = st_ref
        return later
    }
    var_decl_node.damaged = yes
    msgs.add(new msg.FileMsg(
        "Unexpected typeref " +
        sym_info.typeref_expr.as_str() + ", "
        "failed to find referenced underlying type.",
        source_file=project_file,
        line=var_decl_node.line,
        col=var_decl_node.col,
    ))
    return later
}

func ensure_type_info_for_file(project_file, msgs, is_moose64=no) {
    var ast_tree = project_file.ast

    func resolve_typeref_visitor(node, parent, max_recurse=200) {
        if node.damaged {
            return later node
        }
        if node.kind == ast.N_STMT_VAR and node.has_type_expr {
            if node.symbol_info == none or
                    typename(node.symbol_info) != "list" {
                msgs.add(new msg.FileMsg(
                    "Internal error, encountered damaged node "
                    "with no symbol info: " + node.as_str() + " "
                    "Please report this to the compiler "
                    "makers.",
                    source_file=project_file,
                    line=node.line,
                    col=node.col,
                ))
                node.damaged = yes
                return later node
            }
            var type_expr = node.subexprs[node.subexprs.len]
            var idx = 0
            func process_labels {
                func handle_label(lbl) {
                    idx += 1
                    assert(node.symbol_info[idx].name ==
                           node.var_labels[idx])
                    try_resolve_symbol_typeref_or_type_expr(
                        project_file, node, type_expr,
                        node.symbol_info[idx], msgs,
                        is_moose64=is_moose64
                    ) later:
                }
                var queue = node.var_labels.copy()
                if queue.len == 0 {
                    return later
                }
                var item = queue.pop()
                var _unused = handle_label(item)
                later:

                await _unused
                if queue.len == 0 {
                    return later
                }
                item = queue.pop()
                _unused = handle_label(item) later repeat
            }
            process_labels()
            later:

            return later node
        } elseif node.kind == ast.N_STMT_FUNC or
                node.kind == ast.N_STMT_FUNCEXTEND {
            if node.symbol_info == none or
                    typename(node.symbol_info) == "list" {
                msgs.add(new msg.FileMsg(
                    "Internal error, encountered damaged node "
                    "with no symbol info: " + node.as_str() + " "
                    "Please report this to the compiler "
                    "makers.",
                    source_file=project_file,
                    line=node.line,
                    col=node.col,
                ))
                node.damaged = yes
                return later node
            }
            func handle_return_type {
                if node.kind == ast.N_STMT_FUNCEXTEND or
                        not node.has_return_type {
                    return later
                }
                var type_expr = node.subexprs[node.subexprs.len]
                try_resolve_symbol_typeref_or_type_expr(
                    project_file, node, type_expr,
                    none, msgs,
                    is_moose64=is_moose64
                ) later:
            }
            handle_return_type()
            later:

            func process_args {
                if not node.has_arg_types {
                    return
                }
                func handle_arg(expr_item, sinfo_item) {
                    try_resolve_symbol_typeref_or_type_expr(
                        project_file, node, expr_item,
                        sinfo_item, msgs,
                        is_moose64=is_moose64
                    ) later:
                }
                var queue = []
                var exprlist = node.get_local_args_type_expr_list()
                var sinfolist = node.get_local_args_symbol_info_list()
                if exprlist.len != sinfolist.len {
                    print(if is_moose64 ("moosec") else ("horsec") +
                        ": error: Fatal internal error: "
                        "List of local arg type expressions doesn't "
                        "match list of local arg symbol info in "
                        "length: exprlist=" + exprlist.as_str() + " "
                        "sinfolist=" + sinfolist.as_str())
                    throw new RuntimeError("Fatal internal error, "
                        "damaged func args with "
                        "exprlist.len != sinfolist.len")
                }
                assert(exprlist.len == sinfolist.len)
                var idx = 0
                for item in sinfolist {
                    idx += 1
                    queue.add([exprlist[idx], item])
                }
                if queue.len == 0 {
                    return later
                }
                var item = queue.pop()
                var _unused = handle_arg(item[1], item[2])
                later:

                await _unused
                if queue.len == 0 {
                    return later
                }
                item = queue.pop()
                _unused = handle_arg(item[1], item[2])
                later repeat
            }
            process_args()
            later:

            return later node
        }
        return later node
    }

    var result = ast_transform.visit_ast_tree(
        ast_tree, resolve_typeref_visitor,
        pass_func_boundaries=yes, parent_chain=no, backward=no)
    later:

    await result
    return later result
}

func ensure_all_type_info(project, msgs, is_moose64=no) {
    func do_unsafe {
        func process_file(pfile) {
            pfile.ensure_ast() later:

            var result = ensure_type_info_for_file(
                pfile, msgs, is_moose64=is_moose64
            ) later:

            await result
            if not result {
                return later no
            }
            return later yes
        }
        var check_went_ok = project.do_for_all_files(process_file)
        later:

        await check_went_ok
        for m in msgs {
            if m.kind == msg.M_ERROR {
                check_went_ok = no
            }
        }

        return later check_went_ok
    }
    var result = do_unsafe() later:

    await result

    ast_analyze.ensure_analysis_has_needed_error(
        result, msgs
    )
    return later result
}

func create_typeinfo_from_global_ref(
        target_ref, base_typeref_expr_if_known=none,
        base_node_if_known=none,
        base_symbol_info_if_known=none,
        self_node_if_known=none,
        self_ref_if_known=none,
        store_self_value_ref_for_funcs=no,
        project=none,
        is_moose64=no, debug=no
        ) {
    if base_node_if_known != none and target_ref == none and
            base_node_if_known.kind == ast.N_EXPR_IDREF and
            base_node_if_known.ref != none {
        target_ref = base_node_if_known.ref.copy()
    }
    if base_typeref_expr_if_known == none or
            base_symbol_info_if_known == none {
        var sinfo = st_ref.ref_to_symbol_info(
            target_ref, project=project,
            is_moose64=is_moose64, debug=debug
        )
        if sinfo != none {
            if base_symbol_info_if_known == none {
                base_symbol_info_if_known = sinfo
            }
            if base_typeref_expr_if_known == none and
                    sinfo.typeref_expr != none {
                base_typeref_expr_if_known =
                    sinfo.typeref_expr
                assert(not {st_scope.SINFO_FUNCATTR,
                    st_scope.SINFO_FUNC}.has(
                        sinfo.kind) or
                    sinfo.typeref_expr.is_func_ref)
            }
        }
    }
    if debug {
        var node_s = base_node_if_known.as_str()
        if node_s.len > 100 {
            node_s = node_s.sub(1, 100) + "..."
        }
        print(if is_moose64 ("moosec: ") else ("horsec: ") +
            "debug: create_typeinfo_from_global_ref(): Got "
            "target_ref=" + target_ref.as_str() + " "
            "base_symbol_info_if_known=" +
                base_symbol_info_if_known.as_str() + " "
            "base_typeref_expr_if_known=" +
                base_typeref_expr_if_known.as_str() + " "
            "base_node_if_known=" + node_s + " "
            "project=" + project.as_str())
    }

    if (base_typeref_expr_if_known != none and
            base_typeref_expr_if_known.is_func_ref) or
            (base_symbol_info_if_known != none and
             {st_scope.SINFO_FUNC, st_scope.SINFO_FUNCATTR}.has(
                 base_symbol_info_if_known.kind
             )) or
            (base_node_if_known != none and
             {ast.N_STMT_FUNC, ast.N_STMT_FUNCEXTEND}.has(
                 base_node_if_known.kind)) {
        assert(target_ref.kind != st_ref.ST_LOCAL)
        var tinfo = new TypeInfo(
            TI_FUNCREF
        )
        if base_typeref_expr_if_known != none {
            tinfo.func_typeexpr =
                base_typeref_expr_if_known.copy()
            assert(tinfo.func_typeexpr.is_func_ref)
        } elseif base_symbol_info_if_known != none {
            tinfo.func_typeexpr =
                base_symbol_info_if_known.typeref_expr.copy()
            assert(tinfo.func_typeexpr.is_func_ref)
        }
        if tinfo.user_type_ref == none and
                tinfo.func_typeexpr != none and
                tinfo.func_typeexpr.func_storage_ref != none {
            tinfo.user_type_ref =
                tinfo.func_typeexpr.func_storage_ref.copy()
        }
        if tinfo.user_type_ref == none and
                target_ref != none and
                {st_ref.ST_GLOBAL, st_ref.ST_GLOBALATTR}.has(
                    target_ref.kind
                ) {
            tinfo.user_type_ref = target_ref.copy()
        }
        if self_ref_if_known == none and
                self_node_if_known != none and
                self_node_if_known.kind == ast.N_EXPR_IDREF {
            self_ref_if_known = self_node_if_known.ref
        }
        if self_ref_if_known and self_node_if_known != none {
            if self_node_if_known.kind == ast.N_EXPR_IDREF and
                    self_node_if_known.ref != none {
                self_ref_if_known = self_node_if_known.ref
            } elseif self_node_if_known.kind == ast.N_EXPR_BINOP and
                    self_node_if_known.optoken.str == "." and
                    self_node_if_known.subexprs.len >= 2 and
                    self_node_if_known.subexprs[2].kind ==
                        ast.N_EXPR_IDREF and
                    self_node_if_known.subexprs[2].ref != none {
                self_ref_if_known =
                    self_node_if_known.subexprs[2].ref
            }
        }
        if store_self_value_ref_for_funcs and
                ((base_typeref_expr_if_known != none and
                  base_typeref_expr_if_known.is_func_attr) or
                 (base_symbol_info_if_known != none and
                  base_symbol_info_if_known.kind ==
                      st_scope.SINFO_FUNCATTR)) and
                self_ref_if_known != none and
                {st_ref.ST_LOCAL, st_ref.ST_GLOBAL}.has(
                    self_ref_if_known.kind
                ) {
            # This must be the item we're accessing the function
            # on, and it's a concrete instance.
            tinfo.func_self_ref = self_ref_if_known.copy()
            assert(typename(tinfo.func_self_ref) != "list")
        }
        return tinfo
    }
    assert(target_ref.kind != st_ref.ST_LOCAL)
    var tinfo = new TypeInfo(TI_USERTYPE)
    if base_typeref_expr_if_known != none and
            base_typeref_expr_if_known.name != none {
        tinfo.orig_type_name = base_typeref_expr_if_known.name
        if not base_typeref_expr_if_known.is_func_ref and
                base_typeref_expr_if_known.is_user_type() {
            tinfo._orig_typeexpr =
                base_typeref_expr_if_known.copy()
        } elseif not base_typeref_expr_if_known.is_func_ref and
                not base_typeref_expr_if_known.is_user_type() {
            tinfo.kind = TI_C_TYPE
        }
    }
    tinfo.user_type_ref = target_ref.copy()
    tinfo.modifiers = []
    if base_typeref_expr_if_known != none {
        var texpr = base_typeref_expr_if_known
        for mod in texpr.modifiers {
            tinfo.modifiers.add(mod.copy())
        }
    } elseif project != none and
            tinfo._orig_typeexpr == none {
        var sinfo = st_ref.ref_to_symbol_info(
            target_ref,
            project=project, is_moose64=is_moose64,
        )
        if sinfo.typeref_expr != none and
                not sinfo.typeref_expr.is_func_ref {
            if sinfo.typeref_expr.is_user_type() {
                tinfo._orig_typeexpr =
                    sinfo.typeref_expr.copy()
            } elseif sinfo.typeref_expr.modifiers.len > 0 and
                    tinfo.modifiers.len == 0 {
                for mod in sinfo.typeref_expr.modifiers {
                    tinfo.modifiers.add(mod.copy())
                }
            }
        }
    }
    if tinfo._orig_typeexpr != none and
            tinfo.modifiers.len == 0 and
            tinfo._orig_typeexpr.modifiers.len > 0 {
        for mod in tinfo._orig_typeexpr.modifiers {
            tinfo.modifiers.add(mod.copy())
        }
    }
    return tinfo
}

func get_array_type_info(type_info,
        project=none, project_file=none,
        global_register_m64_array_callback=none,
        is_moose64=no) {
    if project_file != none and project == none {
        project = project_file.project
    }
    var mods_without_array_parts = []
    var array_type_mods = []
    var found_array_mod = no
    var nested_arrays = no
    var found_readonly_mod = no
    var last_array_idx = none

    var idx = 0
    for mod in type_info.modifiers {
        idx += 1
        if mod.name == "array" {
            if found_array_mod {
                nested_arrays = yes
            }
            found_array_mod = yes
            last_array_idx = idx
            continue
        }
        if mod.name == "readonly" {
            found_readonly_mod = yes
        }
    }
    if not found_array_mod {
        return none
    }

    idx = 0
    for mod in type_info.modifiers {
        idx += 1
        if {"ref", "c_array"}.has(mod.name) {
            if idx < last_array_idx {
                array_type_mods.add(mod.copy())
            } else {
                mods_without_array_parts.add(mod.copy())
            }
            continue
        }
        if mod.name == "readonly" {
            array_type_mods.add(mod.copy())
            continue
        }
        if mod.name == "array" {
            if idx < last_array_idx {
                array_type_mods.add(mod.copy())
            }
            continue
        }
        mods_without_array_parts.add(mod.copy())
    }

    var inner_type = type_info.copy()
    inner_type.modifiers = array_type_mods
    var array_key = none
    if nested_arrays {
        var array_name_result = get_array_type_info(
            inner_type,
            global_register_m64_array_callback=
                global_register_m64_array_callback,
            project=project,
            project_file=project_file,
            is_moose64=is_moose64,
        )
        assert(array_name_result != none)
        array_key = "__m64_array__" +
        array_name_result[1]
    } else {
        var inner_type_key_str = none
        var inner_type_expr =
            inner_type.convert_to_typeref_expr(
                project=project,
                is_moose64=is_moose64
            )
        if inner_type_expr != none {
            inner_type_expr.try_resolve_to_user_type_nonrecursive(
                project_file, is_moose64=is_moose64
            )
        }
        if inner_type_expr != none and
                inner_type_expr.storage_ref != none and
                {st_ref.ST_GLOBAL, st_ref.ST_GLOBALATTR}.has(
                    inner_type_expr.storage_ref.kind
                ) {
            inner_type_key_str = inner_type_expr.storage_ref.as_str()
        } else {
            inner_type_key_str = inner_type.orig_type_name
        }
        for mod in inner_type.modifiers {
            inner_type_key_str += mod.as_array_key()
        }
        array_key = "__m64_array__" +
            inner_type_key_str
    }

    var result = [array_key, inner_type,
        mods_without_array_parts]
    if global_register_m64_array_callback != none {
        global_register_m64_array_callback(result)
    }
    return result
}

