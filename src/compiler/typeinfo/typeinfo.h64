## @module compiler.typeinfo
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import textfmt from core.horse64.org

import compiler.ast as ast
import compiler.ast.analyze as ast_analyze
import compiler.ast.expr as ast_expr
import compiler.ast.transform as ast_transform
import compiler.builtin_syms as builtin_syms
import compiler.msg as msg
import compiler.storage.ref as st_ref
import compiler.storage.scope as st_scope
import compiler.typeinfo.ast_typeref as ast_typeref

extend type st_scope.SymbolInfo {
    var typeref_expr
    var type_storage_ref
}

extend type ast_expr.IdRefExpr {
    var value_typeref_expr
}

enum TypeInfoKind {
    TI_H64BUILTIN_TYPE,
    TI_C_TYPE,
    TI_USERTYPE,
    TI_FUNCREF,
}

## This is a concrete type info instance based on what was
## previously described on a syntactical level by
## @{compiler.typeinfo.ast_typeref.TypeRefExpr}.
## The main dfference is that the concrete type info can
## be bound to closure values like the self value.
type TypeInfo {
    var kind
    var c_type_name
    var type_ref_mods = []

    ## For `TI_USERTYPE` or `TI_FUNCREF`, this holds a @{compiler.
    ## storage.ref.StorageRef} that points to the global scope item.
    var user_type_ref

    ## For `TI_FUNCREF`, this retains the @{compiler.typeinfo.
    ## ast_typeref.TypeRefFuncExpr} with the exact parameter types.
    var func_typeexpr

    ## For `TI_FUNCREF`, this is either @{none} or if it was a func attr
    ## on an object instance, the @{compiler.storage.ref.StorageRef}
    ## that points to the concrete object instance.
    var func_self_ref

    var _orig_typeexpr protect
}

func TypeInfo.init(ti_kind) {
    self.kind = ti_kind
}

func TypeInfo.as_str {
    var t = "TypeInfo{"
        "kind=" + TypeInfoKind.num_label(self.kind) + " "
        "c_type_name=" + if self.c_type_name != none
            (textfmt.as_escaped_code_string(self.c_type_name))
            else ("none") + " "
        "user_type_ref=" + self.user_type_ref.as_str() + " "
        "func_typeexpr=" + self.func_typeexpr.as_str() + " "
        "func_self_ref=" + self.func_self_ref.as_str() +
        "}"
    return t
}

func TypeInfo._set_orig_type_expr(texpr) {
    self._orig_typeexpr = texpr.copy()
}

func TypeInfo.convert_to_typeref_expr(
        in_project_file=none, in_local_scope=none
        ) {
    if self.func_typeexpr != none {
        return self.func_typeexpr.copy()
    } elseif self._orig_typeexpr != none {
        return self._orig_typeexpr.copy()
    } elseif self.user_type_ref != none and
            in_project_file != none and
            {st_ref.ST_GLOBAL,
             st_ref.ST_MCREF}.has(self.user_type_ref.kind) {
        var pfile = in_project_file
        var local_gscope = in_project_file.global_scope
        if self.user_type_ref.kind == st_ref.ST_GLOBAL and
                pfile.project != none and
                pfile.project.storage_id_to_global_scope_map.has(
                    self.user_type_ref.id
                ) {
            var gscope = pfile.project.
                storage_id_to_global_scope_map[self.user_type_ref.id]
            var gscope_node = gscope.storage_id_to_entry[
                self.user_type_ref.id
            ]
            if gscope_node.kind == ast.N_STMT_STRUCT {
                var texpr = new ast_typeref.TypeRefExpr()
                texpr.name = gscope_node.label
                var import_typepath = pfile.global_scope.
                    get_import_path_for_global(
                        pfile, self.user_type_ref.id)
                if import_typepath.len > 0 {
                    texpr.type_path = import_typepath
                }
                for mod in self.type_ref_mods {
                    texpr.modifiers.add(texpr.copy())
                }
                return texpr
            }
        }
    }
    return none
}

func set_vattr_syminfo_early_type_info(
        vardef_stmt, symbol_info
        ) {
    if symbol_info.typeref_expr == none and
            vardef_stmt.has_type_expr {
        symbol_info.typeref_expr =
            vardef_stmt.subexprs[vardef_stmt.subexprs.len].copy()
    }
}

func try_resolve_symbol_typeref(
        project_file, var_decl_node, type_expr,
        sym_info, msgs, is_moose64=no
        ) {
    if var_decl_node.damaged or
            sym_info.type_storage_ref != none {
        return later
    }
    if type_expr != none {
        sym_info.typeref_expr = type_expr.copy()
    }
    if sym_info.typeref_expr == none {
        return later
    }
    var name = sym_info.name
    if is_moose64 {
        var cname = type_expr.get_c_builtin_for_m64_base_type()
        if cname != none {
            var builtin_ref =
                builtin_syms.get_m64_c_type_builtin_by_name(
                    project_file.project, cname, create_if_missing=yes
                )
            if builtin_ref == none {
                var_decl_node.damaged = yes
                msgs.add(new msg.FileMsg(
                    "Unexpectedly failed to register internal "
                    "C type \"" + cname + "\", is there a clash "
                    "with any included header files?",
                    source_file=project_file,
                    line=var_decl_node.line,
                    col=var_decl_node.col,
                ))
                return
            }
            sym_info.type_storage_ref = builtin_ref
            return
        }
    }
    var st_ref = type_expr.try_resolve_to_user_type(
        project_file, is_moose64=is_moose64
    ) later:

    await st_ref
    if st_ref != none {
        sym_info.type_storage_ref = st_ref
        return later
    }
    var_decl_node.damaged = yes
    msgs.add(new msg.FileMsg(
        "Unexpected typeref " +
        sym_info.typeref_expr.as_str() + ", "
        "failed to find referenced underlying type.",
        source_file=project_file,
        line=var_decl_node.line,
        col=var_decl_node.col,
    ))
    return later
}

func ensure_type_info_for_file(project_file, msgs, is_moose64=no) {
    var ast_tree = project_file.ast

    func resolve_typeref_visitor(node, parent) {
        if node.damaged {
            return later node
        }
        if node.kind == ast.N_STMT_VAR and node.has_type_expr {
            if node.symbol_info == none or
                    typename(node.symbol_info) != "list" {
                msgs.add(new msg.FileMsg(
                    "Internal error, encountered damaged node "
                    "with no symbol info: " + node.as_str() + " "
                    "Please report this to the compiler "
                    "makers.",
                    source_file=project_file,
                    line=node.line,
                    col=node.col,
                ))
                node.damaged = yes
                return later node
            }
            var type_expr = node.subexprs[node.subexprs.len]
            var idx = 0
            func process_labels {
                func handle_label(lbl) {
                    idx += 1
                    try_resolve_symbol_typeref(
                        project_file, node, type_expr,
                        node.symbol_info[idx], msgs,
                        is_moose64=is_moose64
                    ) later:
                }
                var queue = node.var_labels.copy()
                if queue.len == 0 {
                    return later
                }
                var item = queue.pop()
                var _unused = handle_label(item)
                later:

                await _unused
                if queue.len == 0 {
                    return later
                }
                item = queue.pop()
                _unused = handle_label(item) later repeat
            }
            process_labels()
            later:

            return later node
        } elseif node.kind == ast.N_STMT_FUNC or
                node.kind == ast.N_STMT_FUNCEXTEND {
            if node.symbol_info == none or
                    typename(node.symbol_info) == "list" {
                msgs.add(new msg.FileMsg(
                    "Internal error, encountered damaged node "
                    "with no symbol info: " + node.as_str() + " "
                    "Please report this to the compiler "
                    "makers.",
                    source_file=project_file,
                    line=node.line,
                    col=node.col,
                ))
                node.damaged = yes
                return later node
            }
            func handle_return_type {
                if node.kind == ast.N_STMT_FUNCEXTEND or
                        not node.has_return_type {
                    return later
                }
                var type_expr = node.subexprs[node.subexprs.len]
                try_resolve_symbol_typeref(
                    project_file, node, type_expr,
                    node.symbol_info, msgs,
                    is_moose64=is_moose64
                ) later:
            }
            handle_return_type()
            later:

            func process_args {
                if not node.has_arg_types {
                    return
                }
                func handle_arg(expr_item, sinfo_item) {
                    try_resolve_symbol_typeref(
                        project_file, node, expr_item,
                        sinfo_item, msgs,
                        is_moose64=is_moose64
                    ) later:
                }
                var queue = []
                var exprlist = node.get_local_args_type_expr_list()
                var sinfolist = node.get_local_args_symbol_info_list()
                if exprlist.len != sinfolist.len {
                    print(if is_moose64 ("moosec") else ("horsec") +
                        ": error: Fatal internal error: "
                        "List of local arg type expressions doesn't "
                        "match list of local arg symbol info in "
                        "length: exprlist=" + exprlist.as_str() + " "
                        "sinfolist=" + sinfolist.as_str())
                    throw new RuntimeError("Fatal internal error, "
                        "damaged func args with "
                        "exprlist.len != sinfolist.len")
                }
                assert(exprlist.len == sinfolist.len)
                var idx = 0
                for item in sinfolist {
                    idx += 1
                    queue.add([exprlist[idx], item])
                }
                if queue.len == 0 {
                    return later
                }
                var item = queue.pop()
                var _unused = handle_arg(item[1], item[2])
                later:

                await _unused
                if queue.len == 0 {
                    return later
                }
                item = queue.pop()
                _unused = handle_arg(item[1], item[2])
                later repeat
            }
            process_args()
            later:

            return later node
        }
        return later node
    }

    var result = ast_transform.visit_ast_tree(
        ast_tree, resolve_typeref_visitor,
        pass_func_boundaries=yes, parent_chain=no, backward=no)
    later:

    await result
    return later result
}

func ensure_all_type_info(project, msgs, is_moose64=no) {
    func do_unsafe {
        func process_file(pfile) {
            pfile.ensure_ast() later:

            var result = ensure_type_info_for_file(
                pfile, msgs, is_moose64=is_moose64
            ) later:

            await result
            if not result {
                return later no
            }
            return later yes
        }
        var check_went_ok = project.do_for_all_files(process_file)
        later:

        await check_went_ok
        for m in msgs {
            if m.kind == msg.M_ERROR {
                check_went_ok = no
            }
        }

        return later check_went_ok
    }
    var result = do_unsafe() later:

    await result

    ast_analyze.ensure_analysis_has_needed_error(
        result, msgs
    )
    return later result
}

func create_typeinfo_from_global_ref(
        target_ref, base_typeref_expr_if_known=none,
        base_node_if_known=none,
        base_symbol_info_if_known=none,
        self_node_if_known=none,
        self_ref_if_known=none,
        store_self_value_ref_for_funcs=no,
        is_moose64=no
        ) {
    if base_node_if_known != none and target_ref == none and
            base_node_if_known.kind == ast.N_EXPR_IDREF and
            base_node_if_known.ref != none {
        target_ref = base_node_if_known.ref.copy()
    }
    if (base_typeref_expr_if_known != none and
            base_typeref_expr_if_known.is_func_ref) or
            (base_symbol_info_if_known != none and
             {st_scope.SINFO_FUNC, st_scope.SINFO_FUNCATTR}.has(
                 base_symbol_info_if_known.kind
             )) {
        assert(target_ref.kind != st_ref.ST_LOCAL)
        var tinfo = new TypeInfo(
            TI_FUNCREF
        )
        if base_typeref_expr_if_known != none {
            tinfo.func_typeexpr =
                base_typeref_expr_if_known.copy()
        } else {
            tinfo.func_typeexpr =
                base_symbol_info_if_known.typeref_expr.copy()
        }
        if self_ref_if_known == none and
                self_node_if_known != none and
                self_node_if_known.kind == ast.N_EXPR_IDREF {
            self_ref_if_known = self_node_if_known.ref
        }
        if self_ref_if_known and self_node_if_known != none and
                self_node_if_known.kind == ast.N_EXPR_IDREF and
                self_node_if_known.ref != none {
            self_ref_if_known = self_node_if_known.ref
        }
        if store_self_value_ref_for_funcs and
                ((base_typeref_expr_if_known != none and
                  base_typeref_expr_if_known.is_func_attr) or
                 (base_symbol_info_if_known != none and
                  base_symbol_info_if_known.kind ==
                      st_scope.SINFO_FUNCATTR)) and
                self_ref_if_known != none and
                {st_ref.ST_LOCAL, st_ref.ST_GLOBAL}.has(
                    self_ref_if_known.kind
                ) {
            # This must be the item we're accessing the function
            # on, and it's a concrete instance.
            tinfo.func_self_ref = self_ref_if_known.copy()
            assert(typename(tinfo.func_self_ref) != "list")
        }
        return tinfo
    }
    assert(target_ref.kind != st_ref.ST_LOCAL)
    var tinfo = new TypeInfo(TI_USERTYPE)
    tinfo.user_type_ref = target_ref.copy()
    return tinfo
}

