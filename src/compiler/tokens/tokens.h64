# @module compiler.tokens
# Copyright (c) 2020-2022,  ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.


import uri from core.horse64.org

import compiler.limits
import compiler.msg
import compiler.project


type Token {
    var variant = "unknown"
    var text = ""
    var value = none

    ## @type compiler.project.ProjectFile
    var project_file
}


type TokenizeResult {
    ## @type [compiler.msg.FileMsg]
    var msgs = []

    ## @type [Token]
    var tokens = []

    ## @types (compiler.project.ProjectFile, none)
    var project_file
}


func tokenize_from_fileobj(fobj, project_file=none) {
    var result = new TokenizeResult()
    var contents = fobj.read(max_project_file_size + 1)
    if contents.len >= max_project_file_size + 1 {
        result.msgs.add(compiler.msg.FileMsg(
            "file exceeds maximum size limit of " +
            max_project_file_size + " characters",
            variant="error", project_file=project_file
        ))
        return result
    }
    var c = contents
    var clen = contents.len
    var i = 0
    while i < clen {

        i += 1
    }
    return result
}


func tokenize_file(path, project_file=none) {
    return tokenize_file_by_uri(
        uri.from_disk_path(path), project_file=project_file)
}


func tokenize_file_by_uri(source_uri, project_file=none) {
    source_uri = uri.normalize(source_uri)
    var resource = _uri_to_file_or_vfs_path(source_uri)
    var is_vfs = source_uri.lower().startswith("vfs://")
    if project_file == none {
        project_file = compiler.project.ProjectFile(
            source_uri=source_uri
        )
    }
    var fileobj = io.open(resource, "r")
    do {
        return tokenize_from_fileobj(fileobj,
            project_file=project_file)
    } finally {
        fileobj.close()
    }
}
