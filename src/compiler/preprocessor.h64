## @module compiler.preprocessor
# Copyright (c) 2024-2025, ellie/@ell1e & Horse64's contributors
# (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

prep{ if system.program_compiler_name.has("horse64-translator") }
import translator_internals from core.horse64.org
prep{ endif }
import path from core.horse64.org
import uri from core.horse64.org
import system from core.horse64.org

func preprocess_file(project, project_file, contents,
        is_moose64=no, override_compiler_name=none) {
    var program_name = if is_moose64 ("moosec") else ("horsec") + " "
        "v" + system.program_version
    if override_compiler_name != none {
        program_name = override_compiler_name
    }

    var base_dir_uri = project.base_dir_uri
    if base_dir_uri == none {
        base_dir_uri = project_file.source_uri
    }

    var modinfo = none
    func ensure_modinfo {
        if project.base_dir_uri == none {
            # We don't have any module info in this case.
            return later
        }
        # This also ensures that the source prefix is detected,
        # if we have any:
        modinfo = project.get_modinfo_for_file(
            project_file.source_uri)
        later:

        await modinfo
    }
    ensure_modinfo() later:

    var source_code_dir = none
    if base_dir_uri != none {
        if project.source_dir_prefix != none {
            source_dir_uri = path.join(base_dir_uri,
                project.source_dir_prefix)
        } else {
            source_dir_uri = base_dir_uri
        }
    }
    var modules_dir = none
    if base_dir_uri != none {
        modules_dir = path.join(base_dir_uri,
            "horse_modules")
    }

    prep{ if system.program_compiler_name.has("horse64-translator") }
    # This is the code path for using the python translator runtime.
    # When doing this, there's no HVM and none of the proper
    # preprocessor written in Moose64, so we have to use the hacky
    # Python preprocessor here.

    if project_file.source_uri == none {
        return later contents
    }
    if base_dir_uri != none and
            uri.get_protocol(base_dir_uri) != "file" {
        if contents.has("prep{") {
            throw new RuntimeError(
                "Unsupported code path for running in Python "
                "translator, can't preprocess remote files. "
                "Please bootstrap locally first, then retry."
            )
        }
        return later contents
    }

    # Do the actual preprocessing:
    var result = translator_internals.preprocess_file_in_translator(
        contents, base_dir_uri, source_code_dir,
        modules_dir,
        project_file.source_uri,
        if modinfo != none (modinfo.module_name) else (none),
        if modinfo != none (modinfo.package_name) else (none),
        program_name
    )
    contents = result
    prep{ else }
    throw new RuntimeError("Not implemented yet.")
    prep{ endif }
    return later contents
}
