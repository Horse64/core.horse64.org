# @module compiler.ast.call_stmt
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.ast.block as block
import compiler.msg as msg
import compiler.token as token

type CallStmt base ast.StmtNode {
}

func CallStmt.init {
    base.init()
    self.kind = ast.N_STMT_CALL
}

func CallStmt.as_json_obj {
    var output = base.as_json_obj()
    return output
}

type AssignStmt base ast.StmtNode {
}

func AssignStmt.init {
    base.init()
    self.kind = ast.N_STMT_ASSIGN
}

func parse(tokens, pos, msgs, project_file=none) {
    var stmt = new CallStmt()
    var token_len = tokens.len
    var startpos = pos

    if pos > token_len or
            tokens[pos].kind != token.T_IDENT {
        return later none
    }

    # To check this is a call or assign, find the '(' or '=':
    var is_call = yes
    var assign_or_call_idx = -1
    var i = pos + 1
    while yes {
        if i > token_len {
            break
        } elseif tokens[i].kind == token.T_DOT {
            if i + 1 > token_len or
                    tokens[i + 1].kind != token.T_IDENT {
                break
            }
            i += 2
            continue
        } elseif tokens[i].kind == token.T_BRACKET and
                tokens[i].str == "[" {
            var bracket_depth = 1
            i += 1
            while yes {
                if i > token_len {
                    break
                }
                if tokens[i].kind == token.T_BRACKET {
                    if tokens[i].str == "[" or
                            tokens[i].str == "(" or
                            tokens[i].str == "{" {
                        bracket_depth += 1
                    } else {
                        bracket_depth -= 1
                        if bracket_depth < 0 {
                            break
                        }
                    }
                }
            }
            i += 1
            continue
        } elseif tokens[i].kind == token.T_BRACKET and
                tokens[i].str == "(" {
            assign_or_call_idx = i
            break
        } elseif tokens[i].kind == token.T_MATHASSIGN or
                token[i].kind == T_ASSIGN {
            assign_or_call_idx = i
            is_call = no
            break
        } else {
            break
        }
    }
    if assign_or_call_idx < 0 {
        return later none
    }

    # Parse the call or lvalue expression:
    var v1 = expr.parse_expression(
        tokens, pos,
        msgs, max_len=(if is_call (token_len) else
            (assign_or_call_idx - pos)),
        project_file=none, debug=no
    ) later:
    await v1

    if is_call {
        # Check if we actually got a call expression:
        if v1 == none or v1.kind != ast.N_EXPR_BINOP {
            msgs.add(new msg.FileMsg(
                "Unexpected expression " +
                (if v1 != none ("of kind " +
                 ast.NodeKind.num_label(v1.kind)) else
                 ("starting with token " +
                  token.describe_token(tokens[pos]))) +
                ", expected valid call expression.",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
        } elseif v1.optoken.str != "(" {
            msgs.add(new msg.FileMsg(
                "Unexpected binary operator expression " +
                token.describe_token(v1.optoken) +
                ", expected call statement with no surrounding " +
                "operator expressions, for statement starting in " +
                "line " + token.get_line(tokens, pos) +
                ", column " + token.get_col(tokens, pos) + ".",
                source_file=project_file,
                line=v1.optoken.line,
                col=v1.optoken.col,
            ))
        } else {
            stmt.subexprs.add(v1)
        }
        if v1 != none {
            pos += v1.token_len
        } else {
            var skiplen = token.get_naive_stmt_or_expr_len(
                tokens, pos, for_expr=no
            )
            pos += skiplen
        }
        stmt.token_len = (pos - startpos)
        return later stmt
    }
    assert(not is_call)

    var v2 = expr.parse_expression(
        tokens, assign_or_call_idx + 1,
        msgs,
        project_file=none, debug=no
    ) later:
    await v2

    pos += v2.token_len
    stmt.token_len = (pos - startpos)
    stmt.subexprs.add(v1)
    stmt.subexprs.add(v2)
    return stmt
}

