# @module compiler.ast.func_stmt
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org

import compiler.ast as ast
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.ast.block as block
import compiler.msg as msg
import compiler.token as token

type FuncStmt base ast.StmtNode {
    var name
    var type_path = none
    var arg_names = []
    var arg_defaults = []
}

func FuncStmt.init {
    base.init()
    self.kind = ast.N_STMT_FUNC
}

func FuncStmt.as_json_obj {
    var output = base.as_json_obj()
    output["name"] = self.name
    output["type_path"] = self.type_path
    output["arg_names"] = []
    output["arg_defaults"] = []
    return output
}

func parse(tokens, pos, msgs, project_file=none, debug=no) {
    var stmt = new FuncStmt()
    var tokens_len = tokens.len
    var startpos = pos

    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            tokens[pos].str != "func" {
        return later none
    }
    if debug {
        print("compiler.ast.func_stmt: parse() on " +
            tokens.sub(pos, math.min(pos + 10, tokens_len)).as_str() +
            "... with pos=" + pos.as_str() + ", "
            "tokens.len=" + tokens.len.as_str())
    }
    stmt.pos = token.get_line(tokens, pos)
    stmt.col = token.get_col(tokens, pos)
    pos += 1

    # Bail with error if no module path follows at all:
    if pos > tokens_len or
            tokens[pos].kind != token.T_IDENT {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected identifier (T_IDENT) specifying "
            "'func' name.",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        var skiplen = token.get_naive_stmt_or_expr_len(
            tokens, startpos, bracket_depth=0
        )
        assert(skiplen > 0)
        var invalid_st = new invalid_stmt.InvalidStmt(
            skiplen
        )
        invalid_st.line = token.get_line(tokens, startpos)
        invalid_st.col = token.get_col(tokens, startpos)
        return later invalid_st
    }
    stmt.name = tokens[pos].str
    pos += 1

    # Extract components of type prefix, if any:
    while pos + 1 <= tokens_len and
            tokens[pos].kind == token.T_DOT and
            tokens[pos + 1].kind == token.T_IDENT {
        if stmt.type_path == none {
            stmt.type_path = []
        }
        stmt.type_path.add(stmt.name)
        stmt.name = tokens[pos + 1].str
        pos += 2
    }

    # Now we must have either '(' for arguments, or '{' for code block:
    if pos > tokens_len or
            tokens[pos].kind != token.T_BRACKET or
            not {"(", "{"}.has(tokens[pos].str) {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected '(' or '{' (T_BRACKET) for "
            "arguments or code block.",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        pos -= 1
        var skiplen = token.get_naive_stmt_or_expr_len(
            tokens, pos, bracket_depth=0, for_expr=no
        )
        assert(skiplen > 0)
        stmt.token_len = (pos - startpos) + skiplen
        return later stmt
    }

    func get_func_arguments {
        var args = new expr.CallOrDefArgsExpr()
        args.token_len = 0
        if tokens[pos].kind != token.T_BRACKET or
                tokens[pos].str != "(" {
            return args
        }
        var v = expr.parse_call_or_funcdef_args(
            tokens, pos, msgs,
            is_call=no, project_file=project_file,
            debug=debug
        ) later:

        await v
        if debug {
            print("compiler.ast.func_stmt: parse() has "
                "func calls argument: " + v.as_json_obj().as_str())
        }
        return v
    }

    # Parse arguments if we got a '(' character:
    var args = get_func_arguments() later:

    await args
    if args != none {
        for arg in args.subexprs {
            if arg.kind == ast.N_EXPR_ARGNAME {
                stmt.arg_names.add(arg.label)
            } else {
                assert(arg.kind == ast.N_EXPR_CALLKWARG)
                stmt.arg_names.add(arg.label)
                assert(arg.subexprs.len == 1)
                stmt.arg_defaults.add(arg.subexprs[1])
            }
        }
        pos += args.token_len
    }

    # Now parse the required code block opening with '{' here:
    var block_result = block.parse(
        tokens, pos, msgs, project_file=project_file,
        debug=debug,
        block_purpose_name="for func statement starting in "
            "line " + token.get_line(tokens, startpos).as_str() +
            ", column " + token.get_col(tokens, startpos).as_str()
    ) later:

    await block_result
    pos += block_result.token_len
    stmt.subblocks.add(block_result.stmts)
    stmt.token_len = (pos - startpos)
    return later stmt
}

