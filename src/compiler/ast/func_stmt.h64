## @module compiler.ast.func_stmt
# Copyright (c) 2023-2024, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org

import compiler.ast as ast
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.ast.block as block
import compiler.msg as msg
import compiler.token as token

type FuncStmt base ast.StmtNode {
    var label
    var type_path = none
    var arg_labels = []
    var arg_defaults = []
    var kw_arg_count = 0
}

func FuncStmt.init {
    base.init()
    self.kind = ast.N_STMT_FUNC
}

func FuncStmt.copy {
    var self_copy = base.copy()
    self_copy.type_path = self.type_path.copy()
    self_copy.arg_labels = []
    for label in self.arg_labels {
        self_copy.arg_labels.add(label)
    }
    self_copy.arg_defaults = []
    for default_value in self.arg_defaults {
        if default_value == none {
            self_copy.arg_defaults.add(none)
        } else {
            self_copy.arg_defaults.add(default_value.copy())
        }
    }
    return self_copy
}

func FuncStmt.as_json_obj {
    var output = base.as_json_obj()
    output["label"] = self.label
    output["type_path"] = self.type_path
    output["arg_labels"] = self.arg_labels
    output["arg_defaults"] = []
    for argdef in self.arg_defaults {
        if argdef == none {
            output["arg_defaults"].add(none)
            continue
        }
        output["arg_defaults"].add(argdef.as_json_obj())
    }
    return output
}

func FuncStmt.as_code(indent=0) {
    return _func_stmt_to_code(
        self, is_extend=no, indent=indent)
}

func _func_stmt_to_code(stmt, is_extend=no, indent=0) {
    if stmt.damaged {
        return " ".rep(indent) + "(damaged func)"
    }
    var t = " ".rep(indent) +
        if is_extend ("extend ") else ("") + "func "
    if stmt.type_path != none {
        t += stmt.type_path.join(".") + "."
    }
    t += stmt.label
    if stmt.arg_labels.len > 0 {
        t += "("
        var is_first = yes
        var pos_arg_count = stmt.arg_labels.len - stmt.kw_arg_count
        var i = 1
        while i <= pos_arg_count {
            if is_first {
                is_first = no
            } else {
                t += ","
            }
            t += stmt.arg_labels[i]
            i += 1
        }
        while i <= stmt.kw_arg_count + pos_arg_count {
            if is_first {
                is_first = no
            } else {
                t += ","
            }
            t += stmt.arg_labels[i] + "=" +
                stmt.arg_defaults[i - pos_arg_count].as_code(
                    indent=indent
                )
            i += 1
        }
        t += ")"
    }
    t += " {\n"
    for substmt in stmt.subblocks[1] {
        t += substmt.as_code(indent=(indent + 4)) + "\n"
    }
    t += " ".rep(indent) + "}"
    return t
}

type FuncExtendStmt base ast.StmtNode {
    var type_path = none
    var arg_labels = []
    var arg_defaults = []
    var kw_arg_count = 0
}

func FuncExtendStmt.init {
    base.init()
    self.kind = ast.N_STMT_FUNCEXTEND
}

func FuncExtendStmt.copy {
    var self_copy = base.copy()
    self_copy.type_path = self.type_path.copy()
    for label in self.arg_labels {
        self_copy.arg_labels.add(label)
    }
    for default_value in self.arg_defaults {
        if default_value == none {
            self_copy.arg_defaults.add(none)
        } else {
            self_copy.arg_defaults.add(default_value.copy())
        }
    }
    return self_copy
}

func FuncExtendStmt.as_json_obj {
    var output = base.as_json_obj()
    output["label"] = self.label
    output["type_path"] = self.type_path
    output["arg_labels"] = self.arg_labels
    output["arg_defaults"] = []
    for argdef in self.arg_defaults {
        if argdef == none {
            output["arg_defaults"].add(none)
            continue
        }
        output["arg_defaults"].add(argdef.as_json_obj())
    }
    return output
}

func FuncExtendStmt.as_code(indent=0) {
    return _func_stmt_to_code(
        self, is_extend=yes, indent=indent)
}

func parse(tokens, pos, msgs, project_file=none, debug=no) {
    var stmt
    var tokens_len = tokens.len
    var startpos = pos

    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            (tokens[pos].str != "func" and
             (tokens[pos].str != "extend" or
              pos + 1 > tokens_len or
              tokens[pos + 1].str != "func")) {
        return later none
    }
    if debug {
        print("compiler.ast.func_stmt: parse() on " +
            tokens.sub(pos, math.min(pos + 10, tokens_len)).as_str() +
            "... with pos=" + pos.as_str() + ", "
            "tokens.len=" + tokens.len.as_str())
    }
    var is_extend = (tokens[pos].str == "extend")
    pos += 1
    if is_extend {
        stmt = new FuncExtendStmt()
        pos += 1
    } else {
        stmt = new FuncStmt()
    }
    stmt.line = token.get_line(tokens, pos)
    stmt.col = token.get_col(tokens, pos)

    # Bail with error if no module path follows at all:
    if pos > tokens_len or
            tokens[pos].kind != token.T_IDENT {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected identifier (T_IDENT) specifying "
            "'func' name.",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        var skiplen = math.max(1,
            token.skip_in_broken_stmt_to_code_block(
                tokens, pos - 1, bracket_depth=0
            ) - 1)
        skiplen += token.skip_code_block_if_any(
            tokens, pos + skiplen
        )
        pos += skiplen
        var invalid_st = new invalid_stmt.InvalidStmt(
            pos - startpos
        )
        invalid_st.line = token.get_line(tokens, startpos)
        invalid_st.col = token.get_col(tokens, startpos)
        return later invalid_st
    }
    var name = tokens[pos].str
    pos += 1

    # Extract components of type prefix, if any:
    while pos + 1 <= tokens_len and
            tokens[pos].kind == token.T_DOT and
            tokens[pos + 1].kind == token.T_IDENT {
        if stmt.type_path == none {
            stmt.type_path = []
        }
        stmt.type_path.add(name)
        name = tokens[pos + 1].str
        pos += 2
    }
    stmt.label = name

    # Now we must have either '(' for arguments, or '{' for code block:
    if pos > tokens_len or
            tokens[pos].kind != token.T_ENCLOSE or
            not {"(", "{"}.has(tokens[pos].str) {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected '(' or '{' (T_ENCLOSE) for "
            "arguments or code block.",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        var skiplen = math.max(1,
            token.skip_in_broken_stmt_to_code_block(
                tokens, pos - 1, bracket_depth=0
            ) - 1)
        skiplen += token.skip_code_block_if_any(
            tokens, pos + skiplen
        )
        pos += skiplen
        stmt.damaged = yes
        stmt.token_len = pos - startpos
        return later stmt
    }

    func get_func_arguments {
        if tokens[pos].kind != token.T_ENCLOSE or
                tokens[pos].str != "(" {
            var args = new expr.CallArgsExpr()
            args.token_len = 0
            return args
        }
        var v = expr.parse_call_or_funcdef_args(
            tokens, pos, msgs,
            is_call=no, project_file=project_file,
            debug=debug
        ) later:

        await v
        if debug {
            print("compiler.ast.func_stmt: parse() has "
                "func calls argument: " + v.as_json_obj().as_str())
        }
        return v
    }

    # Parse arguments if we got a '(' character:
    var args = get_func_arguments() later:

    await args
    if args != none {
        for arg in args.subexprs {
            if arg.kind == ast.N_EXPR_ARGNAME {
                stmt.arg_labels.add(arg.label)
            }
        }
        for arg in args.subexprs {
            if arg.kind == ast.N_EXPR_ARGNAME {
                continue
            }
            assert(arg.kind == ast.N_EXPR_CALLKWARG)
            stmt.arg_labels.add(arg.label)
            assert(arg.subexprs.len == 1)
            stmt.arg_defaults.add(arg.subexprs[1])
            stmt.kw_arg_count += 1
        }
        pos += args.token_len
    }
    # We're not retaining the actual arg item,
    # since this isn't a call.
    args = none

    # Now parse the required code block opening with '{' here:
    var block_result = block.parse(
        tokens, pos, msgs, project_file=project_file,
        debug=debug,
        block_purpose_name="for func statement starting in "
            "line " + token.get_line(tokens, startpos).as_str() +
            ", column " + token.get_col(tokens, startpos).as_str()
    ) later:

    await block_result
    if block_result.has_damage() {
        stmt.damaged = yes
    }
    pos += block_result.token_len
    stmt.subblocks.add(block_result.stmts)
    stmt.token_len = (pos - startpos)
    return later stmt
}

