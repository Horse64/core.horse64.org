## @module compiler.ast.func_stmt
# Copyright (c) 2023-2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org

import compiler.ast as ast
import compiler.ast.block as block
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.storage.scope as st_scope
import compiler.typeinfo.ast_typeref as ast_typeref
import compiler.msg as msg
import compiler.token as token

type FuncStmtFuncExtendStmtShared base ast.StmtNode {
}

type FuncStmt base FuncStmtFuncExtendStmtShared {
    var label
    var type_path = none
    var has_return_type = no
    var has_arg_types = no
    var has_failable = no
    var is_override = no
    var is_readonly = no
    var arg_labels = []
    var kw_arg_count = 0
}

func FuncStmt.init {
    base.init()
    self.kind = ast.N_STMT_FUNC
}

func FuncStmt.copy {
    var self_copy = base.copy()
    self_copy.type_path = self.type_path.copy()
    self_copy.arg_labels = []
    for label in self.arg_labels {
        self_copy.arg_labels.add(label)
    }
    return self_copy
}

func FuncStmt.as_json_obj {
    var output = base.as_json_obj()
    output["label"] = self.label
    output["type_path"] = self.type_path
    output["has_return_type"] = self.has_return_type
    output["has_arg_types"] = self.has_arg_types
    output["has_failable"] = self.has_failable
    output["is_override"] = self.is_override
    output["is_readonly"] = self.is_readonly
    output["arg_labels"] = self.arg_labels
    output["kw_arg_count"] = self.kw_arg_count
    return output
}

func is_pos_inside_possible_func_prop_list(
        tokens, pos, max_len=none, is_moose64=no) {
    if max_len == none {
        max_len = tokens.len
    }
    var func_props
    if is_moose64 {
        func_props = ["failable", "override", "readonly"]
    } else {
        func_props = []
    }
    func pos_is_props_kw(pos) {
        if pos < 1 or pos > max_len {
            return no
        }
        if {token.T_KEYWORD, token.T_IDENT}.has(
                tokens[pos].kind) and
                func_props.has(tokens[pos].str) {
            return yes
        }
        return no
    }
    var i = pos
    if not pos_is_props_kw(i) {
        return no
    }
    while i >= 1 and (tokens[i].kind != token.T_ENCLOSE
            or tokens[i].str != ")") and
            pos_is_props_kw(i) {
        i -= 1
    }
    if i < 1 or tokens[i].kind != token.T_ENCLOSE or
            tokens[i].str != ")" {
        return no
    }
    return yes
}

## Returns the real, final argument count when considering
## all 'extend func' statements that apply to this function.
func FuncStmtFuncExtendStmtShared.extended_final_arg_count {
    return self.func_scope.extended_final_arg_count()
}

## Returns the real, final keyword argument count when considering
## all 'extend func' statements that apply to this function.
func FuncStmtFuncExtendStmtShared.extended_final_kw_arg_count {
    return self.func_scope.extended_final_kw_arg_count()
}

## Returns the real, final list of argument names when considering
## all 'extend func' statements that apply to this function.
func FuncStmtFuncExtendStmtShared.extended_final_arg_names {
    return self.func_scope.extended_final_arg_names()
}

## Returns the real, final list of arg @{compiler.type_info.
## ast_typeref.TypeRefExpr}s when considering all
## 'extend func' statements that apply to this function.
func FuncStmtFuncExtendStmtShared.extended_final_arg_type_exprs {
    return self.func_scope.extended_final_arg_type_exprs()
}

### Returns whether the final assembled func is marked as
### "readonly" or not.
func FuncStmtFuncExtendStmtShared.extended_final_is_readonly {
    return self.func_scope.extended_final_is_readonly()
}

## Returns the real, final return type, which when queried
## on an 'extend func' statement will get you the base func's
## return type.
func FuncStmtFuncExtendStmtShared.extended_final_has_return_type {
    var base_func_scope = self.func_scope.base_func_scope
    if base_func_scope == none {
        base_func_scope = self.func_scope
    }
    return base_func_scope.has_return_type
}

func FuncStmtFuncExtendStmtShared.extended_final_has_arg_types {
    var base_func_scope = self.func_scope.base_func_scope
    if base_func_scope == none {
        base_func_scope = self.func_scope
    }
    return base_func_scope.has_arg_types
}

func FuncStmtFuncExtendStmtShared.extended_final_set_has_arg_types {
    if self.extended_final_has_arg_types() {
        return yes
    }
    if self.extended_final_arg_count() > 0 {
        return no
    }
    var base_func_scope = self.func_scope.base_func_scope
    if base_func_scope == none {
        base_func_scope = self.func_scope
    }
    base_func_scope.has_arg_types = yes
    return yes
}

## Returns the real, final return @{compiler.type_info.
## ast_typeref.TypeRefExpr}, which when queried on an
## 'extend func' statement will get you the base func's
## return type's typeref expression.
func FuncStmtFuncExtendStmtShared.extended_final_return_type_expr {
    var base_func_scope = self.func_scope.base_func_scope
    if base_func_scope == none {
        base_func_scope = self.func_scope
    }
    return base_func_scope.return_type_expr
}

## Get the full symbol info for the real, final arguments
## provided by any additional `extend func` statements.
func FuncStmtFuncExtendStmtShared.extended_final_symbol_info_list {
    var base_func_scope = self.func_scope.base_func_scope
    if base_func_scope == none {
        base_func_scope = self.func_scope
    }
    return base_func_scope.arg_symbol_info.copy()
}

func _get_local_args_symbol_info_list(stmt) {
    var base_func_scope = none
    base_func_scope = stmt.func_scope.base_func_scope
    if base_func_scope == none {
        base_func_scope = stmt.func_scope
    }
    var sinfo_list = []
    for lbl in stmt.arg_labels {
        var i = 1
        while i <= base_func_scope.arg_names.len {
            if base_func_scope.arg_names[i] != lbl {
                i += 1
                continue
            }
            sinfo_list.add(base_func_scope.arg_symbol_info[i])
            i += 1
        }
    }
    return sinfo_list
}

func _get_local_args_type_expr_list(stmt) {
    if not stmt.has_arg_types {
        return []
    }
    var type_expr_list = []
    var i = 1
    var pos_arg_count = stmt.arg_labels.len - stmt.kw_arg_count
    while i <= stmt.kw_arg_count + pos_arg_count {
        type_expr_list.add(stmt.subexprs[stmt.kw_arg_count + i])
        i += 1
    }
    return type_expr_list
}

## Get the symbol info for only the arguments provided by
## this statement *excluding* any `extend func` statements.
func FuncStmtFuncExtendStmtShared.get_local_args_symbol_info_list {
    return _get_local_args_symbol_info_list(self)
}

## Get type expressions for only the arguments provided by
## this statement *excluding* any `extend func` statements.
func FuncStmtFuncExtendStmtShared.get_local_args_type_expr_list {
    return _get_local_args_type_expr_list(self)
}

func FuncStmt.as_code(indent=0) {
    return _func_stmt_to_code(
        self, is_extend=no, indent=indent)
}

func _func_stmt_to_code(stmt, is_extend=no, indent=0) {
    if stmt.damaged {
        return " ".rep(indent) + "(damaged func)"
    }
    var t = " ".rep(indent) +
        if is_extend ("extend ") else ("") + "func "
    if stmt.type_path != none {
        t += stmt.type_path.join(".") + "."
    }
    t += stmt.label
    if stmt.arg_labels.len > 0 {
        t += "("
        var is_first = yes
        var pos_arg_count = stmt.arg_labels.len - stmt.kw_arg_count
        var i = 1
        while i <= pos_arg_count {
            if is_first {
                is_first = no
            } else {
                t += ", "
            }
            t += stmt.arg_labels[i]
            if stmt.has_arg_types {
                t += " <- " + stmt.subexprs[stmt.kw_arg_count + i].
                    as_code(indent=indent)
            }
            i += 1
        }
        while i <= stmt.kw_arg_count + pos_arg_count {
            if is_first {
                is_first = no
            } else {
                t += ", "
            }
            t += stmt.arg_labels[i]
            if stmt.has_arg_types {
                t += " <- " + stmt.subexprs[stmt.kw_arg_count + i].
                    as_code(indent=indent)
            }
            t += "=" + stmt.subexprs[i - pos_arg_count].
                as_code(indent=indent)
            i += 1
        }
        t += ")"
    }
    if not is_extend and stmt.has_return_type {
        t += " -> " + stmt.subexprs[stmt.subexprs.len].
            as_code(indent=(indent + 4))
    }
    if stmt.is_readonly {
        t += " readonly"
    }
    if stmt.has_failable {
        t += " failable"
    }
    if stmt.is_override {
        t += " override"
    }
    t += " {\n"
    for substmt in stmt.subblocks[1] {
        t += substmt.as_code(indent=(indent + 4)) + "\n"
    }
    t += " ".rep(indent) + "}"
    return t
}

type FuncExtendStmt base FuncStmtFuncExtendStmtShared {
    var type_path = none
    var arg_labels = []
    var kw_arg_count = 0
    var has_arg_types = no
}

func FuncExtendStmt.init {
    base.init()
    self.kind = ast.N_STMT_FUNCEXTEND
}

func FuncExtendStmt.copy {
    var self_copy = base.copy()
    self_copy.type_path = self.type_path.copy()
    for label in self.arg_labels {
        self_copy.arg_labels.add(label)
    }
    return self_copy
}

func FuncExtendStmt.as_json_obj {
    var output = base.as_json_obj()
    output["label"] = self.label
    output["type_path"] = self.type_path
    output["has_arg_types"] = self.has_arg_types
    output["arg_labels"] = self.arg_labels
    return output
}

func FuncExtendStmt.as_code(indent=0) {
    return _func_stmt_to_code(
        self, is_extend=yes, indent=indent)
}

## Get the symbol info for only the arguments provided by
## this 'extend func' statement.
func FuncStmt.get_local_args_symbol_info_list {
    return _get_local_args_symbol_info_list(self)
}

## Get the type expressions for only the arguments provided by
## this 'extend func' statement.
func FuncStmt.get_local_args_type_expr_list {
    return _get_local_args_type_expr_list(self)
}

func parse(tokens, pos, msgs, project_file=none,
           is_moose64=no, debug=no) {
    var stmt
    var tokens_len = tokens.len
    var startpos = pos

    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            (tokens[pos].str != "func" and
             (tokens[pos].str != "extend" or
              pos + 1 > tokens_len or
              tokens[pos + 1].str != "func")) {
        return later none
    }
    if debug {
        print("compiler.ast.func_stmt: parse() on " +
            tokens.sub(pos, math.min(pos + 10, tokens_len)).as_str() +
            "... with pos=" + pos.as_str() + ", "
            "tokens.len=" + tokens.len.as_str())
    }
    var is_extend = (tokens[pos].str == "extend")
    pos += 1
    if is_extend {
        stmt = new FuncExtendStmt()
        pos += 1
    } else {
        stmt = new FuncStmt()
    }
    stmt.line = token.get_line(tokens, pos)
    stmt.col = token.get_col(tokens, pos)

    # Bail with error if no module path follows at all:
    if pos > tokens_len or
            tokens[pos].kind != token.T_IDENT {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected identifier (T_IDENT) specifying "
            "'func' name.",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        var skiplen = math.max(1,
            token.skip_in_broken_stmt_to_code_block(
                tokens, pos - 1, bracket_depth=0
            ) - 1)
        skiplen += token.skip_code_block_if_any(
            tokens, pos + skiplen, is_moose64=is_moose64
        )
        pos += skiplen
        var invalid_st = new invalid_stmt.InvalidStmt(
            pos - startpos
        )
        invalid_st.line = token.get_line(tokens, startpos)
        invalid_st.col = token.get_col(tokens, startpos)
        return later invalid_st
    }
    var name = tokens[pos].str
    pos += 1

    # Extract components of type prefix, if any:
    while pos + 1 <= tokens_len and
            tokens[pos].kind == token.T_DOT and
            tokens[pos + 1].kind == token.T_IDENT {
        if stmt.type_path == none {
            stmt.type_path = []
        }
        stmt.type_path.add(name)
        name = tokens[pos + 1].str
        pos += 2
    }
    stmt.label = name

    # Now we must have either '(' for arguments, or '{' for code block:
    var m64_func_props = {"failable", "override"}
    var m64_nonkw_func_props = {"readonly"}
    if pos > tokens_len or
            ((tokens[pos].kind != token.T_ENCLOSE or
            not {"(", "{"}.has(tokens[pos].str)) and
            (not is_moose64 or
             (tokens[pos].kind != token.T_RIGHTPTR and
              (tokens[pos].kind != token.T_IDENT or
               not m64_nonkw_func_props.has(tokens[pos].str)) and
              (tokens[pos].kind != token.T_KEYWORD or
               not m64_func_props.has(tokens[pos].str))))) {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected '(' or '{' (T_ENCLOSE) for "
            "arguments or code block.",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        var skiplen = math.max(1,
            token.skip_in_broken_stmt_to_code_block(
                tokens, pos - 1, bracket_depth=0
            ) - 1)
        skiplen += token.skip_code_block_if_any(
            tokens, pos + skiplen
        )
        pos += skiplen
        stmt.damaged = yes
        stmt.token_len = pos - startpos
        return later stmt
    }

    func get_func_arguments {
        if pos > tokens_len or
                tokens[pos].kind != token.T_ENCLOSE or
                tokens[pos].str != "(" {
            var args = new expr.CallArgsExpr()
            assert(not args.is_stmt)
            args.token_len = 0
            return args
        }
        var v = expr.parse_call_or_funcdef_args(
            tokens, pos, msgs,
            require_type_refs=is_moose64, is_moose64=is_moose64,
            is_call=no, project_file=project_file,
            debug=debug
        ) later:

        await v
        if debug {
            print("compiler.ast.func_stmt: parse() has "
                "func calls argument: " + v.as_json_obj().as_str())
        }
        return v
    }

    # Parse arguments if we got a '(' character:
    var argsobj = get_func_arguments() later:

    await argsobj
    if argsobj != none {
        var args = argsobj.subexprs.copy()
        var argtypes = []
        if argsobj.has_types {
            argtypes = args.sub(args.len / 2 +  1)
            args = args.sub(1, args.len / 2)
            stmt.has_arg_types = yes
        }
        for arg in args {
            if arg.kind == ast.N_EXPR_ARGNAME {
                stmt.arg_labels.add(arg.label)
            }
        }
        var type_exprs = []
        var idx = 0
        for arg in args {
            idx += 1
            if arg.kind == ast.N_EXPR_ARGNAME or
                    arg.kind == ast.N_EXPR_INVALID {
                if argsobj.has_types {
                    type_exprs.add(argtypes[idx])
                }
                continue
            }
            assert(arg.kind == ast.N_EXPR_CALLKWARG)
            stmt.arg_labels.add(arg.label)
            assert(arg.subexprs.len == 1)
            stmt.subexprs.add(arg.subexprs[1])
            if argsobj.has_types {
                type_exprs.add(argtypes[idx])
            }
            stmt.kw_arg_count += 1
        }
        stmt.subexprs += type_exprs
        pos += argsobj.token_len
    }
    # We're not retaining the actual arg item,
    # since this isn't a call.
    argsobj = none

    # Check if this is 'failable':
    while is_moose64 and not is_extend and
            pos <= tokens_len and
            ((tokens[pos].kind == token.T_KEYWORD and
              m64_func_props.has(tokens[pos].str)) or
             (tokens[pos].kind == token.T_IDENT and
              m64_nonkw_func_props.has(tokens[pos].str))) {
        var prop = tokens[pos].str
        if prop == "failable" {
            stmt.has_failable = yes
        } elseif prop == "override" {
            stmt.is_override = yes
        } elseif prop == "readonly" {
            stmt.is_readonly = yes
        }
        pos += 1
    }
    if (stmt.type_path == none or stmt.type_path.len == 0) and
            is_moose64 and stmt.is_readonly {
        if not stmt.damaged {
            msgs.add(new msg.FileMsg(
                "Unexpected func that isn't a func attr "
                "but it's marked readonly, which is only "
                "meaningful for func attrs.",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
        }
        stmt.damaged = yes
    }

    # Parse return type if any:
    var type_expr = none
    func parse_type_if_any(
            tokens, pos, stmt, msgs, project_file,
            is_moose64
            ) {
        if not is_moose64 or is_extend or
                pos > tokens_len or
                tokens[pos].kind != token.T_RIGHTPTR {
            return later 0
        }
        var startpos = pos
        pos += 1

        var v = ast_typeref.parse_typeref(
            tokens, pos, msgs, is_moose64=is_moose64,
            project_file=project_file, debug=debug
        ) later:

        await v
        if v == none {
            msgs.add(new msg.FileMsg(
                "Unexpected " +
                token.describe_token_at(tokens, pos) +
                ", expected expression to declare type.",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
            var skiplen = math.max(1,
                token.get_naive_stmt_or_expr_len(
                    tokens, pos - 1, bracket_depth=0, for_expr=no,
                    is_moose64=is_moose64
                ) - 1)
            v = new expr.InvalidExpr(skiplen)
            stmt.damaged = yes
        } elseif v.damaged {
            stmt.damaged = yes
        }
        type_expr = v
        assert(not stmt.has_return_type)
        stmt.has_return_type = yes
        stmt.subexprs.add(v)
        pos += v.token_len
        return later (pos - startpos)
    }
    var advancelen = parse_type_if_any(
        tokens, pos, stmt, msgs, project_file, is_moose64
    ) later:

    await advancelen
    pos += advancelen

    # Now parse the required code block opening with '{' here:
    var block_result = block.parse(
        tokens, pos, msgs, project_file=project_file,
        is_moose64=is_moose64,
        block_purpose_name="for func statement starting in "
            "line " + token.get_line(tokens, startpos).as_str() +
            ", column " + token.get_col(tokens, startpos).as_str(),
        debug=debug,
    ) later:

    await block_result
    if block_result.has_damage() {
        stmt.damaged = yes
    }
    pos += block_result.token_len
    stmt.subblocks.add(block_result.stmts)
    stmt.token_len = (pos - startpos)
    return later stmt
}

