# Copyright (c) 2020-2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.ast.expr as expr

func test_parse_expression {
    var msgs = []

    var v1 = expr.parse_expression(
        ["5"],
        1, msgs, project_file=none, debug=no
    ) later:
    await v1
    assert(msgs.len == 0)
    assert(v1 != none)
    assert(v1.token_len == 1)
    assert(v1.kind == ast.N_EXPR_LIT)
    assert(v1.value == 5)

    var v2 = expr.parse_expression(
        ["not", "5", "*", "3", "+", "-", "(",
        "23", ")", "ignored_10th_token"],
        1, msgs, project_file=none, debug=no
    ) later:
    await v2
    assert(msgs.len == 0)
    assert(v2 != none)
    assert(v2.kind == ast.N_EXPR_UNOP)
    assert(v2.optoken.str == "not")
    assert(v2.token_len == 9)
    assert(v2.subexprs.len == 1)
    assert(v2.subexprs[1].kind == ast.N_EXPR_BINOP)
    assert(v2.subexprs[1].optoken.str == "*")
    assert(v2.subexprs[1].subexprs.len == 2)
    assert(v2.subexprs[1].subexprs[1].kind == ast.N_EXPR_LIT)
}

func test_chain_call_expression {
    var msgs = []

    var v1 = expr.parse_expression(
        ["a", ".", "b", "[", "c", "]", "(", "d", ")"],
        1, msgs, project_file=none, debug=no
    ) later:
    await v1

    if msgs.len > 0 {
        for msg in msgs {
            print("Test got invalid error: " + msg.as_terminal_str())
        }
    }
    assert(msgs.len == 0)
    assert(v1 != none)
    assert(v1.token_len == 9)
    assert(v1.kind == ast.N_EXPR_BINOP)
    assert(v1.optoken.str == "(")
    assert(v1.subexprs.len == 2)
    assert(v1.subexprs[2].kind == ast.N_EXPR_CALLORDEFARGS)
    assert(v1.subexprs[2].subexprs.len == 1)
    assert(v1.subexprs[2].subexprs[1].kind == ast.N_EXPR_IDREF)
    assert(v1.subexprs[2].subexprs[1].label == "d")
    assert(v1.subexprs[1].kind == ast.N_EXPR_BINOP)
    assert(v1.subexprs[1].optoken.str == "[")
    assert(v1.subexprs[1].subexprs.len == 2)
    assert(v1.subexprs[1].subexprs[1].kind == ast.N_EXPR_BINOP)
    assert(v1.subexprs[1].subexprs[1].optoken.str == ".")
}

func test_parse_call_expression {
    var msgs = []

    var v1 = expr.parse_expression(
        ["print", "(", "'Hello World'", ")"],
        1, msgs, project_file=none, debug=no
    ) later:

    await v1
    if msgs.len > 0 {
        for msg in msgs {
            print("Test got invalid error: " + msg.as_terminal_str())
        }
    }
    assert(msgs.len == 0)
    assert(v1 != none)
    assert(v1.token_len == 4)
    assert(v1.kind == ast.N_EXPR_BINOP)
    assert(v1.subexprs.len == 2)
    assert(v1.subexprs[1].kind == ast.N_EXPR_IDREF)
    assert(v1.subexprs[2].kind == ast.N_EXPR_CALLORDEFARGS)
    assert(v1.subexprs[2].subexprs.len == 1)
    assert(v1.subexprs[2].subexprs[1].kind == ast.N_EXPR_LIT)
    assert(v1.subexprs[2].subexprs[1].value == "Hello World")
}

func test_parse_call_or_funcdef_args {
    var msgs

    msgs = []
    var v1 = expr.parse_call_or_funcdef_args(
        ["(", "a", ",", "b", "=", "2", "+", "3",
        "new", "z", "(", ")", ")"],
        1, msgs, is_call=yes, project_file=none
    ) later:
    await v1
    assert(v1 != none)
    assert(msgs.len == 1)
    assert(msgs[1].content.find("'new'") != none)
    assert(v1.subexprs.len == 2)
    assert(v1.token_len == 13)

    msgs = []
    var v2 = expr.parse_call_or_funcdef_args(
        ["(", "a", ",", "b", "=", "2", "+", "3", ",",
        "new", "z", "(", ")", ")"],
        1, msgs, is_call=yes, project_file=none
    ) later:
    await v2
    assert(v2 != none)
    assert(msgs.len == 0)
    assert(v2.subexprs.len == 3)
    assert(v2.token_len == 14)
}

