# @module compiler.ast.do_stmt
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org

import compiler.ast as ast
import compiler.ast.block as block
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.msg as msg
import compiler.token as token

type DoStmt base ast.StmtNode {
    var rescue_clause_count = 0
    var has_finally = no
}

func DoStmt.init {
    base.init()
    self.kind = ast.N_STMT_DO
}

func DoStmt.as_json_obj {
    var output = base.as_json_obj()
    output["rescue_clause_count"] = self.rescue_clause_count
    output["has_finally"] = self.has_finally
    return output
}

func DoStmt.as_code(indent=0) {
    if self.damaged {
        return " ".rep(indent) + "(damaged do statement)"
    }
    var t = " ".rep(indent) + "do {\n"
    for stmt in self.subblocks[1] {
        t += stmt.as_code(indent=(indent + 4)) + "\n"
    }
    t += " ".rep(indent) + "}"
    var is_first = yes
    for clause in self.subexprs {
        t += clause.as_code(indent=indent)
        is_first = no
    }
    return t
}

type RescueClause base ast.TreeNode {
    var error_labels = []
}

func RescueClause.init {
    base.init()
    self.kind = ast.N_EXPR_RESCUECLAUSE
}

func RescueClause.as_json_obj {
    var output = base.as_json_obj()
    output["error_labels"] = self.error_labels
    return output
}

func RescueClause.as_code(indent=0) {
    if self.damaged {
        return " (damaged rescue clause)"
    }
    var t = " rescue "
    var is_first = yes
    var idx = 0
    for elabel in self.error_labels {
        idx += 1
        if is_first {
            is_first = no
        } else {
            t += ","
        }
        if self.subexprs[idx] != none {
            t += self.subexprs[idx].as_code(indent=indent)
        } else {
            t += "any"
        }
        if elabel != none {
            t += " as " + elabel
        }
    }
    t += " {\n"
    for stmt in self.subblocks[1] {
        t += stmt.as_code(indent=(indent + 4)) + "\n"
    }
    t += " ".rep(indent) + "}"
    return t
}

type FinallyClause base ast.TreeNode {
}

func FinallyClause.init {
    base.init()
    self.kind = ast.N_EXPR_FINALLYCLAUSE
}

func FinallyClause.as_json_obj {
    var output = base.as_json_obj()
    return output
}

func FinallyClause.as_code(indent=0) {
    if self.damaged {
        return " (damaged finally clause)"
    }
    var t = " finally {\n"
    for stmt in self.subblocks[1] {
        t += stmt.as_code(indent=(indent + 4)) + "\n"
    }
    t += " ".rep(indent) + "}"
    return t
}

func parse_rescue_clause_header(
        stmt, tokens, tokens_len, pos, msgs,
        project_file=none, debug=no) {
    var clausestart = pos
    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            tokens[pos].str != "rescue" {
        return none
    }
    pos += 1

    var clause = new RescueClause()
    clause.line = token.get_line(tokens, pos - 1)
    clause.col = token.get_col(tokens, pos - 1)
    var errors_parsed = 0
    while yes {
        if pos > tokens_len or (
                tokens[pos].kind != token.T_IDENT and
                (tokens[pos].kind != token.T_KEYWORD or
                 tokens[pos].str != "any")) {
            if errors_parsed == 0 or
                    tokens[pos].kind != token.T_ENCLOSE or
                    tokens[pos].str != "{" {
                if not stmt.has_damage() {
                    msgs.add(new msg.FileMsg(
                        "Unexpected " + token.describe_token_at(tokens,
                            pos) +
                        ", expected valid expression for rescue "
                        "clause" +
                        if clause.error_labels.len > 0 (
                            " or '{' to start "
                            "code block") else ("") + ".",
                        source_file=project_file,
                        line=token.get_line(tokens, pos),
                        col=token.get_col(tokens, pos),
                    ))
                }
                stmt.damaged = yes
                clause.damaged = yes
                var skiplen = math.max(1,
                    token.skip_in_broken_stmt_to_code_block(
                        tokens, pos - 1, bracket_depth=0
                    ) - 1)
                pos += skiplen
            }
            clause.token_len = (pos - clausestart)
            return clause
        }
        var error_typename = tokens[pos].str
        if tokens[pos].kind == token.T_KEYWORD and
                tokens[pos].str == "any" {
            error_typename = none
        }
        var error_renameto = none
        errors_parsed += 1
        pos += 1

        # Extract components of type prefix, if any:
        var error_typepath = none
        while pos + 1 <= tokens_len and
                error_typename != none and
                tokens[pos].kind == token.T_DOT and
                tokens[pos + 1].kind == token.T_IDENT {
            if error_typepath == none {
                error_typepath = []
            }
            error_typepath.add(error_typename)
            error_typename = tokens[pos + 1].str
            pos += 2
        }

        # Extract "as <name>" part, if present:
        if pos <= tokens_len and
                tokens[pos].kind == token.T_KEYWORD and
                tokens[pos].str == "as" {
            pos += 1
            if pos > tokens_len or
                    tokens[pos].kind != token.T_IDENT {
                if not stmt.has_damage() {
                    msgs.add(new msg.FileMsg(
                        "Unexpected " + token.describe_token_at(
                            tokens, pos) +
                        ", expected valid expression for rescue "
                        "clause" +
                        if clause.error_names.len > 0 (
                            " or '{' to start "
                            "code block") else ("") + ".",
                        source_file=project_file,
                        line=token.get_line(tokens, pos),
                        col=token.get_col(tokens, pos),
                    ))
                }
                stmt.damaged = yes
                clause.damaged = yes
                var skiplen = math.max(1,
                token.skip_in_broken_stmt_to_code_block(
                    tokens, pos - 1, bracket_depth=0
                ) - 1)
                pos += skiplen
                clause.token_len = pos - clausestart
                return clause
            }
            error_renameto = tokens[pos].str
            pos += 1
        }
        if error_typename != none {
            var iexp = new expr.IdRefExpr()
            iexp.label = error_typename
            iexp.typepath = error_typepath
            clause.subexprs.add(iexp)
        } else {
            clause.subexprs.add(none)
        }
        clause.error_labels.add(error_renameto)

        if pos > tokens_len or (
                tokens[pos].kind != token.T_COMMA and
                (tokens[pos].kind != token.T_ENCLOSE or
                 tokens[pos].str != "{")) {
            if not stmt.has_damage() {
                msgs.add(new msg.FileMsg(
                    "Unexpected " + token.describe_token_at(tokens,
                        pos) +
                    ", expected ',' for another error "
                    "expression or '{' for code block for "
                    "rescue clause.",
                    source_file=project_file,
                    line=token.get_line(tokens, pos),
                    col=token.get_col(tokens, pos),
                ))
            }
            stmt.damaged = yes
            clause.damaged = yes
            var skiplen = math.max(1,
                token.skip_in_broken_stmt_to_code_block(
                    tokens, pos - 1, bracket_depth=0
                ) - 1)
            pos += skiplen
            clause.token_len = pos - clausestart
            return clause
        }
        if tokens[pos].kind == token.T_ENCLOSE {
            assert(tokens[pos].str == "{")
            clause.token_len = pos - clausestart
            return clause
        }
        assert(tokens[pos].kind == token.T_COMMA)
        pos += 1  # Go past ',' and continue.
    }
}

func parse_single_rescue_clause(
        stmt, tokens, tokens_len, pos, msgs,
        project_file=none, debug=no) {
    var clausestartpos = pos
    var clause = parse_rescue_clause_header(
        stmt, tokens, tokens_len, pos, msgs,
        project_file=project_file, debug=debug)
    if clause == none {
        return later none
    }
    pos += clause.token_len

    # Parse inner code block:
    var block_result = block.parse(
        tokens, pos, msgs, project_file=project_file,
        debug=debug, had_damage=stmt.has_damage(),
        block_purpose_name="for rescue clause starting in "
            "line " + token.get_line(tokens,
            clausestartpos).as_str() +
            ", column " + token.get_col(tokens,
            clausestartpos).as_str()
    ) later:

    await block_result
    if block_result.has_damage() {
        clause.damaged = yes
    }
    pos += block_result.token_len
    clause.subblocks.add(block_result.stmts)

    clause.token_len = (pos - clausestartpos)
    return later clause
}

func parse_all_rescue_clauses(
        stmt, tokens, tokens_len, pos, msgs,
        project_file=none, debug=no) {
    var result = []
    var rescue_clause = parse_single_rescue_clause(
        stmt, tokens, tokens_len, pos, msgs,
        project_file=project_file, debug=no) later:

    await rescue_clause
    if rescue_clause == none {
        return result
    }
    result.add(rescue_clause)
    pos += rescue_clause.token_len

    rescue_clause = parse_single_rescue_clause(
        stmt, tokens, tokens_len, pos, msgs,
        project_file=project_file, debug=no
    ) later repeat
}

func parse_finally_clause(
        stmt, tokens, tokens_len, pos, msgs,
        project_file=none, debug=no) {
    var clausestartpos = pos
    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            tokens[pos].str != "finally" {
        return none
    }
    pos += 1
    var clause = new FinallyClause()

    # Parse inner code block:
    var block_result = block.parse(
        tokens, pos, msgs, project_file=project_file,
        debug=debug, had_damage=stmt.has_damage(),
        block_purpose_name="for finally clause starting in "
            "line " + token.get_line(tokens,
            clausestartpos).as_str() +
            ", column " + token.get_col(tokens,
            clausestartpos).as_str()
    ) later:

    await block_result
    if block_result.has_damage() {
        clause.damaged = yes
    }
    pos += block_result.token_len
    clause.subblocks.add(block_result.stmts)

    clause.token_len = (pos - clausestartpos)
    return later clause
}

func parse(tokens, pos, msgs, project_file=none, debug=no) {
    var stmt = new DoStmt()
    var tokens_len = tokens.len
    var startpos = pos

    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            tokens[pos].str != "do" {
        return later none
    }

    if debug {
        print("compiler.ast.do_stmt: parse() on " +
            tokens.sub(pos, math.min(pos + 10, tokens_len)).as_str() +
            "... with pos=" + pos.as_str() + ", "
            "tokens.len=" + tokens.len.as_str())
    }
    stmt.line = token.get_line(tokens, pos)
    stmt.col = token.get_col(tokens, pos)
    pos += 1

    # Parse inner code block:
    var block_result = block.parse(
        tokens, pos, msgs, project_file=project_file,
        debug=debug, had_damage=stmt.has_damage(),
        block_purpose_name="for the with statement starting in "
            "line " + token.get_line(tokens, startpos).as_str() +
            ", column " + token.get_col(tokens, startpos).as_str()
    ) later:

    await block_result
    if block_result.has_damage() {
        stmt.damaged = yes
    }
    pos += block_result.token_len
    stmt.subblocks.add(block_result.stmts)

    # Parse rescue clauses, if any:
    var rescue_clauses = parse_all_rescue_clauses(
        stmt, tokens, tokens_len, pos, msgs,
        project_file=project_file, debug=no) later:

    await rescue_clauses
    for clause in rescue_clauses {
        stmt.subexprs.add(clause)
        if clause.damaged {
            stmt.damaged = yes
        }
        pos += clause.token_len
        stmt.rescue_clause_count += 1
    }

    # Parse finally clause, if any:
    var finally_clause = parse_finally_clause(
        stmt, tokens, tokens_len, pos, msgs,
        project_file=project_file, debug=no) later:

    await finally_clause
    if finally_clause != none {
        stmt.subexprs.add(finally_clause)
        stmt.has_finally = yes
        if finally_clause.damaged {
            stmt.damaged = yes
        }
        pos += finally_clause.token_len
    }

    stmt.token_len = (pos - startpos)
    return later stmt
}

