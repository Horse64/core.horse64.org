# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast

func test_parse_func_stmt {
    var msgs = []

    var v1 = ast.parse_str_to_ast(
        "func main{print('Hello World')}",
        project_file=none
    ) later:
    await v1

    assert(v1 != none)
    if v1.msgs.len > 0 {
        for msg in v1.msgs {
            print("Test got invalid error: " + msg.as_terminal_str())
        }
    }
    assert(v1.msgs.len == 0)
    assert(v1.stmts.len == 1)
    var func_stmt = v1.stmts[1]
    assert(func_stmt.name == "main")
    assert(func_stmt.subblocks.len == 1)
    assert(func_stmt.subblocks[1].len == 1)
    assert(func_stmt.subblocks[1][1].kind == ast.N_STMT_CALL)
}

func test_parse_complex {
    var msgs

    msgs = []
    var v1 = ast.parse_str_to_ast(
        "if bla != (not bla.attr) {"
        "   throw new ValueError('oop')"
        "}", debug=no
    ) later:

    await v1
    if msgs.len > 0 {
        for msg in msgs {
            print("Test got invalid error: " + msg.as_terminal_str())
        }
    }
    assert(v1 != none)
    assert(msgs.len == 0)
}

func test_parse_inline_if {
    var msgs

    msgs = []
    var v1 = ast.parse_str_to_ast(
        "if 3 != if 2 + 3 (bla != 5) else (blu) {"
        "   throw new ValueError('oop')"
        "}", debug=no
    ) later:

    await v1
    if msgs.len > 0 {
        for msg in msgs {
            print("Test got invalid error: " + msg.as_terminal_str())
        }
    }
    assert(v1 != none)
    assert(msgs.len == 0)
    assert(v1.stmts.len == 1)
    var st = v1.stmts[1]
    assert(st.kind == ast.N_STMT_IF)
    assert(st.subexprs.len == 1)
    assert(st.subexprs[1].kind == ast.N_EXPR_IFELSECLAUSE)
    assert(st.subexprs[1].subexprs.len == 1)
    assert(st.subexprs[1].subexprs[1].kind == ast.N_EXPR_BINOP)
    assert(st.subexprs[1].subexprs[1].subexprs[2].kind ==
           ast.N_EXPR_INLINEIF)
}

func test_parse_func_stmt_2 {
    var msgs = []

    var v1 = ast.parse_str_to_ast(
        "func main(a, b=2) {print('Hello World')}",
        project_file=none, debug=no
    ) later:
    await v1

    assert(v1 != none)
    if v1.msgs.len > 0 {
        for msg in v1.msgs {
            print("Test got invalid error: " + msg.as_terminal_str())
        }
    }
    assert(v1.msgs.len == 0)
    assert(v1.stmts.len == 1)
    var func_stmt = v1.stmts[1]
    assert(func_stmt.name == "main")
    assert(func_stmt.arg_names.len == 2)
    assert(func_stmt.arg_names[1] == "a")
    assert(func_stmt.arg_names[2] == "b")
    assert(func_stmt.arg_defaults.len == 1)
    assert(func_stmt.arg_defaults[1].kind == ast.N_EXPR_LIT)
    assert(func_stmt.subblocks.len == 1)
    assert(func_stmt.subblocks[1].len == 1)
    assert(func_stmt.subblocks[1][1].kind == ast.N_STMT_CALL)
}

