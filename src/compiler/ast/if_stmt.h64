# @module compiler.ast.if_stmt
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org

import compiler.ast as ast
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.ast.block as block
import compiler.msg as msg
import compiler.token as token

type IfStmt base ast.StmtNode {
}

func IfStmt.init {
    base.init()
    self.kind = ast.N_STMT_IF
}

func IfStmt.as_json_obj {
    var output = base.as_json_obj()
    return output
}

func IfStmt.as_code(indent=0) {
    if self.damaged {
        return " ".rep(indent) + "(damaged if statement)"
    }
    var t = ""
    var is_first = yes
    for clause in self.subexprs {
        t += clause.as_code(
            indent=indent, is_first=is_first
        )
        is_first = no
    }
    return t
}

type IfElseClause base ast.TreeNode {
    var is_else = no
}

func IfElseClause.init {
    base.init()
    self.kind = ast.N_EXPR_IFELSECLAUSE
}

func IfElseClause.as_json_obj {
    var output = base.as_json_obj()
    return output
}

func IfElseClause.as_code(indent=0, is_first=yes) {
    if self.damaged {
        return " ".rep(indent) + "(damaged if else clause)"
    }
    var t = ""
    if not self.is_else {
        if is_first {
            t += " ".rep(indent) + "if "
        } else {
            t += " elseif "
        }
        t += self.subexprs[1].as_code(indent=indent) + " {\n"
    } else {
        t += " else {\n"
    }
    for stmt in self.subblocks[1] {
        t += stmt.as_code(indent=(indent + 4)) + "\n"
    }
    t += " ".rep(indent) + "}"
    return t
}

func parse_next_ifelse_clause_header(
        tokens, tokens_len, pos, msgs,
        project_file=none, debug=no,
        is_first=yes, startpos=none) {
    if startpos == none {
        startpos = pos
    }
    var clausestart = pos
    var clause = new IfElseClause()
    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            ((not is_first or tokens[pos].str != "if") and
            (is_first or (tokens[pos].str != "else" and
            tokens[pos].str != "elseif"))) {
        if is_first or (pos <= tokens_len and
                token.token_has_lefthand(tokens[pos])) {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens, pos) +
                ", expected " +
                if is_first ("'if' clause") else
                    ("'else' or 'elseif' clause or ending") +
                " for if statement starting in line " +
                token.get_line(tokens, startpos).as_str() +
                ", column " +
                token.get_col(tokens, startpos).as_str() + ".",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
            var skiplen = token.get_naive_stmt_or_expr_len(
                tokens, startpos, bracket_depth=0
            )
            var invalid_st = new expr.InvalidExpr(
                skiplen
            )
            invalid_st.line = token.get_line(tokens, startpos)
            invalid_st.col = token.get_col(tokens, startpos)
            invalid_st.token_len = skiplen
            return later invalid_st
        }
        return later none
    }
    if tokens[pos].str == "else" {
        pos += 1
        clause.is_else = yes
        clause.token_len = pos - clausestart
        return clause
    }
    pos += 1

    var v = expr.parse_expression(
        tokens, pos, msgs, debug=debug,
        project_file=project_file
    ) later:

    await v
    if debug {
        print("compiler.ast.if_stmt: parse_next_ifelse_clause_header() "
            "got clause '" + tokens[clausestart].str + "' with "
            "expression: " +
            if v != none (v.as_json_obj().as_str()) else ("<none>"))
    }
    if v == none {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected conditional for " +
            if is_first ("'if' clause") else
                ("'elseif' clause") +
            " for if statement starting in line " +
            token.get_line(tokens, startpos).as_str() +
            ", column " +
            token.get_col(tokens, startpos).as_str() + ".",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        var skiplen = token.get_naive_stmt_or_expr_len(
            tokens, startpos, bracket_depth=0
        )
        var invalid_st = new expr.InvalidExpr(
            skiplen
        )
        invalid_st.line = token.get_line(tokens, startpos)
        invalid_st.col = token.get_col(tokens, startpos)
        invalid_st.token_len = skiplen + (pos - clausestart)
        return later invalid_st
    }
    pos += v.token_len
    clause.subexprs.add(v)
    clause.token_len = pos - clausestart
    return clause
}

func parse_next_ifelse_clause(
        tokens, tokens_len, pos, msgs,
        project_file=none, debug=no,
        is_first=yes, startpos=none) {
    if startpos == none {
        startpos = pos
    }

    if debug {
        print("compiler.ast.if_stmt: parse_next_ifelse_clause() " +
            "checking new clause starting at: " +
            token.describe_token_at(tokens, pos))
    }

    var clausestartpos = pos
    var clause = parse_next_ifelse_clause_header(
        tokens, tokens_len, pos, msgs, project_file=project_file,
        debug=debug, is_first=is_first, startpos=startpos
    ) later:

    await clause
    if clause == none {
        return clause
    }
    pos += clause.token_len
    if clause.kind == ast.N_EXPR_INVALID and (
            pos > tokens_len or
            tokens[pos].kind != token.T_ENCLOSE or
            tokens[pos].str != "{") {
        # Don't pile on error msg for missing code block since
        # it already spat out an error, just quietly bail:
        clause.damaged = yes
        return clause
    }
    var block_result = block.parse(
        tokens, pos, msgs, project_file=project_file,
        debug=debug,
        block_purpose_name=
            "for " + tokens[clausestartpos].str + " "
            "clause starting in "
            "line " + token.get_line(tokens, startpos).as_str() +
            ", column " + token.get_col(tokens, startpos).as_str()
    ) later:

    await block_result
    assert(block_result != none)
    if debug {
        print("compiler.ast.if_stmt: parse_next_ifelse_clause() "
            "got inner block of length " +
            block_result.token_len.as_str() + ", "
            "with token after: " +
            token.describe_token_at(tokens,
                pos + block_result.token_len))
    }
    if block_result.has_damage() {
        clause.damaged = yes
    }
    clause.subblocks.add(block_result.stmts)
    clause.token_len += block_result.token_len
    clause.line = token.get_line(tokens, clausestartpos)
    clause.col = token.get_col(tokens, clausestartpos)
    return clause
}

func parse(tokens, pos, msgs, project_file=none, debug=no) {
    var tokens_len = tokens.len
    var startpos = pos

    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            tokens[pos].str != "if" {
        return later none
    }
    var stmt = new IfStmt()

    if debug {
        print("compiler.ast.if_stmt: parse() on " +
            tokens.sub(pos, math.min(pos + 10, tokens_len)).as_str() +
            "... with pos=" + pos.as_str() + ", "
            "tokens.len=" + tokens.len.as_str())
    }
    stmt.line = token.get_line(tokens, pos)
    stmt.col = token.get_col(tokens, pos)

    if debug {
        print("compiler.ast.if_stmt: parse() fetching "
            "first clause at pos=" + pos.as_str() + "...")
    }
    var clause = parse_next_ifelse_clause(
        tokens, tokens_len, pos, msgs,
        project_file=project_file, debug=debug,
        is_first=yes, startpos=startpos
    ) later:

    await clause
    if clause == none {
        stmt.token_len = (pos - startpos)
        return stmt
    }
    if clause.kind == ast.N_EXPR_INVALID {
        pos += clause.token_len
        stmt.token_len = (pos - startpos)
        return stmt
    }
    pos += clause.token_len
    stmt.subexprs.add(clause)

    if debug {
        print("compiler.ast.if_stmt: parse() trying followup "
            "clause at pos=" + pos.as_str() + "...")
    }
    clause = parse_next_ifelse_clause(
        tokens, tokens_len, pos, msgs,
        project_file=project_file, debug=debug,
        is_first=no, startpos=startpos
    ) later repeat
}

