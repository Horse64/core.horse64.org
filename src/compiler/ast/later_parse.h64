# @module compiler.ast.later_parse
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.ast.block as block
import compiler.msg as msg
import compiler.token as token

func parse_later_postfix(tokens, pos, stmt, msgs,
        project_file=none, debug=no) {
    const token_len = tokens.len
    if pos <= token_len and
            tokens[pos].kind == token.T_KEYWORD and
            tokens[pos].str == "later" {
        if pos + 1 > token_len or
                (tokens[pos + 1].kind != token.T_COLON and
                 (tokens[pos + 1].kind != token.T_KEYWORD or
                  (tokens[pos + 1].str != "ignore" and
                   tokens[pos + 1].str != "repeat"))) {
            msgs.add(new msg.FileMsg(
                "Unexpected " +
                if pos + 1 <= token_len
                    (token.describe_token(tokens[pos + 1])) else
                    ("end of tokens") +
                ", expected ':', 'repeat', or 'ignore' "
                "following 'later'.",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
            pos += 1
            stmt.damaged = yes
        } else {
            stmt.has_later = yes
            stmt.has_later_ignore = (
                tokens[pos + 1].kind == token.T_KEYWORD
            )
            pos += 2
        }
    }
    return pos
}

