## @module compiler.ast.enum_stmt
# Copyright (c) 2023-2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org

import compiler.ast as ast
import compiler.ast.block as block
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.ast.type_stmt as type_stmt
import compiler.msg as msg
import compiler.token as token

type EnumStmt base ast.StmtNode {
    var label
    var enum_entry_names = []
    var enum_entry_nums = []
}

func EnumStmt.init {
    base.init()
    self.kind = ast.N_STMT_ENUM
}

func EnumStmt.copy {
    var self_copy = base.copy()
    self_copy.enum_entry_names = []
    for label in self.enum_entry_names {
        self_copy.enum_entry_names.add(label)
    }
    self.enum_entry_nums = []
    for num in self.enum_entry_nums {
        self_copy.enum_entry_nums.add(num)
    }
    return self_copy
}

func EnumStmt.as_json_obj {
    var output = base.as_json_obj()
    output["label"] = self.label
    return output
}

func EnumStmt.as_code(indent=0, project=none) {
    if self.damaged {
        return " ".rep(indent) + "(damaged enum)"
    }
    if self.type_or_enum_scope != none {
        var escope = self.type_or_enum_scope
        var pos = 1
        while pos <= self.enum_entry_names.len {
            if self.enum_entry_nums[pos] == none {
                var pos2 = 1
                while pos2 <= escope.label_nums.len {
                    if escope.label_names[pos2] ==
                            self.enum_entry_names[pos] {
                        self.enum_entry_nums[pos] =
                            escope.label_nums[pos2]
                        break
                    }
                    pos2 += 1
                }
            }
            pos += 1
        }
    }
    var t = " ".rep(indent) + "enum " + self.label + " {\n"
    var i = 0
    for entry in self.enum_entry_names {
        i += 1
        t += " ".rep(indent + 4) + entry
        if self.enum_entry_nums[i] != none {
            t += "=" + self.enum_entry_nums[i].as_str() + ",\n"
        } else {
            t += ",\n"
        }
    }
    t += "}"
    return t
}

type EnumExtendStmt base ast.StmtNode {
    var enum_entry_names = []
    var enum_entry_nums = []
}

func EnumExtendStmt.init {
    base.init()
    self.kind = ast.N_STMT_ENUMEXTEND
}

func EnumExtendStmt.as_json_obj {
    var output = base.as_json_obj()
    return output
}

func EnumExtendStmt.as_code(indent=0) {
    if self.damaged {
        return " ".rep(indent) + "(damaged enum extend)"
    }
    var t = " ".rep(indent) + "extend enum "
    if self.subexprs[1].type_path != none {
        t += self.subexprs[1].type_path.join(".") + "."
    }
    t += self.subexprs[1].label + " {\n"
    var i = 0
    for entry in self.enum_entry_names {
        i += 1
        t += " ".rep(indent + 4) + entry
        if self.enum_entry_nums[i] != none {
            t += "=" + self.enum_entry_nums[i] + ",\n"
        } else {
            t += ",\n"
        }
    }
    t += "}"
    return t
}

func parse(tokens, pos, msgs, project_file=none,
           is_moose64=no, debug=no) {
    var tokens_len = tokens.len
    var startpos = pos
    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            not {"extend", "enum"}.has(tokens[pos].str) or
            (tokens[pos].str == "extend" and
             (pos + 1 > tokens_len or
              tokens[pos + 1].str != "enum")) {
        return later none
    }

    var stmt = if tokens[pos].str == "enum" (new EnumStmt())
        else (new EnumExtendStmt())
    var stmt_name = tokens[pos].str
    var headerlen = type_stmt.parse_extend_or_enum_or_type_header(
        stmt, tokens, tokens_len, pos, msgs,
        must_be_type=no, must_be_enum=yes,
        project_file=project_file, debug=debug
    )
    if headerlen == none {
        return later none
    }
    stmt.line = token.get_line(tokens, startpos)
    stmt.col = token.get_col(tokens, startpos)
    pos += headerlen

    # Parse inner enum values:
    if pos > tokens_len or
            tokens[pos].kind != token.T_ENCLOSE or
            tokens[pos].str != "{" {
        var skiplen = math.max(1, token.get_naive_stmt_or_expr_len(
                tokens, pos - 1, bracket_depth=0, for_expr=no
            ) - 1)
        var invalid_st = new invalid_stmt.InvalidStmt(
            math.max(1, skiplen - 1)
        )
        invalid_st.line = token.get_line(tokens, startpos)
        invalid_st.col = token.get_col(tokens, startpos)
        invalid_st.token_len = (pos - startpos) + skiplen
        return invalid_st
    }
    pos += 1  # Go past '{' bracket.

    var entry_count = 0
    while pos <= tokens_len and
            tokens[pos].kind == token.T_IDENT {
        stmt.enum_entry_names.add(tokens[pos].str)
        pos += 1
        entry_count += 1
        if pos + 1 < tokens_len and
                tokens[pos].kind == token.T_ASSIGN and
                tokens[pos + 1].kind == token.T_NUM {
            stmt.enum_entry_nums.add(tokens[pos + 1].str.to_num())
            pos += 2
        } else {
            stmt.enum_entry_nums.add(none)
        }
        if tokens[pos].kind == token.T_COMMA {
            pos += 1
            continue
        } elseif tokens[pos].kind == token.T_IDENT {
            if not stmt.has_damage() {
                msgs.add(new msg.FileMsg(
                    "Unexpected " + token.describe_token_at(
                        tokens, pos) +
                    ", expected ',' to resume enum entries or "
                    "'}' to end code block for " + stmt_name +
                    "statement starting in line " +
                    token.get_line(tokens, startpos).as_str() +
                    ", column " +
                    token.get_col(tokens, startpos).as_str() + ".",
                    source_file=project_file,
                    line=token.get_line(tokens, pos),
                    col=token.get_col(tokens, pos),
                ))
            }
            stmt.damaged = yes
        }
        break
    }
    if entry_count == 0 or pos > tokens_len or
            tokens[pos].kind != token.T_ENCLOSE or
            tokens[pos].str != "}" {
        if not stmt.has_damage() {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(
                    tokens, pos) +
                ", expected T_IDENT for enum entry, or '}' "
                "to end code block for " + stmt_name +
                "statement starting in line " +
                token.get_line(tokens, startpos).as_str() +
                ", column " +
                token.get_col(tokens, startpos).as_str() + ".",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            )) 
        }
        stmt.damaged = yes
        while pos < tokens_len and (
                tokens[pos].kind != token.T_ENCLOSE or
                tokens[pos].str != "}") and
                not token.surely_starts_stmt_even_in_bad_code(
                tokens, pos
                ) {
            pos += 1
        }
    }
    if pos < tokens_len and
            tokens[pos].kind == token.T_ENCLOSE and
            tokens[pos].str == "}" {
        pos += 1  # Go past final close '}'.
    }
    stmt.token_len = (pos - startpos)
    return later stmt
}

