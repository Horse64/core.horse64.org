# @module compiler.ast.analyze
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as cast
import compiler.ast.analyze.eval as ast_eval
import compiler.ast.func_stmt as func_stmt
import compiler.limit as compiler_limit
import compiler.msg as msg
import compiler.storage.ref as st_ref

extend func_stmt.FuncStmt {
    var is_later_func
}

func stmt_list_contains_later_call(
        stmts, check_recursive=yes,
        include_later_ignore=no,
        recurse_into_funcs=no) {
    for stmt in stmts {
        if {cast.N_STMT_VAR, cast.N_STMT_CALL}.has(stmt.kind) and
                stmt.has_later and
                (include_later_ignore or
                 not stmt.has_later_ignore) {
            return yes
        } elseif stmt.kind == cast.N_STMT_RETURN and
                stmt.has_later {
            return yes
        } elseif check_recursive {
            if stmt.kind == cast.N_STMT_IF or
                    stmt.kind == cast.N_STMT_DO {
                for clause in stmt.subexprs {
                    for block in clause.subblocks {
                        if stmt_list_contains_later_call(block,
                                check_recursive=yes,
                                include_later_ignore=include_later_ignore) {
                            return yes
                        }
                    }
                }
            } elseif (recurse_into_funcs or
                    stmt.kind != cast.N_STMT_FUNC) and
                    stmt.subblocks.len > 0 {
                for block in stmt.subblocks {
                    if stmt_list_contains_later_call(block,
                            check_recursive=yes,
                            include_later_ignore=include_later_ignore) {
                        return yes
                    }
                }
            }
        }
    }
    return no
}

func get_global_storage_neighbor_closure(project) {
    func try_get_neighbor_node_value(node_ref) {
        if node_ref == none or node_ref.kind != st_ast.ST_GLOBAL {
            return [no, none]
        }
        var st_id = node_ref.id
        var gscope_map =
            project.storage_id_to_global_scope_map
        if not gscope_map.has(st_id) {
            return [no, none]
        }
        var st_id_map = gscope_map[st_id].storage_id_to_entry
        if not st_id_map.has(st_id) {
            return [no, none]
        }
        var entry = st_id_map[st_id]
        if entry.kind != cast.N_STMT_VAR or
                not entry.initial_value_known {
            return [no, none]
        }
        return [yes, entry.initial_value]
    }
    return try_get_neighbor_node_value
}

func advanced_phase2_evaluate_global_scope(
        project_file, msgs=none
        ) {
    var globals_value_cb = get_global_storage_neighbor_closure(
        project_file.project)
    var had_error = yes
    var had_change = no
    var stmt_map = project_file.global_scope.
        name_to_stmt_map
    for name in stmt_map {
        var stmt = stmt_map[name]
        if typename(stmt) == "list" or
                stmt.kind != cast.N_STMT_VAR or
                stmt.initial_value_known {
            continue
        }
        var v = ast_eval.try_eval_ast_node_value(
            stmt.subexprs[1],
            eval_by_storage_ref_callback=globals_value_cb)
        if v[1] {
            had_change = yes
            stmt.initial_value_known = yes
            stmt.initial_value = v[2]
        } elseif v[2] == "typeerror" {
            if msgs != none {
                msgs.add(new msg.FileMsg(
                    "Invalid assigned expression containing a "
                    "type mismatch for operands. "
                    "If intended, protect it with "
                    "a rescue block that catches TypeError.",
                    source_file=project_file,
                    line=stmt.subexprs[1].line,
                    col=stmt.subexprs[2].col
                ))
            }
        }
    }
    if had_change {
        return "changed"
    }
    return not had_error
}

func advanced_phase3_later_and_computevals(
        stmts, msgs=none, project_file=none
        ) {
    var globals_value_cb = get_global_storage_neighbor_closure(
        project_file.project)
    func check_and_analyze_recurse(
            stmts, msgs
            ) {
        for stmt in stmts {
            if stmt.kind == cast.N_STMT_FUNC {
                var is_later_func = no
                for block in stmt.subblocks {
                    if stmt_list_contains_later_call(
                            block, check_recursive=yes,
                            include_later_ignore=no,
                            recurse_into_funcs=no) {
                        is_later_func = yes
                        break
                    }
                }
                stmt.func_scope.is_later_func = is_later_func
            }

            # Determine error message ahead of time for throws:
            if stmt.kind == cast.N_STMT_THROW and
                    stmt.aot_evaluated_message_str == none and
                    not stmt.has_damage() and
                    stmt.subexprs[1].kind == cast.N_STMT_UNOP and
                    stmt.subexprs[1].str == "new" and
                    stmt.subexprs[1].subexprs[1].kind ==
                        cast.N_STMT_BINOP and
                    stmt.subexprs[1].subexprs[1].str == "(" and
                    stmt.subexprs[1].subexprs[1].subexprs[2].kind ==
                        cast.N_EXPR_CALLORDEFARGS {
                var callargs = stmt.subexprs[1].subexprs[1].
                    subexprs[2]
                if callargs.subexprs.len != 1 or
                        callargs.subexprs[1].kind ==
                            cast.N_EXPR_CALLKWARG {
                    if msgs != none {
                        msgs.add(new msg.FileMsg(
                            "Invalid error constructor call, "
                            "must have single positional "
                            "message string argument.",
                            source_file=project_file,
                            line=stmt.subexprs[1].line,
                            col=stmt.subexprs[2].col
                        ))
                    }
                    stmt.damaged = yes
                    callargs.damaged = yes
                } else {
                    var v = ast_eval.try_eval_ast_node_value(
                        callargs.subexprs[1],
                        eval_by_storage_ref_callback=globals_value_cb)
                    if not v[1] or typename(v[2]) != "str" {
                        if msgs != none {
                            msgs.add(new msg.FileMsg(
                                "Invalid error constructor call, "
                                "message string argument too dynamic "
                                "to be determined at compile time.",
                                source_file=project_file,
                                line=stmt.subexprs[1].line,
                                col=stmt.subexprs[2].col
                            ))
                        }
                        stmt.damaged = yes
                        callargs.subexprs[1].damaged = yes
                    } else {
                        stmt.aot_evaluated_message_str = v[2]
                    }
                }
            }

            # Blocks:
            if stmt.kind == cast.N_STMT_IF or
                    stmt.kind == cast.N_STMT_DO {
                for clause in stmt.subexprs {
                    for block in clause.subblocks {
                        if not check_and_analyze_recurse(block, msgs) {
                            return no
                        }
                    }
                }
            } elseif stmt.subblocks.len > 0 {
                for block in stmt.subblocks {
                    if not check_and_analyze_recurse(block, msgs) {
                        return no
                    }
                }
            }
        }
        return yes
    }
    return check_and_analyze_recurse(
        stmts, msgs
    )
}

func advanced_phase1_globalrefs(
        stmts, msgs=none, project_file=none
        ) {
    func check_and_analyze_recurse(
            stmts, msgs) {
        for stmt in stmts {
            # FIXME
            # IMPORTANT: we also want to auto-const all vrs here already.
            # (Then the next state, the iteration stage, can do better
            # guesses, especially inside functions.)

            # Blocks:
            if stmt.kind == cast.N_STMT_IF or
                    stmt.kind == cast.N_STMT_DO {
                for clause in stmt.subexprs {
                    for block in clause.subblocks {
                        if not check_and_analyze_recurse(block, msgs) {
                            return no
                        }
                    }
                }
            } elseif stmt.subblocks.len > 0 {
                for block in stmt.subblocks {
                    if not check_and_analyze_recurse(block, msgs) {
                        return no
                    }
                }
            }
        }
        return yes
    }
    return check_and_analyze_recurse(
        stmts, msgs
    )
}

func basic_phase_nestingdepth_and_misc(
        stmts, msgs=none, project_file=none
        ) {
    func check_and_analyze_recurse(
            stmts, msgs, max_block_nesting_left
            ) {
        if max_block_nesting_left < 0 and stmts.len > 0 {
            if msgs != none {
                msgs.add(new msg.FileMsg(
                    "Nesting of statements too deep here, "
                    "exceeds maximum supported depth.",
                    source_file=project_file,
                    line=stmts[1].line, col=stmts[1].col
                ))
            }
            return no
        }
        for stmt in stmts {
            if stmt.kind == cast.N_STMT_IF or
                    stmt.kind == cast.N_STMT_DO {
                for clause in stmt.subexprs {
                    for block in clause.subblocks {
                        if not check_and_analyze_recurse(block, msgs,
                                max_block_nesting_left - 1) {
                            return no
                        }
                    }
                }
            } elseif stmt.subblocks.len > 0 {
                for block in stmt.subblocks {
                    if not check_and_analyze_recurse(block, msgs,
                            max_block_nesting_left - 1) {
                        return no
                    }
                }
            }
        }
        return yes
    }
    return check_and_analyze_recurse(
        stmts, msgs, compiler_limit.max_statement_nesting
    )
}

func do_advanced_check_and_analysis(project, msgs) {
    func process_file(pfile) {
        pfile.ensure_ast() later:

        if not advanced_phase1_globalrefs(
                pfile.ast.stmts, msgs,
                project_file=pfile) {
            return later no
        }
        while yes {
            var result = advanced_phase2_evaluate_global_scope(
                pfile, msgs
            )
            if result != "repeat" {
                if result == no  {
                    return later no
                }
                break
            }
        }
        if not advanced_phase3_later_and_computevals(
                pfile.ast.stmts, msgs,
                project_file=pfile) {
            return later no
        }
        return later yes
    }
    var check_went_ok = project.do_for_all_files(process_file)
    later:

    await check_went_ok
    for m in msgs {
        if m.kind == msg.M_ERROR {
            check_went_ok = no
        }
    }

    return later check_went_ok
}

func do_basic_check_and_analysis(project, msgs) {
    func process_file(pfile) {
        pfile.ensure_ast() later:

        if not basic_phase_nestingdepth_and_misc(
                pfile.ast.stmts, msgs,
                project_file=pfile) {
            return later no
        }
        return later yes
    }
    var check_went_ok = project.do_for_all_files(process_file)
    later:

    await check_went_ok
    for m in msgs {
        if m.kind == msg.M_ERROR {
            check_went_ok = no
        }
    }

    return later check_went_ok
}

