# @module compiler.ast.analyze
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import random from core.horse64.org

import compiler.ast as cast
import compiler.ast.analyze.eval as ast_eval
import compiler.ast.expr as ast_expr
import compiler.ast.func_stmt as func_stmt
import compiler.ast.transform as ast_transform
import compiler.limit as compiler_limit
import compiler.msg as msg
import compiler.storage.ref as st_ref

extend func_stmt.FuncStmt {
    var is_later_func
}

func stmt_list_contains_later_call(
        stmts, check_recursive=yes,
        include_later_ignore=no,
        recurse_into_funcs=no) {
    for stmt in stmts {
        if {cast.N_STMT_VAR, cast.N_STMT_CALL}.has(stmt.kind) and
                stmt.has_later and
                (include_later_ignore or
                 not stmt.has_later_ignore) {
            return yes
        } elseif stmt.kind == cast.N_STMT_RETURN and
                stmt.has_later {
            return yes
        } elseif check_recursive {
            if stmt.kind == cast.N_STMT_IF or
                    stmt.kind == cast.N_STMT_DO {
                for clause in stmt.subexprs {
                    for block in clause.subblocks {
                        if stmt_list_contains_later_call(block,
                                check_recursive=yes,
                                include_later_ignore=include_later_ignore) {
                            return yes
                        }
                    }
                }
            } elseif (recurse_into_funcs or
                    stmt.kind != cast.N_STMT_FUNC) and
                    stmt.subblocks.len > 0 {
                for block in stmt.subblocks {
                    if stmt_list_contains_later_call(block,
                            check_recursive=yes,
                            include_later_ignore=include_later_ignore) {
                        return yes
                    }
                }
            }
        }
    }
    return no
}

func get_global_storage_neighbor_closure(project) {
    func try_get_neighbor_node_value(node_ref) {
        if node_ref == none or node_ref.kind != st_ref.ST_GLOBAL {
            return [ast_eval.AR_UNKNOWN]
        }
        var st_id = node_ref.id
        var gscope_map =
            project.storage_id_to_global_scope_map
        if not gscope_map.has(st_id) {
            return [ast_eval.AR_UNKNOWN]
        }
        var st_id_map = gscope_map[st_id].storage_id_to_entry
        if not st_id_map.has(st_id) {
            return [ast_eval.AR_UNKNOWN]
        }
        var entry = st_id_map[st_id]
        if entry.kind != cast.N_STMT_VAR or
                not entry.initial_value_known {
            return [ast_eval.AR_UNKNOWN]
        }
        return [ast_eval.AR_VALUE, entry.initial_value]
    }
    return try_get_neighbor_node_value
}

func advanced_phase2_evaluate_global_scope(
        project_file, msgs=none
        ) {
    var globals_value_cb = get_global_storage_neighbor_closure(
        project_file.project)
    var had_error = no
    var had_change = no
    var stmt_map = project_file.global_scope.
        name_to_stmt_map
    for name in stmt_map {
        var stmt = stmt_map[name]
        if typename(stmt) == "list" or
                (has_attr(stmt, "is_enum_entry") and
                 stmt.is_enum_entry) or
                stmt.kind != cast.N_STMT_VAR or
                stmt.initial_value_known {
            continue
        }
        var v = ast_eval.try_eval_ast_node_value(
            stmt.subexprs[1],
            eval_by_storage_ref_callback=globals_value_cb)
        if v[1] == ast_eval.AR_VALUE {
            had_change = yes
            stmt.initial_value_known = yes
            stmt.initial_value = v[2]
            if stmt.subexprs[1].kind != cast.N_EXPR_LIT {
                var value_expr = new ast_expr.LiteralExpr()
                value_expr.line = stmt.subexprs[1].line
                value_expr.col = stmt.subexprs[1].col
                value_expr.value = v[2]
                stmt.subexprs[1] = value_expr
            }
        } elseif v[1] == ast_eval.AR_TYPEERROR {
            if msgs != none {
                msgs.add(new msg.FileMsg(
                    "Invalid assigned expression containing a "
                    "type mismatch for operands. "
                    "If intended, protect it with "
                    "a rescue block that catches TypeError.",
                    source_file=project_file,
                    line=stmt.subexprs[1].line,
                    col=stmt.subexprs[1].col
                ))
            }
            had_error = yes
        }
    }
    if had_change {
        return "changed"
    }
    return not had_error
}

func get_throw_statement_rescue_clause(stmt, parents) {
    var parent_clause = none
    var pos = 1
    while pos <= parents.len {
        if parents[pos].kind == cast.N_STMT_FUNC {
            return none
        } elseif parents[pos].kind == cast.N_EXPR_RESCUECLAUSE {
            return parents[pos]
        }
        pos += 1
    }
    return none
}

func advanced_phase3_later_and_computevals(
        stmts, msgs=none, project_file=none
        ) {
    var globals_value_cb = get_global_storage_neighbor_closure(
        project_file.project)
    var parents = []
    var project = project_file.project
    func check_and_analyze_recurse(
            stmts, parents, msgs
            ) {
        for stmt in stmts {
            if stmt.kind == cast.N_STMT_FUNC {
                var is_later_func = no
                for block in stmt.subblocks {
                    if stmt_list_contains_later_call(
                            block, check_recursive=yes,
                            include_later_ignore=no,
                            recurse_into_funcs=no) {
                        is_later_func = yes
                        break
                    }
                }
                stmt.func_scope.is_later_func = is_later_func
            }

            func check_nested_constructors(expr, parents) {
                var parent = if parents.len >= 1 (parents[parents.len])
                    else (none)
                var grandparent = if parents.len >= 2 (parents[parents.len - 1])
                    else (none)
                if expr.damaged {
                    return expr
                }
                # Replace enum references with their values:
                if expr.kind == cast.N_EXPR_IDREF and
                        expr.ref != none and
                        expr.ref.kind == st_ref.ST_NUMLITERAL {
                    var value_expr = new ast_expr.LiteralExpr()
                    value_expr.line = expr.line
                    value_expr.col = expr.col
                    value_expr.value = expr.ref.id
                    return value_expr
                }

                # Make sure types can't be directly referenced:
                var is_type_constructor = no
                if expr.kind == cast.N_EXPR_IDREF and
                        expr.ref != none and
                        project.is_ref_a_type(expr.ref) {
                    if parent == none or
                            parent.kind != cast.N_EXPR_BINOP or
                            parent.optoken.str != "(" or
                            expr != parent.subexprs[1] or
                            grandparent == none or
                            grandparent.kind != cast.N_EXPR_UNOP or
                            grandparent.subexprs[1] != parent {
                        if msgs != none {
                            msgs.add(new msg.FileMsg(
                                "Invalid type reference, must be part of "
                                "a new constructor.",
                                source_file=project_file,
                                line=stmt.subexprs[1].line,
                                col=stmt.subexprs[1].col
                            ))
                        }
                        expr.damaged = yes
                    } else {
                        is_type_constructor = yes
                    }
                }

                # Make sure errors are instantiated correctly:
                if is_type_constructor and not expr.damaged and
                        project.is_ref_of_given_type_an_error(
                            expr.ref) {
                    var callargs = parent.subexprs[2]
                    if callargs.subexprs.len != 1 or
                            callargs.subexprs[1].kind ==
                            cast.N_EXPR_CALLKWARG {
                        if msgs != none {
                            msgs.add(new msg.FileMsg(
                                "Invalid error constructor call, "
                                "must have single positional "
                                "message string argument.",
                                source_file=project_file,
                                line=callargs.line,
                                col=callargs.col
                            ))
                        }
                        expr.damaged = yes
                        return expr
                    }
                    var v = ast_eval.try_eval_ast_node_value(
                        callargs.subexprs[1],
                        eval_by_storage_ref_callback=
                            globals_value_cb)
                    if v[1] != ast_eval.AR_VALUE {
                        expr.error_msg_is_dynamic = yes
                    } elseif typename(v[2]) != "str" {
                        expr.damaged = yes
                        callargs.subexprs[1].damaged = yes
                    } else {
                        expr.error_msg_aot_evaluated = v[2]
                    }
                    if expr.damaged and msgs != none {
                        msgs.add(new msg.FileMsg(
                            "Invalid error constructor call, "
                            "message argument must be str.",
                            source_file=project_file,
                            line=stmt.subexprs[1].line,
                            col=stmt.subexprs[1].col
                        ))
                    }
                }
                return expr
            }
            ast_transform.do_simply_on_all_exprs(
                stmt, check_nested_constructors)

            # Determine error message ahead of time for throws:
            if stmt.kind == cast.N_STMT_THROW and
                    stmt.error_msg_aot_evaluated == none and
                    not stmt.error_msg_is_dynamic and
                    not stmt.has_damage() and
                    stmt.subexprs.len > 0 {
                var has_valid_error_arg = no
                var callargs, callobj
                assert(stmt.subexprs.len == 1)
                if stmt.subexprs[1].kind == cast.N_EXPR_UNOP and
                        stmt.subexprs[1].optoken.str == "new" and
                        stmt.subexprs[1].subexprs[1].kind ==
                            cast.N_EXPR_BINOP and
                        stmt.subexprs[1].subexprs[1].optoken.str == "(" and
                        stmt.subexprs[1].subexprs[1].subexprs[2].kind ==
                            cast.N_EXPR_CALLORDEFARGS {
                    callargs = stmt.subexprs[1].subexprs[1].
                        subexprs[2]
                    callobj = stmt.subexprs[1].subexprs[1].subexprs[1]
                    if callobj.kind != cast.N_EXPR_IDREF or
                            not project.is_ref_a_type(callobj.ref) or
                            not project.is_ref_of_given_type_an_error(
                                callobj.ref) {
                        has_valid_error_arg = no
                    } else {
                        has_valid_error_arg = yes
                    }
                } elseif stmt.subexprs[1].kind == cast.N_EXPR_IDREF {
                    has_valid_error_arg = yes
                }
                if not has_valid_error_arg {
                    if msgs != none {
                        msgs.add(new msg.FileMsg(
                            "Invalid throw, must have a new "
                            "constructor as argument that "
                            "directly refers to an error type, "
                            "or a variable containing an "
                            "already thrown error.",
                            source_file=project_file,
                            line=stmt.subexprs[1].line,
                            col=stmt.subexprs[1].col
                        ))
                    }
                    stmt.damaged = yes
                    callargs.damaged = yes
                }
                if not stmt.damaged and callargs != none and (
                        callargs.subexprs.len != 1 or
                        callargs.subexprs[1].kind ==
                            cast.N_EXPR_CALLKWARG) {
                    if msgs != none {
                        msgs.add(new msg.FileMsg(
                            "Invalid error constructor call, "
                            "must have single positional "
                            "message string argument.",
                            source_file=project_file,
                            line=stmt.subexprs[1].line,
                            col=stmt.subexprs[1].col
                        ))
                    }
                    stmt.damaged = yes
                    callargs.damaged = yes
                }
                if not stmt.damaged and callargs != none {
                    var v = ast_eval.try_eval_ast_node_value(
                        callargs.subexprs[1],
                        eval_by_storage_ref_callback=globals_value_cb)
                    if v[1] != ast_eval.AR_VALUE {
                        stmt.error_msg_is_dynamic = yes
                    } elseif typename(v[2]) != "str" {
                        stmt.damaged = yes
                    } else {
                        stmt.error_msg_aot_evaluated = v[2]
                    }
                    if stmt.damaged and msgs != none {
                        msgs.add(new msg.FileMsg(
                            "Invalid error constructor call, "
                            "message argument must be str.",
                            source_file=project_file,
                            line=stmt.subexprs[1].line,
                            col=stmt.subexprs[1].col
                        ))
                    }
                }
            } elseif stmt.kind == cast.N_STMT_THROW and
                    stmt.error_msg_aot_evaluated == none and
                    not stmt.error_msg_is_dynamic and
                    not stmt.has_damage() and
                    stmt.subexprs.len == 0 {
                # This is an anonymous throw. Transform it to have
                # a named parameter!

                var has_named_label = no
                var parent_clause = get_throw_statement_rescue_clause(
                    stmt, parents)
                if parent_clause == none {
                    stmt.damaged = yes
                    if msgs != none {
                        msgs.add(new msg.FileMsg(
                            "Invalid anonymous throw, "
                            "not inside any rescue clause.",
                            source_file=project_file,
                            line=stmt.line,
                            col=stmt.col
                        ))
                    }
                }

                for label in parent_clause.error_labels {
                    if label != none {
                        has_named_label = yes
                        break
                    }
                }
                if has_named_label {
                    stmt.damaged = yes
                    parent_clause.damaged = yes
                    if msgs != none {
                        msgs.add(new msg.FileMsg(
                            "Invalid anonymous throw, "
                            "not allowed here because surrounding "
                            "rescue clause at line " +
                            parent_clause.line.as_str() +
                            ", column " + parent_clause.col.as_str() +
                            " has one or more named errors.",
                            source_file=project_file,
                            line=stmt.line,
                            col=stmt.col
                        ))
                    }
                } else {
                    var inner_scope = stmt.scope
                    for block in parent_clause.subblocks {
                        if block.len > 0 {
                            inner_scope = block[1].scope
                            break
                        }
                    }
                    var new_name = "autothrowlabel" + random.gen_id()
                    while not inner_scope.name_is_free(new_name,
                            project_file.global_scope) {
                        new_name = "autothrowlabel" + random.gen_id()
                    }
                    var new_sinfo = inner_scope.add_symbol_late(
                        new_name, project_file, parent_clause.line,
                        parent_clause.col)
                    if new_sinfo == none {
                        throw new RuntimeError("Internal error.")
                    }
                    var pos = 1
                    while pos <= parent_clause.error_labels.len {
                        parent_clause.error_labels[pos] = new_name
                        pos += 1
                    }
                    func assign_label_to_all_empty_throws(stmts) {
                        for stmt in stmts {
                            if stmt.kind == cast.N_STMT_THROW and
                                    stmt.subexprs.len == 0 {
                                var node = new ast_expr.IdRefExpr()
                                node.label = new_name
                                node.ref = new st_ref.StorageRef(
                                    st_ref.ST_LOCAL, new_sinfo.storage_id
                                )
                                stmt.subexprs.add(node)
                            } elseif stmt.kind == cast.N_STMT_DO or
                                    stmt.kind == cast.N_STMT_IF {
                                for clause in stmt.subexprs {
                                    if clause.kind ==
                                            cast.N_EXPR_RESCUECLAUSE {
                                        # Don't cross into rescue clauses.
                                        continue
                                    }
                                    for block in clause.subblocks {
                                        assign_label_to_all_empty_throws(
                                            block)
                                    }
                                }
                            } elseif stmt.kind == cast.N_STMT_FUNC {
                                # Don't cross function boundaries.
                                continue
                            } elseif stmt.subblocks.len > 0 {
                                for block in stmt.subblocks {
                                    assign_label_to_all_empty_throws(
                                        block)
                                }
                            }
                        }
                    }
                    for block in parent_clause.subblocks {
                        assign_label_to_all_empty_throws(block)
                    }
                }
            }

            # Blocks:
            if stmt.kind == cast.N_STMT_IF or
                    stmt.kind == cast.N_STMT_DO {
                for clause in stmt.subexprs {
                    for block in clause.subblocks {
                        if not check_and_analyze_recurse(
                                block, [stmt, clause] + parents, msgs) {
                            return no
                        }
                    }
                }
            } elseif stmt.subblocks.len > 0 {
                for block in stmt.subblocks {
                    if not check_and_analyze_recurse(
                            block, [stmt] + parents, msgs) {
                        return no
                    }
                }
            }
        }
        return yes
    }
    return check_and_analyze_recurse(
        stmts, parents, msgs
    )
}

func advanced_phase1_globalrefs(
        stmts, msgs=none, project_file=none
        ) {
    func check_and_analyze_recurse(
            stmts, msgs) {
        for stmt in stmts {
            # FIXME
            # IMPORTANT: we also want to auto-const all vrs here already.
            # (Then the next state, the iteration stage, can do better
            # guesses, especially inside functions.)

            # Blocks:
            if stmt.kind == cast.N_STMT_IF or
                    stmt.kind == cast.N_STMT_DO {
                for clause in stmt.subexprs {
                    for block in clause.subblocks {
                        if not check_and_analyze_recurse(block, msgs) {
                            return no
                        }
                    }
                }
            } elseif stmt.subblocks.len > 0 {
                for block in stmt.subblocks {
                    if not check_and_analyze_recurse(block, msgs) {
                        return no
                    }
                }
            }
        }
        return yes
    }
    return check_and_analyze_recurse(
        stmts, msgs
    )
}

func basic_phase_nestingdepth_and_misc(
        stmts, msgs=none, project_file=none
        ) {
    func check_and_analyze_recurse(
            stmts, msgs, max_block_nesting_left
            ) {
        if max_block_nesting_left < 0 and stmts.len > 0 {
            if msgs != none {
                msgs.add(new msg.FileMsg(
                    "Nesting of statements too deep here, "
                    "exceeds maximum supported depth.",
                    source_file=project_file,
                    line=stmts[1].line, col=stmts[1].col
                ))
            }
            return no
        }
        for stmt in stmts {
            if stmt.kind == cast.N_STMT_IF or
                    stmt.kind == cast.N_STMT_DO {
                for clause in stmt.subexprs {
                    for block in clause.subblocks {
                        if not check_and_analyze_recurse(block, msgs,
                                max_block_nesting_left - 1) {
                            return no
                        }
                    }
                }
            } elseif stmt.subblocks.len > 0 {
                for block in stmt.subblocks {
                    if not check_and_analyze_recurse(block, msgs,
                            max_block_nesting_left - 1) {
                        return no
                    }
                }
            }
        }
        return yes
    }
    return check_and_analyze_recurse(
        stmts, msgs, compiler_limit.max_statement_nesting
    )
}

func do_advanced_check_and_analysis(project, msgs) {
    func process_file(pfile) {
        pfile.ensure_ast() later:

        if not advanced_phase1_globalrefs(
                pfile.ast.stmts, msgs,
                project_file=pfile) {
            return later no
        }
        while yes {
            var result = advanced_phase2_evaluate_global_scope(
                pfile, msgs
            )
            if result != "repeat" {
                if result == no  {
                    return later no
                }
                break
            }
        }
        if not advanced_phase3_later_and_computevals(
                pfile.ast.stmts, msgs,
                project_file=pfile) {
            return later no
        }
        return later yes
    }
    var check_went_ok = project.do_for_all_files(process_file)
    later:

    await check_went_ok
    for m in msgs {
        if m.kind == msg.M_ERROR {
            check_went_ok = no
        }
    }

    return later check_went_ok
}

func do_basic_check_and_analysis(project, msgs) {
    func do_unsafe {
        func process_file(pfile) {
            pfile.ensure_ast() later:

            if not basic_phase_nestingdepth_and_misc(
                    pfile.ast.stmts, msgs,
                    project_file=pfile) {
                return later no
            }
            return later yes
        }
        var check_went_ok = project.do_for_all_files(process_file)
        later:

        await check_went_ok
        for m in msgs {
            if m.kind == msg.M_ERROR {
                check_went_ok = no
            }
        }

        return later check_went_ok
    }
    var result = do_unsafe() later:

    await result
    if result == no and msgs != none {
        var had_error = no
        for m in msgs {
            if m.kind == msg.M_ERROR {
                had_error = yes
                break
            }
        }
        if not had_error {
            msgs.add(new msg.FileMsg(
                "Internal error occured, we failed "
                "analysis without a proper error message. "
                "Please report this bug to the compiler team."
            ))
        }
    }
    return later result
}

