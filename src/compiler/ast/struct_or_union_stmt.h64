## @module compiler.ast.struct_or_union_stmt
# Copyright (c) 2024-2025, ellie/@ell1e & Horse64's contributors
# (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.


import math from core.horse64.org

import compiler.ast as ast
import compiler.ast.block as block
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.ast.type_stmt as type_stmt
import compiler.msg as msg
import compiler.token as token

type StructStmt base ast.StmtNode {
    var label
    var is_packed = no
    var is_auto_own = no
}

func StructStmt.init {
    base.init()
    self.kind = ast.N_STMT_STRUCT
}

func StructStmt.as_json_obj {
    var output = base.as_json_obj()
    output["label"] = self.label
    if self.is_auto_own {
        output["auto_own"] = yes
    }
    output["packed"] = self.is_packed
    return output
}

func StructStmt.as_code(indent=0) {
    if self.damaged {
        return " ".rep(indent) + "(damaged type)"
    }
    var t = " ".rep(indent) + "struct"
    if self.label != none {
        t += " " + self.label
    }
    t += " {\n"
    for stmt in self.subblocks[1] {
        t += stmt.as_code(indent=(indent + 4)) + "\n"
    }
    t += " ".rep(indent) + "}"
    return t
}

type StructExtendStmt base ast.StmtNode {
}

func StructExtendStmt.init {
    base.init()
    self.kind = ast.N_STMT_STRUCTEXTEND
}

func StructExtendStmt.as_json_obj {
    var output = base.as_json_obj()
    return output
}

func StructExtendStmt.as_code(indent=0) {
    if self.damaged {
        return " ".rep(indent) + "(damaged type extend)"
    }
    var t = " ".rep(indent) + "extend struct " +
        self.subexprs[1].as_code(indent=indent) + " {\n"
    for stmt in self.subblocks[1] {
        t += stmt.as_code(indent=(indent + 4)) + "\n"
    }
    t += " ".rep(indent) + "}"
    return t
}

type UnionStmt base ast.StmtNode {
}

func UnionStmt.init {
    base.init()
    self.kind = ast.N_STMT_UNION
}

func UnionStmt.as_json_obj {
    var output = base.as_json_obj()
    return output
}

func UnionStmt.as_code(indent=0) {
    if self.damaged {
        return " ".rep(indent) + "(damaged type)"
    }
    var t = " ".rep(indent) + "union {\n"
    for stmt in self.subblocks[1] {
        t += stmt.as_code(indent=(indent + 4)) + "\n"
    }
    t += " ".rep(indent) + "}"
    return t
}

func parse_struct_or_union_header(
        stmt, tokens, tokens_len, pos, msgs,
        project_file=none, debug=no
        ) {
    var clausestartpos = pos
    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            not {"struct", "union"}.has(tokens[pos].str) {
        return none
    }
    var is_struct = (tokens[pos].str == "struct")
    var is_union = not is_struct
    pos += 1  # Go past "struct"

    var struct_type_name
    if pos <= tokens_len and
            tokens[pos].kind == token.T_ENCLOSE and
            tokens[pos].str == "{" {
        # This is an anonymous struct or union.
        struct_type_name = none
    } elseif is_union or (is_struct and
            (pos > tokens_len or
            tokens[pos].kind != token.T_IDENT)) {
        if not stmt.has_damage() {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens,
                    pos) +
                ", expected valid expression for " +
                if is_struct ("struct") else ("union") +
                "statement starting in line " +
                token.get_line(tokens, clausestartpos).as_str() +
                ", column " +
                token.get_col(tokens, clausestartpos).as_str() + ".",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
        }
        stmt.damaged = yes
        var skiplen = math.max(1,
            token.skip_in_broken_stmt_to_code_block(
                tokens, pos, bracket_depth=0
            ))
        pos += skiplen
        return (pos - clausestartpos)    
    } elseif is_struct {
        assert(tokens[pos].kind == token.T_IDENT)
        struct_type_name = tokens[pos].str
        stmt.label = struct_type_name
        pos += 1
    }

    if pos <= tokens_len and (
            tokens[pos].kind != token.T_ENCLOSE or
            tokens[pos].str != "{") {
        if not stmt.has_damage() {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens,
                    pos) +
                ", expected '{' for code block "
                "for struct statement starting in line " +
                token.get_line(tokens,
                    clausestartpos).as_str() +
                ", column " +
                token.get_col(tokens,
                    clausestartpos).as_str() + ".",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
        }
        stmt.damaged = yes
        var skiplen = math.max(1,
            token.skip_in_broken_stmt_to_code_block(
                tokens, pos, bracket_depth=0
            ))
        pos += skiplen
    }
    return (pos - clausestartpos)
}

func parse(tokens, pos, msgs, project_file=none,
           is_moose64=no, debug=no) {
    var tokens_len = tokens.len
    var startpos = pos
    if not is_moose64 or pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            not {"union", "struct"}.has(tokens[pos].str) {
        return later none
    }

    var is_struct = (tokens[pos].str == "struct")
    var is_union = not is_struct
    var stmt = if is_struct (new StructStmt()) else (new UnionStmt())
    var headerlen = parse_struct_or_union_header(
        stmt, tokens, tokens_len, pos, msgs,
        project_file=project_file, debug=debug
    )
    if headerlen == none {
        return later none
    }
    stmt.line = token.get_line(tokens, startpos)
    stmt.col = token.get_col(tokens, startpos)
    pos += headerlen

    # Parse inner code block:
    var block_result = block.parse(
        tokens, pos, msgs, project_file=project_file,
        is_moose64=is_moose64,
        had_damage=stmt.has_damage(),
        block_purpose_name="for the struct "
            "statement starting in "
            "line " + token.get_line(tokens, startpos).as_str() +
            ", column " + token.get_col(tokens, startpos).as_str(),
        debug=debug,
    ) later:

    await block_result
    if block_result.has_damage() {
        stmt.damaged = yes
    }
    pos += block_result.token_len
    stmt.subblocks.add(block_result.stmts)
    stmt.token_len = (pos - startpos)
    if pos - 1 >= 1 and
            tokens[pos - 1].kind == token.T_ENCLOSE and
            tokens[pos - 1].str == "}" {
        while pos <= tokens_len and
                tokens[pos].kind == token.T_KEYWORD and
                {"packed", "auto_own"}.has(
                    tokens[pos].str
                ) {
            var t = tokens[pos].str
            if t == "packed" {
                stmt.is_packed = yes
            } elseif t == "auto_own" {
                stmt.is_auto_own = yes
            }
            pos += 1
            stmt.token_len += 1
        }
    }
    if not stmt.damaged {
        type_stmt.check_type_block_contents(
            stmt, msgs, project_file=project_file,
            is_moose64=is_moose64
        )
    }
    return later stmt
}

