## @module compiler.ast.block
# Copyright (c) 2023-2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org

import compiler.ast as ast
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.build_options as build_options
import compiler.msg as msg
import compiler.token as token

type CodeBlockResult {
    ## @type [StmtNode]
    var stmts = []

    ## @type num
    var token_len = 0

    ## Similar to @{TreeNode.damaged}.
    var damaged
}

func CodeBlockResult.has_damage {
    if self.damaged {
        return yes
    }
    for stmt in self.stmts {
        if stmt.has_damage() {
            return yes
        }
    }
    return no
}

func CodeBlockResult.copy {
    var self_copy = base.copy()
    self_copy.stmts = self.stmts.copy()
    return self_copy
}

func parse(tokens, pos, msgs, project_file=none,
        had_damage=no, block_purpose_name="",
        is_moose64=no, debug=no) {
    var startpos = pos
    const tokens_len = tokens.len
    var result = new CodeBlockResult()

    # Ensure we have an opening '{' bracket:
    if pos > tokens_len or
            tokens[pos].kind != token.T_ENCLOSE or
            tokens[pos].str != "{" {
        if not had_damage {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens, pos) +
                ", expected '{' (T_ENCLOSE) to start "
                "code block" +
                if block_purpose_name.len > 0 (" ") else ("") +
                block_purpose_name + ".",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
        }
        var skiplen = math.max(1,
            token.skip_in_broken_stmt_to_code_block(
                tokens, pos, bracket_depth=0
            ))
        pos += skiplen
        result.damaged = yes
        if pos > tokens_len or
                tokens[pos].kind != token.T_ENCLOSE or
                tokens[pos].str != "{" {
            # Still haven't found block, bail.
            result.token_len = pos - startpos
            return result
        }
    }
    pos += 1  # Past opening '{'.

    # Get code block contents:
    var contents = ast.parse_to_ast_ex(
        tokens, pos, project_file=project_file,
        is_inside_block=yes, is_moose64=is_moose64,
        debug=debug
    ) later:

    await contents
    if contents == none {
        contents = new invalid_stmt.InvalidStmt()
        var skiplen = token.get_naive_stmt_or_expr_len(
            tokens, pos, bracket_depth=0, for_expr=no
        )
        contents.token_len = pos + skiplen
    }
    msgs += contents.msgs
    result.stmts = contents.stmts
    pos += contents.token_len 

    # See if we're missing a proper end:
    if pos > tokens_len or
            tokens[pos].kind != token.T_ENCLOSE or
            tokens[pos].str != "}" {
        if not result.has_damage() {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens, pos) +
                ", expected '}' (T_ENCLOSE) to end "
                "code block starting in line " +
                token.get_line(tokens, startpos).as_str() + ", "
                "column " + token.get_col(tokens, startpos).as_str() +
                if block_purpose_name.len > 0 (" (") else ("") +
                block_purpose_name +
                if block_purpose_name.len > 0 (")") else ("") + ".",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
        }
        result.damaged = yes
    } else {
        pos += 1
        result.damaged = no
    }

    result.token_len = pos - startpos
    return result
}

