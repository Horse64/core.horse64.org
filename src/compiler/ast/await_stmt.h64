## @module compiler.ast.await_stmt
# Copyright (c) 2023-2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org

import compiler.ast as ast
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.msg as msg
import compiler.token as token

type AwaitStmt base ast.StmtNode {
}

func AwaitStmt.init {
    base.init()
    self.kind = ast.N_STMT_AWAIT
}

func AwaitStmt.as_json_obj {
    var output = base.as_json_obj()
    return output
}

func AwaitStmt.as_code(indent=0) {
    if self.damaged {
        return " ".rep(indent) + "(damaged await)"
    }
    var t = " ".rep(indent) + "await"
    if self.subexprs.len > 0 {
        var is_first = yes
        for expr in self.subexprs {
            if not is_first {
                t += ","
            } else {
                is_first = no
            }
            t += " " + expr.as_code(indent=indent)
        }
    }
    return t
}

func parse(tokens, pos, msgs, project_file=none,
           is_moose64=no, debug=no) {
    var stmt = new AwaitStmt()
    var tokens_len = tokens.len
    var startpos = pos

    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            tokens[pos].str != "await" {
        return later none
    }

    if debug {
        print("compiler.ast.await_stmt: parse() on " +
            tokens.sub(pos, math.min(pos + 10, tokens_len)).as_str() +
            "... with pos=" + pos.as_str() + ", "
            "tokens.len=" + tokens.len.as_str())
    }
    stmt.line = token.get_line(tokens, pos)
    stmt.col = token.get_col(tokens, pos)
    pos += 1

    var v = expr.parse_expression(
        tokens, pos, msgs, is_moose64=is_moose64,
        project_file=project_file
    ) later:

    await v
    if v == none or
            v.kind != ast.N_EXPR_IDREF {
        if not stmt.damaged {
            msgs.add(new msg.FileMsg(
                "Unexpected expression " +
                ast.NodeKind.num_label(stmt.subexprs[2].kind) +
                if stmt.subexprs[2].kind == ast.N_EXPR_BINOP
                    (" (of type '" +
                     stmt.subexprs[2].optoken.str + "')")
                    else ("") + ", "
                "await must be used on simple local variables "
                "specified as N_EXPR_IDREF.",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
        }
        stmt.damaged = yes
        if v == none {
            var skiplen = token.get_naive_stmt_or_expr_len(
                tokens, pos - 1, bracket_depth=0, for_expr=no,
                is_moose64=is_moose64
            )
            v = new expr.InvalidExpr(skiplen)
        }
    }
    pos += v.token_len
    stmt.subexprs.add(v)
    if pos > tokens_len or tokens[pos].kind != token.T_COMMA {
        stmt.token_len = (pos - startpos)
        return later stmt
    }
    pos += 1  # Past ','

    v = expr.parse_expression(
        tokens, pos, msgs,
        project_file=project_file
    ) later repeat
}

