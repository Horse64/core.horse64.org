# @module compiler.ast.import_stmt
# Copyright (c) 2020-2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.msg as msg
import compiler.token as token

type ImportStmt base ast.StmtNode {
    var module_path = []
    var library_name
    var renamed_as
}

func ImportStmt.copy {
    var new_stmt = new ImportStmt()
    new_stmt.module_path = self.module_path.copy()
    new_stmt.library_name = self.library_name
    new_stmt.renamed_as = self.renamed_as
    new_stmt.line = self.line
    new_stmt.col = self.col
    return new_stmt
}

func ImportStmt.init {
    base.init()
    self.kind = ast.N_STMT_IMPORT
}

func ImportStmt.as_json_obj {
    var output = base.as_json_obj()
    output["module_path"] = self.module_path
    output["library_name"] = self.library_name
    output["renamed_as"] = self.renamed_as
    return output
}

func parse(tokens, pos, msgs, project_file=none, debug=no) {
    var stmt = new ImportStmt()
    var tokens_len = tokens.len
    var startpos = pos

    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            tokens[pos].str != "import" {
        return later none
    }
    stmt.col = tokens[pos].col
    stmt.line = tokens[pos].line
    pos += 1

    # Bail with error if no module path follows at all:
    if pos > tokens_len or
            tokens[pos].kind != token.T_IDENT {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected identifier (T_IDENT) specifying "
            "imported module.",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        var skiplen = token.get_naive_stmt_or_expr_len(
            tokens, startpos, bracket_depth=0, for_expr=no
        )
        assert(skiplen > 0)
        var invalid_st = new invalid_stmt.InvalidStmt(skiplen)
        invalid_st.line = token.get_line(tokens, startpos)
        invalid_st.col = token.get_col(tokens, startpos)
        return invalid_st
    }
    stmt.module_path.add(tokens[pos].str)
    pos += 1

    # Extract further components of import path:
    while pos + 1 <= tokens_len and
            tokens[pos].kind == token.T_DOT and
            tokens[pos + 1].kind == token.T_IDENT {
        stmt.module_path.add(tokens[pos + 1].str)
        pos += 2
    }

    # Extract 'from' clause if any:
    if pos <= tokens_len and
            tokens[pos].kind == token.T_KEYWORD and
            tokens[pos].str == "from" {
        pos += 1
        if pos <= tokens_len and
                tokens[pos].kind == token.T_IDENT {
            stmt.library_name = tokens[pos].str
            pos += 1
            while pos + 1 <= tokens_len and
                    tokens[pos].kind == token.T_DOT and
                    tokens[pos + 1].kind == token.T_IDENT {
                stmt.library_name += "." + tokens[pos + 1].str
                pos += 2
            }
        } else {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens, pos) +
                ", expected identifier (T_IDENT) specifying "
                "library name for 'from' clause.",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
            var skiplen = math.max(1,
                token.get_naive_stmt_or_expr_len(
                    tokens, pos - 1, bracket_depth=0, for_expr=no
                ) - 1)
            assert(skiplen > 0)
            stmt.token_len = (pos - startpos) + skiplen
            return stmt
        }
    }

    # Extract 'as' clause, if any:
    if pos <= tokens_len and
            tokens[pos].kind == token.T_KEYWORD and
            tokens[pos].str == "as" {
        pos += 1
        if pos <= tokens_len and
                tokens[pos].kind == token.T_IDENT {
            stmt.renamed_as = tokens[pos].str
            pos += 1
        } else {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens, pos) +
                ", expected identifier (T_IDENT) specifying "
                "name for 'as' clause.",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
            var skiplen = math.max(1, token.get_naive_stmt_or_expr_len(
                    tokens, pos - 1, bracket_depth=0, for_expr=no
                ) - 1)
            pos += skiplen
            stmt.token_len = pos - startpos
            return stmt
        }
    }

    stmt.token_len = (pos - startpos)
    return stmt
}

