## @module compiler.ast.var_stmt
# Copyright (c) 2023-2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org

import compiler.ast as ast
import compiler.ast.block as block
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.ast.later_parse as later_parse
import compiler.typeinfo.ast_typeref as ast_typeref
import compiler.msg as msg
import compiler.token as token

type VarStmt base ast.StmtNode {
    var is_const = no
    var has_later = no
    var has_later_ignore = no
    var has_later_repeat = no
    var var_labels = []
    var vars_autoconst_list = none
    var is_empty = no
    var has_protect = no
    var has_type_expr = no

    var initial_value_known = no
    var initial_value
    var initial_type_known = no
    var initial_type
}

func VarStmt.init {
    base.init()
    self.kind = ast.N_STMT_VAR
}

func VarStmt.copy {
    var self_copy = base.copy()
    self_copy.var_labels = []
    for label in self.var_labels {
        self_copy.var_labels.add(label)
    }
    self_copy.var_has_protect = []
    return self_copy
}

func VarStmt.as_json_obj {
    var output = base.as_json_obj()
    output["is_const"] = self.is_const
    output["var_labels"] = self.var_labels.copy()
    if self.has_protect {
        output["has_protect"] = yes
    }
    if self.has_later {
        output["has_later"] = yes
    }
    if self.has_later_ignore {
        output["has_later_ignore"] = yes
    }
    if self.has_later_repeat {
        output["has_later_repeat"] = yes
    }
    if self.has_type_expr {
        output["has_type_expr"] = yes
    }
    return output
}

func VarStmt.as_code(indent=0) {
    if self.damaged {
        return " ".rep(indent) + "(damaged var)"
    }
    var t = " ".rep(indent) + if self.is_const ("const ") else ("var ")
    var is_first = yes
    for label in self.var_labels {
        if is_first {
            is_first = no
        } else {
            t += ","
        }
        t += label
    }

    var assigned_exprs = self.subexprs
    var type_expr = none
    if self.has_type_expr and assigned_exprs.len > 0 {
        type_expr = assigned_exprs[assigned_exprs.len]
        assigned_exprs = assigned_exprs.sub(
            1, assigned_exprs.len - 1
        )
    }
    if type_expr != none {
        t += " <- "
        t += type_expr.as_code(indent=(indent + 4))
    }
    if self.has_protect {
        t += " protect"
    }

    if not self.is_empty {
        t += " = "
        is_first = yes
        for value in assigned_exprs {
            if is_first {
                is_first = no
            } else {
                t += ","
            }
            t += value.as_code(indent=(indent + 4))
            is_first = no
        }
    }
    if self.has_later {
        if self.has_later_ignore {
            t += " later ignore"
        } elseif self.has_later_repeat {
            t += " later repeat"
        } else {
            t += " later:"
        }
    }
    return t
}

func parse(tokens, pos, msgs, project_file=none,
           is_moose64=no, debug=no) {
    var stmt = new VarStmt()
    var tokens_len = tokens.len
    var startpos = pos

    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            (tokens[pos].str != "var" and
            tokens[pos].str != "const") {
        return later none
    }
    if debug {
        print("compiler.ast.var_stmt: parse() on " +
            tokens.sub(pos, math.min(pos + 10, tokens_len)).as_str() +
            "... with pos=" + pos.as_str() + ", "
            "tokens.len=" + tokens.len.as_str())
    }
    stmt.is_const = (tokens[pos].str == "const")
    const stmt_name = if stmt.is_const ("const") else ("var")
    stmt.line = token.get_line(tokens, startpos)
    stmt.col = token.get_col(tokens, startpos)
    pos += 1

    # Parse variable names:
    var had_special = no
    var had_protect = no
    var varcount = 0
    while yes {
        if pos > tokens_len or
                tokens[pos].kind != token.T_IDENT {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens, pos) +
                ", expected T_IDENT to name variable "
                "for " + stmt_name + " statement starting in line " +
                token.get_line(tokens, startpos).as_str() +
                ", column " +
                token.get_col(tokens, startpos).as_str() + ".",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
            var skiplen = math.max(1,
                token.get_naive_stmt_or_expr_len(
                    tokens, pos - 1, bracket_depth=0, for_expr=no,
                    is_moose64=is_moose64
                ) - 1)
            var invalid_st = new invalid_stmt.InvalidStmt(
                skiplen
            )
            invalid_st.line = token.get_line(tokens, startpos)
            invalid_st.col = token.get_col(tokens, startpos)
            invalid_st.token_len = (pos - startpos) + skiplen
            return invalid_st
        }
        stmt.var_labels.add(tokens[pos].str)
        varcount += 1
        pos += 1
        if is_moose64 and pos <= tokens_len and
                not stmt.has_type_expr and not had_special and
                tokens[pos].kind == token.T_LEFTPTR {
            break
        }
        if pos > tokens_len or
                tokens[pos].kind != token.T_COMMA {
            break
        }
        pos += 1  # Past ','
    }

    # Parse a type if given:
    func parse_type_if_any(tokens, tokens_len, stmt,
                           pos, msgs, is_moose64=no) {
        if not is_moose64 or pos > tokens_len or
                stmt.has_type_expr or had_special or
                tokens[pos].kind != token.T_LEFTPTR {
            return later 0
        }
        var startpos = pos
        pos += 1

        var v = ast_typeref.parse_typeref(
            tokens, pos, msgs, is_moose64=is_moose64,
            project_file=project_file, debug=debug
        ) later:

        await v
        if v == none {
            msgs.add(new msg.FileMsg(
                "Unexpected " +
                token.describe_token_at(tokens, pos) +
                ", expected expression to declare type.",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
            var skiplen = math.max(1,
                token.get_naive_stmt_or_expr_len(
                    tokens, pos - 1, bracket_depth=0, for_expr=no,
                    is_moose64=is_moose64
                ) - 1)
            v = new expr.InvalidExpr(skiplen)
            stmt.damaged = yes
        } elseif v.damaged {
            stmt.damaged = yes
        }
        stmt.has_type_expr = yes
        assert(stmt.subexprs.len == 0)
        stmt.subexprs.add(v)
        had_special = yes
        pos += v.token_len
        return later (pos - startpos)
    }
    var parsed_len = parse_type_if_any(
        tokens, tokens_len, stmt, pos, msgs,
        is_moose64=is_moose64
    ) later:

    await parsed_len
    assert(parsed_len >= 0)
    pos += parsed_len

    # Parse special labels like 'protect':
    while yes {
        if pos <= tokens_len and
                tokens[pos].kind == token.T_KEYWORD and
                tokens[pos].str == "protect" and
                (not is_moose64 or stmt.has_type_expr) {
            had_protect = yes
            stmt.has_protect = yes
            had_special = yes
            pos += 1
        } else {
            break
        }
    }

    # Check various errors that can happen up to here:
    var had_error_unexpected = no
    if is_moose64 and not stmt.has_type_expr {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected '<-' (T_LEFTPTR) specifying type "
            "following " + stmt_name + " "
            "statement starting in line " +
            token.get_line(tokens, startpos).as_str() +
            ", column " +
            token.get_col(tokens, startpos).as_str() + ".",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        had_error_unexpected = yes
    }
    # If now comes an appended constructor shorthand,
    # parse it:
    var had_init_shorthand = no
    func parse_moose64_type_constructor_if_any {
        if not is_moose64 or had_error_unexpected or
                pos > tokens_len or
                not stmt.has_type_expr or
                tokens[pos].kind != token.T_ENCLOSE or
                tokens[pos].str != "(" {
            return later
        }
        assert(stmt.subexprs.len == 1)
        var type_expr = stmt.subexprs[1]
        var inner_expr = expr.parse_call_or_funcdef_args(
            tokens, pos, msgs,
            is_call=yes, project_file=project_file,
            callordef_line=token.get_line(tokens, pos),
            callordef_col=token.get_col(tokens, pos),
            max_len=tokens_len,
            allow_type_refs=no, require_type_refs=no,
            debug=no
        ) later:

        await inner_expr
        var expr_pos = pos
        had_init_shorthand = yes
        assert(inner_expr != none)
        assert(inner_expr.token_len >= 0)
        pos += inner_expr.token_len
        assert(stmt.has_type_expr)
        assert(stmt.subexprs.len == 1)
        assert(stmt.subexprs[1].subexprs.len == 0 and
               not stmt.subexprs[1].has_init_expr)
        stmt.subexprs[1].subexprs.add(inner_expr)
        stmt.subexprs[1].has_init_expr = yes

        var prev_type_expr_len = type_expr.token_len

        if stmt.var_labels.len > 1 {
            msgs.add(new msg.FileMsg(
                "Unexpected constructor shorthand, not allowed for "
                "variable statements with multiple assigned "
                "names like found in line " +
                token.get_line(tokens, startpos).as_str() +
                ", column " +
                token.get_col(tokens, startpos).as_str() + ".",
                source_file=project_file,
                line=token.get_line(tokens, expr_pos),
                col=token.get_col(tokens, expr_pos),
            ))
            stmt.damaged = yes
        }

        # Try trailing typeref mods, if any:
        var v = ast_typeref.parse_typeref(
            tokens, pos, msgs, extend_typeref_expr=type_expr,
            is_moose64=is_moose64,
            project_file=project_file, debug=debug
        ) later:

        await v
        assert((v == none and
            type_expr.token_len == prev_type_expr_len)
            or v == type_expr or v.damaged)
        if type_expr.token_len != prev_type_expr_len {
            assert(type_expr.token_len > prev_type_expr_len)
            pos += type_expr.token_len - prev_type_expr_len
        }
        return later
    }
    parse_moose64_type_constructor_if_any()
    later:

    # If we had any major errors so far, bail if necessary:
    if not had_error_unexpected and
            not token.can_stmt_or_expr_end_before_token(
            tokens, pos, for_expr=no
            ) and (tokens[pos].kind != token.T_ASSIGN or
            (is_moose64 and had_init_shorthand)) {
        var expected_remark = " expected ',', or '=', or "
            "a new statement"
        if had_init_shorthand {
            expected_remark = " expected a new statement"
        } elseif had_special {
            expected_remark = " expected '=' or a new statement"
        }
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            "," + expected_remark + " "
            "following " + stmt_name + " "
            "statement starting in line " +
            token.get_line(tokens, startpos).as_str() +
            ", column " +
            token.get_col(tokens, startpos).as_str() + ".",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        stmt.damaged = yes
        had_error_unexpected = yes
    }
    if had_error_unexpected {
        var skiplen = math.max(1, token.get_naive_stmt_or_expr_len(
                tokens, pos - 1, bracket_depth=0, for_expr=no,
                is_moose64=is_moose64
            ) - 1)
        var invalid_st = new invalid_stmt.InvalidStmt(
            skiplen
        )
        invalid_st.line = token.get_line(tokens, startpos)
        invalid_st.col = token.get_col(tokens, startpos)
        invalid_st.token_len = (pos - startpos) + skiplen
        return invalid_st
    }

    # Bail if the statement ends here:
    if tokens[pos].kind != token.T_ASSIGN {
        var i = 1
        while i <= varcount {
            var lexpr = new expr.LiteralExpr()
            lexpr.value = none
            if not stmt.has_type_expr {
                stmt.subexprs.add(lexpr)
            } else {
                stmt.subexprs = stmt.subexprs.sub(
                    1, stmt.subexprs.len - 1
                ) + [lexpr, stmt.subexprs[stmt.subexprs.len]]
            }
            i += 1
        }
        if is_moose64 {
            stmt.is_empty = yes
        }
        stmt.token_len = (pos - startpos)
        return stmt
    }
    pos += 1  # Past '='

    # Get default values for each respective variable:
    var remaining_count = varcount
    assert(remaining_count > 0)
    if debug {
        print("compiler.ast.var_stmt: parse() fetching " +
            "init expression at pos=" + pos.as_str())
    }
    var v2 = expr.parse_expression(
        tokens, pos, msgs, is_moose64=is_moose64,
        project_file=project_file, debug=debug
    ) later:

    await v2
    if v2 == none {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected assigned value for variable "
            "following " + stmt_name +
            " statement starting in line " +
            token.get_line(tokens, startpos).as_str() +
            ", column " +
            token.get_col(tokens, startpos).as_str() + ".",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        var skiplen = math.max(1,
            token.get_naive_stmt_or_expr_len(
                tokens, pos - 1, bracket_depth=0, for_expr=no,
                is_moose64=is_moose64
            ) - 1)
        pos += skiplen
        stmt.token_len = (pos - startpos)
        while remaining_count > 0 {
            var lexpr = new expr.LiteralExpr()
            lexpr.value = none
            if not stmt.has_type_expr {
                stmt.subexprs.add(lexpr)
            } else {
                stmt.subexprs = stmt.subexprs.sub(
                    1, stmt.subexprs.len - 1
                ) + [lexpr, stmt.subexprs[stmt.subexprs.len]]
            }
            remaining_count -= 1
        }
        stmt.damaged = yes
        return stmt
    }
    if debug {
        print("compiler.ast.var_stmt: parse() obtained " +
            "init expression at pos=" + pos.as_str() +
            " with len=" + v2.token_len.as_str())
    }
    if not stmt.has_type_expr {
        stmt.subexprs.add(v2)
    } else {
        stmt.subexprs = stmt.subexprs.sub(
            1, stmt.subexprs.len - 1
        ) + [v2, stmt.subexprs[stmt.subexprs.len]]
    }
    pos += v2.token_len
    remaining_count -= 1
    if remaining_count <= 0 {
        stmt.token_len = (pos - startpos)

        var newpos =
            later_parse.
                parse_later_postfix(tokens, pos, stmt, msgs,
                project_file=project_file, debug=debug)
        if newpos > pos and not stmt.damaged {
            if stmt.subexprs.len > 2 {  # More than one name, value pair
                msgs.add(new msg.FileMsg(
                    "Unexpected use of 'later' for " + stmt_name + " "
                    "statement declaring multiple variables, "
                    "can only be used for single declared variables.",
                    source_file=project_file,
                    line=token.get_line(tokens, pos),
                    col=token.get_col(tokens, pos),
                ))
                stmt.damaged = yes
            }
            if stmt.subexprs.len == 2 and (
                    stmt.subexprs[2].kind != ast.N_EXPR_BINOP or
                    stmt.subexprs[2].optoken.str != "(") {
                msgs.add(new msg.FileMsg(
                    "Unexpected use of 'later' for assigned "
                    "expression " +
                    ast.NodeKind.num_label(stmt.subexprs[2].kind) +
                    if stmt.subexprs[2].kind == ast.N_EXPR_BINOP
                        (" (of type '" +
                         stmt.subexprs[2].optoken.str + "')")
                        else ("") + ", "
                    "can only use 'later' after call expression.",
                    source_file=project_file,
                    line=token.get_line(tokens, pos),
                    col=token.get_col(tokens, pos),
                ))
                stmt.damaged = yes
            }
        }
        pos = newpos
        stmt.token_len = (pos - startpos)
        return stmt
    }
    if pos > tokens_len or
            tokens[pos].kind != token.T_COMMA {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected ',' for more initial variable values "
            "following " + stmt_name +
            " statement starting in line " +
            token.get_line(tokens, startpos).as_str() +
            ", column " +
            token.get_col(tokens, startpos).as_str() + ".",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        var skiplen = math.max(1, token.get_naive_stmt_or_expr_len(
                tokens, pos - 1, bracket_depth=0, for_expr=no,
                is_moose64=is_moose64
            ) - 1)
        pos += skiplen
        stmt.token_len = pos - startpos
        while remaining_count > 0 {
            var lexpr = new expr.LiteralExpr()
            lexpr.value = none
            if not stmt.has_type_expr {
                stmt.subexprs.add(lexpr)
            } else {
                stmt.subexprs = stmt.subexprs.sub(
                    1, stmt.subexprs.len - 1
                ) + [lexpr, stmt.subexprs[stmt.subexprs.len]]
            }
            remaining_count -= 1
        }
        return stmt
    }
    pos += 1  # Go past ','.

    if debug {
        print("compiler.ast.var_stmt: parse() fetching " +
            "init expression at pos=" + pos.as_str())
    }
    v2 = expr.parse_expression(
        tokens, pos, msgs, is_moose64=is_moose64,
        project_file=project_file, debug=debug
    ) later repeat
}

