## @module compiler.ast.var_stmt
# Copyright (c) 2023-2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org

import compiler.ast as ast
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.ast.later_parse as later_parse
import compiler.ast.block as block
import compiler.msg as msg
import compiler.token as token

type VarStmt base ast.StmtNode {
    var is_const = no
    var has_later = no
    var has_later_ignore = no
    var has_later_repeat = no
    var var_labels = []
    var has_protect = no
    var type_path = none
    var type_label = none

    var initial_value_known = no
    var initial_value
    var initial_type_known = no
    var initial_type
}

func VarStmt.init {
    base.init()
    self.kind = ast.N_STMT_VAR
}

func VarStmt.copy {
    var self_copy = base.copy()
    self_copy.var_labels = []
    for label in self.var_labels {
        self_copy.var_labels.add(label)
    }
    self_copy.var_has_protect = []
    return self_copy
}

func VarStmt.as_json_obj {
    var output = base.as_json_obj()
    output["is_const"] = self.is_const
    output["var_labels"] = self.var_labels.copy()
    if self.has_protect {
        output["has_protect"] = yes
    }
    if self.has_later {
        output["has_later"] = yes
    }
    if self.has_later_ignore {
        output["has_later_ignore"] = yes
    }
    if self.has_later_repeat {
        output["has_later_repeat"] = yes
    }
    if self.type_path != none and
            self.type_path.len > 0 {
        output["type_path"] = self.type_path.copy()
    }
    if self.type_label != none {
        output["type_label"] = self.type_label
    }
    return output
}

func VarStmt.as_code(indent=0) {
    if self.damaged {
        return " ".rep(indent) + "(damaged var)"
    }
    var t = " ".rep(indent) + if self.is_const ("const ") else ("var ")
    var is_first = yes
    for label in self.var_labels {
        if is_first {
            is_first = no
        } else {
            t += ","
        }
        t += label
    }
    if self.type_label != none {
        t += "<-"
        if self.type_path != none and self.type_path.len > 0 {
            t += self.type_path.join(".") + "."
        }
        t += self.type_label
    }
    if self.has_protect {
        t += " protect"
    }
    t += " = "
    is_first = yes
    for value in self.subexprs {
        if is_first {
            is_first = no
        } else {
            t += ","
        }
        t += value.as_code(indent=(indent + 4))
        is_first = no
    }
    if self.has_later {
        if self.has_later_ignore {
            t += " later ignore"
        } elseif self.has_later_repeat {
            t += " later repeat"
        } else {
            t += " later:"
        }
    }
    return t
}

func parse(tokens, pos, msgs, project_file=none,
           is_moose64=no, debug=no) {
    var stmt = new VarStmt()
    var tokens_len = tokens.len
    var startpos = pos

    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            (tokens[pos].str != "var" and
            tokens[pos].str != "const") {
        return later none
    }
    if debug {
        print("compiler.ast.var_stmt: parse() on " +
            tokens.sub(pos, math.min(pos + 10, tokens_len)).as_str() +
            "... with pos=" + pos.as_str() + ", "
            "tokens.len=" + tokens.len.as_str())
    }
    stmt.is_const = (tokens[pos].str == "const")
    const stmt_name = if stmt.is_const ("const") else ("var")
    stmt.line = token.get_line(tokens, startpos)
    stmt.col = token.get_col(tokens, startpos)
    pos += 1

    # Parse variable names:
    var had_special = no
    var had_protect = no
    var varcount = 0
    while yes {
        if pos > tokens_len or
                tokens[pos].kind != token.T_IDENT {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens, pos) +
                ", expected T_IDENT to name variable "
                "for " + stmt_name + " statement starting in line " +
                token.get_line(tokens, startpos).as_str() +
                ", column " +
                token.get_col(tokens, startpos).as_str() + ".",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
            var skiplen = math.max(1,
                token.get_naive_stmt_or_expr_len(
                    tokens, pos - 1, bracket_depth=0, for_expr=no,
                    is_moose64=is_moose64
                ) - 1)
            var invalid_st = new invalid_stmt.InvalidStmt(
                skiplen
            )
            invalid_st.line = token.get_line(tokens, startpos)
            invalid_st.col = token.get_col(tokens, startpos)
            invalid_st.token_len = (pos - startpos) + skiplen
            return invalid_st
        }
        stmt.var_labels.add(tokens[pos].str)
        varcount += 1
        pos += 1
        if is_moose64 and pos <= tokens_len and
                stmt.type_label == none and not had_special and
                tokens[pos].kind == token.T_LEFTPTR {
            pos += 1
            if pos > tokens_len or
                    tokens[pos].kind != token.T_IDENT {
                msgs.add(new msg.FileMsg(
                    "Unexpected " +
                    token.describe_token_at(tokens, pos) +
                    ", expected T_IDENT to declare type.",
                    source_file=project_file,
                    line=token.get_line(tokens, pos),
                    col=token.get_col(tokens, pos),
                ))
            }
            stmt.type_label = tokens[pos].str
            pos += 1
            while pos + 1 <= tokens_len and
                    tokens[pos].kind == token.T_DOT and
                    tokens[pos + 1].kind == token.T_IDENT {
                if stmt.type_path == none {
                    stmt.type_path = []
                }
                stmt.type_path.add(tokens[pos + 1].str)
                pos += 2
            }
            had_special = yes
        }
        if pos <= tokens_len and
                tokens[pos].kind == token.T_KEYWORD and
                tokens[pos].str == "protect" and
                (not is_moose64 or stmt.type_label != none) {
            had_protect = yes
            stmt.has_protectt = yes
            had_special = yes
            pos += 1
        }
        var had_error_unexpected = no
        if is_moose64 and stmt.type_label == none and
                (pos >= tokens_len or
                (tokens[pos].kind != token.T_COMMA or had_special) and
                 tokens[pos].kind != token.T_ASSIGN) {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens, pos) +
                ", expected '<-' (T_LEFTPTR) specifying type "
                "following " + stmt_name + " "
                "statement starting in line " +
                token.get_line(tokens, startpos).as_str() +
                ", column " +
                token.get_col(tokens, startpos).as_str() + ".",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
            had_error_unexpected = yes
        }
        if not had_error_unexpected and
                not token.can_stmt_or_expr_end_before_token(
                tokens, pos, for_expr=no
                ) and (pos > tokens_len or
                ((tokens[pos].kind != token.T_COMMA or had_special) and
                 tokens[pos].kind != token.T_ASSIGN)) {
            var expected_remark = " expected ',', or '=', or "
                "a new statement"
            if had_special {
                expected_remark = " '=' or a new statement"
            }
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens, pos) +
                "," + expected_remark + " "
                "following " + stmt_name + " "
                "statement starting in line " +
                token.get_line(tokens, startpos).as_str() +
                ", column " +
                token.get_col(tokens, startpos).as_str() + ".",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
            had_error_unexpected = yes
        }
        if had_error_unexpected {
            var skiplen = math.max(1, token.get_naive_stmt_or_expr_len(
                    tokens, pos - 1, bracket_depth=0, for_expr=no,
                    is_moose64=is_moose64
                ) - 1)
            var invalid_st = new invalid_stmt.InvalidStmt(
                skiplen
            )
            invalid_st.line = token.get_line(tokens, startpos)
            invalid_st.col = token.get_col(tokens, startpos)
            invalid_st.token_len = (pos - startpos) + skiplen
            return invalid_st
        }

        if (tokens[pos].kind != token.T_COMMA or
                had_special) and
                tokens[pos].kind != token.T_ASSIGN {
            var i = 1
            while i <= varcount {
                var lexpr = new expr.LiteralExpr()
                lexpr.value = none
                stmt.subexprs.add(lexpr)
                i += 1
            }
            stmt.token_len = (pos - startpos)
            return stmt
        } elseif tokens[pos].kind == token.T_ASSIGN {
            break
        }
        assert(tokens[pos].kind == token.T_COMMA)
        pos += 1  # Go past ','
    }
    pos += 1  # Past '='

    # Get default values for each respective variable:
    var remaining_count = varcount
    assert(remaining_count > 0)
    if debug {
        print("compiler.ast.var_stmt: parse() fetching " +
            "init expression at pos=" + pos.as_str())
    }
    var v = expr.parse_expression(
        tokens, pos, msgs, is_moose64=is_moose64,
        project_file=project_file, debug=debug
    ) later:

    await v
    if v == none {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected assigned value for variable "
            "following " + stmt_name +
            " statement starting in line " +
            token.get_line(tokens, startpos).as_str() +
            ", column " +
            token.get_col(tokens, startpos).as_str() + ".",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        var skiplen = math.max(1,
            token.get_naive_stmt_or_expr_len(
                tokens, pos - 1, bracket_depth=0, for_expr=no,
                is_moose64=is_moose64
            ) - 1)
        pos += skiplen
        stmt.token_len = (pos - startpos)
        while remaining_count > 0 {
            stmt.subexprs.add(new expr.LiteralExpr())
            remaining_count -= 1
        }
        stmt.damaged = yes
        return stmt
    }
    if debug {
        print("compiler.ast.var_stmt: parse() obtained " +
            "init expression at pos=" + pos.as_str() +
            " with len=" + v.token_len.as_str())
    }
    stmt.subexprs.add(v)
    pos += v.token_len
    remaining_count -= 1
    if remaining_count <= 0 {
        stmt.token_len = (pos - startpos)

        var newpos =
            later_parse.
                parse_later_postfix(tokens, pos, stmt, msgs,
                project_file=project_file, debug=debug)
        if newpos > pos and not stmt.damaged {
            if stmt.subexprs.len > 2 {  # More than one name, value pair
                msgs.add(new msg.FileMsg(
                    "Unexpected use of 'later' for " + stmt_name + " "
                    "statement declaring multiple variables, "
                    "can only be used for single declared variables.",
                    source_file=project_file,
                    line=token.get_line(tokens, pos),
                    col=token.get_col(tokens, pos),
                ))
                stmt.damaged = yes
            }
            if stmt.subexprs.len == 2 and (
                    stmt.subexprs[2].kind != ast.N_EXPR_BINOP or
                    stmt.subexprs[2].optoken.str != "(") {
                msgs.add(new msg.FileMsg(
                    "Unexpected use of 'later' for assigned "
                    "expression " +
                    ast.NodeKind.num_label(stmt.subexprs[2].kind) +
                    if stmt.subexprs[2].kind == ast.N_EXPR_BINOP
                        (" (of type '" +
                         stmt.subexprs[2].optoken.str + "')")
                        else ("") + ", "
                    "can only use 'later' after call expression.",
                    source_file=project_file,
                    line=token.get_line(tokens, pos),
                    col=token.get_col(tokens, pos),
                ))
                stmt.damaged = yes
            }
        }
        pos = newpos
        stmt.token_len = (pos - startpos)
        return stmt
    }
    if pos > tokens_len or
            tokens[pos].kind != token.T_COMMA {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected ',' for more initial variable values "
            "following " + stmt_name +
            " statement starting in line " +
            token.get_line(tokens, startpos).as_str() +
            ", column " +
            token.get_col(tokens, startpos).as_str() + ".",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        var skiplen = math.max(1, token.get_naive_stmt_or_expr_len(
                tokens, pos - 1, bracket_depth=0, for_expr=no,
                is_moose64=is_moose64
            ) - 1)
        pos += skiplen
        stmt.token_len = pos - startpos
        while remaining_count > 0 {
            stmt.subexprs.add(new expr.LiteralExpr())
            remaining_count -= 1
        }
        return stmt
    }
    pos += 1  # Go past ','.

    if debug {
        print("compiler.ast.var_stmt: parse() fetching " +
            "init expression at pos=" + pos.as_str())
    }
    v = expr.parse_expression(
        tokens, pos, msgs, is_moose64=is_moose64,
        project_file=project_file, debug=debug
    ) later repeat
}

