# @module compiler.ast.var_stmt
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org

import compiler.ast as ast
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.ast.block as block
import compiler.msg as msg
import compiler.token as token

type VarStmt base ast.StmtNode {
    var is_const = no
    var var_names = []
}

func VarStmt.init {
    base.init()
    self.kind = ast.N_STMT_RETURN
}

func VarStmt.as_json_obj {
    var output = base.as_json_obj()
    return output
}

func parse(tokens, pos, msgs, project_file=none, debug=no) {
    var stmt = new VarStmt()
    var tokens_len = tokens.len
    var startpos = pos

    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            (tokens[pos].str != "var" and
            tokens[pos].str != "const") {
        return later none
    }
    if debug {
        print("compiler.ast.var_stmt: parse() on " +
            tokens.sub(pos, math.min(pos + 10, tokens_len)).as_str() +
            "... with pos=" + pos.as_str() + ", "
            "tokens.len=" + tokens.len.as_str())
    }
    stmt.is_const = (tokens[pos].str == "const")
    const stmt_name = if stmt.is_const ("const") else ("var")
    stmt.pos = token.get_line(tokens, pos)
    stmt.col = token.get_col(tokens, pos)
    pos += 1

    # Parse variable names:
    while yes {
        if pos > tokens_len or
                tokens[pos].kind != token.T_IDENT {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens, pos) +
                ", expected T_IDENT to name variable "
                "for " + stmt_name + " statement starting in line " +
                token.get_line(tokens, startpos).as_str() +
                ", column " +
                token.get_col(tokens, startpos).as_str() + ".",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
            pos -= 1
            var skiplen = token.get_naive_stmt_or_expr_len(
                tokens, pos, bracket_depth=0, for_expr=no
            )
            var invalid_st = new invalid_stmt.InvalidStmt(
                skiplen
            )
            invalid_st.line = token.get_line(tokens, startpos)
            invalid_st.col = token.get_col(tokens, startpos)
            assert(skiplen > 0)
            invalid_st.token_len = (pos - startpos) + skiplen
            return invalid_st
        }
        stmt.var_names.add(tokens[pos].str)
        pos += 1
        if not token.can_stmt_or_expr_end_before_token(
                tokens, pos, for_expr=no
                ) and (pos > tokens_len or
                (tokens[pos].kind != token.T_COMMA and
                 tokens[pos].kind != token.T_ASSIGN)) {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens, pos) +
                ", expected ',' or '=', or a new statement "
                "following " + stmt_name +
                " statement starting in line " +
                token.get_line(tokens, startpos).as_str() +
                ", column " +
                token.get_col(tokens, startpos).as_str() + ".",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
            pos -= 1
            var skiplen = token.get_naive_stmt_or_expr_len(
                tokens, pos, bracket_depth=0, for_expr=no
            )
            var invalid_st = new invalid_stmt.InvalidStmt(
                skiplen
            )
            invalid_st.line = token.get_line(tokens, startpos)
            invalid_st.col = token.get_col(tokens, startpos)
            assert(skiplen > 0)
            invalid_st.token_len = (pos - startpos) + skiplen
            return invalid_st
        } elseif tokens[pos].kind != token.T_COMMA and
                tokens[pos].kind != token.T_ASSIGN {
            i = 1
            while i <= stmt.var_names {
                var lexpr = new LiteralExpr()
                lexpr.value = none
                stmt.subexprs.add(lexpr)
                i += 1
            }
            stmt.token_len = (pos - startpos)
            return stmt
        } elseif tokens[pos].kind == token.T_ASSIGN {
            break
        }
        pos += 1  # Go past ','
    }
    pos += 1  # Past '='

    # Get default values for each respective variable:
    var remaining_count = stmt.var_names.len
    assert(remaining_count > 0)
    if debug {
        print("compiler.ast.var_stmt: parse() fetching " +
            "init expression at pos=" + pos.as_str())
    }
    var v = expr.parse_expression(
        tokens, pos, msgs,
        project_file=project_file, debug=debug
    ) later:

    await v
    if v == none {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected initial value for variable "
            "following " + stmt_name +
            " statement starting in line " +
            token.get_line(tokens, startpos).as_str() +
            ", column " +
            token.get_col(tokens, startpos).as_str() + ".",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        pos -= 1
        var skiplen = token.get_naive_stmt_or_expr_len(
            tokens, pos, bracket_depth=0, for_expr=no
        )
        var invalid_st = new invalid_stmt.InvalidStmt(
            skiplen
        )
        invalid_st.line = token.get_line(tokens, startpos)
        invalid_st.col = token.get_col(tokens, startpos)
        assert(skiplen > 0)
        invalid_st.token_len = (pos - startpos) + skiplen
        return invalid_st
    }
    if debug {
        print("compiler.ast.var_stmt: parse() obtained " +
            "init expression at pos=" + pos.as_str() +
            " with len=" + v.token_len.as_str())
    }
    stmt.subexprs.add(v)
    pos += v.token_len
    remaining_count -= 1
    if remaining_count <= 0 {
        stmt.token_len = (pos - startpos)
        return stmt
    }
    if pos > tokens_len or
            tokens[pos].kind != T_COMMA {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(tokens, pos) +
            ", expected ',' for more initial variable values "
            "following " + stmt_name +
            " statement starting in line " +
            token.get_line(tokens, startpos).as_str() +
            ", column " +
            token.get_col(tokens, startpos).as_str() + ".",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
        pos -= 1
        var skiplen = token.get_naive_stmt_or_expr_len(
            tokens, pos, bracket_depth=0, for_expr=no
        )
        var invalid_st = new invalid_stmt.InvalidStmt(
            skiplen
        )
        invalid_st.line = token.get_line(tokens, startpos)
        invalid_st.col = token.get_col(tokens, startpos)
        assert(skiplen > 0)
        invalid_st.token_len = (pos - startpos) + skiplen
        return invalid_st
    }

    if debug {
        print("compiler.ast.var_stmt: parse() fetching " +
            "init expression at pos=" + pos.as_str())
    }
    v = expr.parse_expression(
        tokens, pos, msgs,
        project_file=project_file, debug=debug
    ) later repeat
}

