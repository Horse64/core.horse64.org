## @module compiler.ast.defer_stmt
# Copyright (c) 2024-2025, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org

import compiler.ast as ast
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.ast.block as block
import compiler.msg as msg
import compiler.token as token

type DeferStmt base ast.StmtNode {
    var has_later = no
    var has_failed = no
}

func DeferStmt.init {
    base.init()
    self.kind = ast.N_STMT_DEFER
}

func DeferStmt.as_json_obj {
    var output = base.as_json_obj()
    output["has_later"] = self.has_later
    output["has_failed"] = self.has_failed
    return output
}

func DeferStmt.as_code(indent=0) {
    if self.damaged {
        return " ".rep(indent) + "(damaged defer)"
    }
    var t = " ".rep(indent) + "defer"
    if self.subexprs.len > 0 {
        t += " " + self.subexprs[1].as_code(indent=indent)
    } else {
        t += " none"
    }
    return t
}

func parse(tokens, pos, msgs, project_file=none,
           is_moose64=no, debug=no) {
    var stmt = new DeferStmt()
    var tokens_len = tokens.len
    var startpos = pos

    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            tokens[pos].str != "defer" {
        return later none
    }

    if debug {
        print("compiler.ast.defer_stmt: parse() on " +
            tokens.sub(pos, math.min(pos + 10, tokens_len
            )).as_str() +
            "... with pos=" + pos.as_str() + ", "
            "tokens.len=" + tokens.len.as_str())
    }
    stmt.line = token.get_line(tokens, pos)
    stmt.col = token.get_col(tokens, pos)
    pos += 1

    if pos <= tokens_len and
            tokens[pos].kind == token.T_KEYWORD and
            tokens[pos].str == "failed" {
        stmt.has_failed = yes
        pos += 1
    }
        
    var v = expr.parse_expression(
        tokens, pos, msgs,
        project_file=project_file,
        is_moose64=is_moose64
    ) later:

    await v
    if v == none {
        stmt.token_len = 1
        return stmt
    }
    if v.kind != ast.N_EXPR_BINOP or
            v.optoken.kind != token.T_ENCLOSE or
            v.optoken.str != "(" {
        if not v.damaged {
            msgs.add(new msg.FileMsg(
                "Unexpected argument expression of type " +
                ast.NodeKind.num_label(v.kind) + ", expected " +
                "a func call expression instead.",
                source_file=project_file,
                line=token.get_line(tokens, startpos),
                col=token.get_col(tokens, startpos),
            ))
        }
        stmt.damaged = yes
    }
    pos += v.token_len
    stmt.subexprs.add(v)
    stmt.token_len = (pos - startpos)
    if pos <= tokens_len and
            tokens[pos].kind == token.T_KEYWORD and
            tokens[pos].str == "later" {
        stmt.has_later = yes
        pos += 1
        if is_moose64 {
            if not stmt.damaged {
                msgs.add(new msg.FileMsg(
                    "Unexpected 'defer ... later', expected "
                    "a regular call since 'later' isn't supported.",
                    source_file=project_file,
                    line=token.get_line(tokens, startpos),
                    col=token.get_col(tokens, startpos),
                ))
            }
            stmt.damaged = yes
        }
    }
    if not is_moose64 {
        msgs.add(new msg.FileMsg(
            "Unexpected defer statement, "
            "those aren't currently supported.",
            source_file=project_file,
            line=token.get_line(tokens, startpos),
            col=token.get_col(tokens, startpos),
        ))
        stmt.damaged = yes
    }
    return later stmt
}

