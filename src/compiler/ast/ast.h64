# @module compiler.ast
# Copyright (c) 2020-2022,  ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.


import compiler.ast.import_stmt as import_stmt
import compiler.msg as msg
import compiler.token as token


type TreeNode {
    ## @type [TreeNode]
    var children = []

    ## types (TreeNode, none)
    var parent = none

    var sibling_pos = 1

    var line, col

    var token_len
}

type ASTResult {
    ## @type [TreeNode]
    var nodes = []

    ## @type [msg.FileMsg]
    var msgs = []

    ## @types (project.ProjectFile, none)
    var project_file
}

var parse_funcs = [
    import_stmt.parse
]

func parse_statement(
        tokens, pos, msgs, project_file=none
        ) {
    var remaining_funcs = parse_funcs.copy()

    var next_func = remaining_funcs.pop()
    var stmt = next_func(tokens, pos, msgs, project_file=project_file)
    later:

    await stmt
    if stmt != none {
        return stmt
    }
    if remaining_funcs.len == 0 {
        var line = tokens[pos].line
        var col = tokens[pos].col
        msgs.add(new msg.FileMsg(
            "Unexpected token " +
            token.describe_token(tokens[pos]) +
            ", expected start of any recognized statement.",
            kind=msg.M_ERROR, source_file=project_file,
            line=line, col=col)
        )
        return none
    }

    next_func = remaining_funcs.pop()
    stmt = next_func(
        tokens, pos, msgs, project_file=project_file
    ) later repeat
}

func parse_to_ast(
        tokens, project_file=none
        ) {
    var result = new ASTResult()
    result.project_file = project_file

    if tokens.len == 0 {
        return result
    }
    var pos = 1
    var stmt = parse_statement(
        tokens, pos, result.msgs,
        project_file=project_file
    ) later:

    await stmt
    if stmt == none {
        # We completely failed to parse the next statement.
        # Skip to the next one:
        var skiplen = token.get_naive_statement_len(
            tokens, pos
        )
        pos += skiplen
        if pos > tokens.len {
            # We reached the end!
            return result
        }
        # Continue trying to find next statement below.
    } else {
        # Extracted a new statement.
        result.nodes.add(stmt)
        pos += stmt.tokens_len
    }

    if pos > tokens.len {
        # We reached the end!
        return result
    }
    stmt = parse_statement(
        tokens, pos, result.msgs,
        project_file=project_file
    ) later repeat
}

