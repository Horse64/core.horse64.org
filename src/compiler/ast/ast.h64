## @module compiler.ast
# Copyright (c) 2020-2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import debugger from core.horse64.org
import json from core.horse64.org
import time from core.horse64.org
import uri from core.horse64.org

import compiler.ast.await_stmt as await_stmt
import compiler.ast.break_stmt as break_stmt
import compiler.ast.c_import_stmt as c_import_stmt
import compiler.ast.call_or_assign_stmt as call_or_assign_stmt
import compiler.ast.continue_stmt as continue_stmt
import compiler.ast.defer_stmt as defer_stmt
import compiler.ast.do_stmt as do_stmt
import compiler.ast.enum_stmt as enum_stmt
import compiler.ast.for_stmt as for_stmt
import compiler.ast.func_stmt as func_stmt
import compiler.ast.if_stmt as if_stmt
import compiler.ast.import_stmt as import_stmt
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.ast.return_stmt as return_stmt
import compiler.ast.struct_or_union_stmt as struct_or_union_stmt
import compiler.ast.throw_stmt as throw_stmt
import compiler.ast.type_stmt as type_stmt
import compiler.ast.var_stmt as var_stmt
import compiler.ast.while_stmt as while_stmt
import compiler.ast.with_stmt as with_stmt
import compiler.msg as msg
import compiler.project as project
import compiler.storage.scope.global_scope as global_scope
import compiler.token as token

type TreeNode {
    var kind

    var sibling_pos = 1

    ## @types (TreeNode, none)
    #var parent = none

    ## @type [TreeNode]
    var subexprs = []

    ## @type [TreeNode]
    var subblocks = []

    ## @attr damaged
    ## Whether this tree node had some sort of parse error inside,
    ## meaning that more parse errors relating to it might just be
    ## useless indirect follow-up errors.
    ## @type bool
    var damaged = no

    var line, col

    var token_len
}

func TreeNode.as_str {
    return "TreeNode" + json.dump(self.as_json_obj())
}

func TreeNode.copy {
    var self_copy = base.copy()
    assert(debugger.get_addr(self_copy) != debugger.get_addr(self))
    self_copy.subexprs = []
    for expr in self.subexprs {
        self_copy.subexprs.add(expr.copy())
    }
    self_copy.subblocks = []
    for stmt in self.subblocks {
        self_copy.subblocks.add(stmt.copy())
    }
    return self_copy
}

func TreeNode.has_damage {
    if self.damaged {
        return yes
    }
    for subexpr in self.subexprs {
        if subexpr == none {
            continue
        }
        if subexpr.has_damage() {
            return yes
        }
    }
    return no
}

func TreeNode.as_code(indent=0) {
    var t = ""
    var code_lines = json.dump(self.as_json_obj()).splitlines()
    var is_first = yes
    for code_line in code_lines {
        if is_first {
            is_first = no
        } else {
            t += "\n"
        }
        t += " ".rep(indent) +
            "# (unimplemented as_code func) " + code_line
    }
    return t
}

func TreeNode.as_json_obj {
    var output = {
        "kind"-> NodeKind.num_label(self.kind),
        "line"-> self.line,
        "col"-> self.col,
        "token_len"-> self.token_len,
    }
    if self.subexprs.len > 0 {
        output["subexprs"] = []
        for subexpr in self.subexprs {
            if subexpr == none {
                output["subexprs"].add(none)
                continue
            }
            output["subexprs"].add(subexpr.as_json_obj())
        }
    }
    if self.subblocks.len > 0 {
        output["subblocks"] = []
        for subblock in self.subblocks {
            var block_statements = []
            for statement in subblock {
                block_statements.add(statement.as_json_obj())
            }
            output["subblocks"].add(block_statements)
        }
    }
    return output
}

func TreeNode.is_stmt {
    return no
}

func get_node_parent_block(node, parent) {
    if parent == none {
        return none
    }
    var search_blocks = []
    if parent.kind == N_STMT_IF or
            parent.kind == N_STMT_DO {
        for clause in parent.subexprs {
            if not {N_EXPR_IFELSECLAUSE,
                    N_EXPR_RESCUECLAUSE,
                    N_EXPR_FINALLYCLAUSE
                    }.has(clause.kind) {
                continue
            }
            search_blocks += clause.subblocks
        }
    }
    search_blocks += parent.subblocks
    for block in search_blocks {
        var idx = block.find(node)
        if idx == none {
            continue
        }
        return block
    }
    return none
}

func get_neighbor_statements_after(
        node, parent, stop_at_return=yes
        ) {
    if {N_STMT_DO, N_STMT_IF}.has(parent.kind) {
        for clause in parent.subexprs {
            assert(clause.subblocks.len == 1)
            var block = clause.subblocks[1]
            var pos = block.find(node)
            if pos != none {
                var result = []
                pos += 1
                while pos <= block.len {
                    result.add(block[pos].copy())
                    if stop_at_return and
                            block[pos].kind == N_STMT_RETURN {
                        break
                    }
                    pos += 1
                }
                return result
            }
        }
    }
    for block in parent.subblocks {
        var pos = block.find(node)
        if pos != none {
            var result = []
            pos += 1
            while pos <= block.len {
                result.add(block[pos].copy())
                if stop_at_return and
                        block[pos].kind == N_STMT_RETURN {
                    break
                }
                pos += 1
            }
            return result
        }
    }
    return []
}

type StmtNode base TreeNode {
}

func StmtNode.is_stmt {
    return yes
}

enum NodeKind {
    N_EXPR_ARGNAME,
    N_EXPR_BINOP,
    N_EXPR_CALLKWARG,
    N_EXPR_CALLARGS,
    N_EXPR_CONTAINER,
    N_EXPR_INVALID,
    N_EXPR_LIT,
    N_EXPR_UNOP,
    N_EXPR_IDREF,
    N_EXPR_BASEREF,
    N_EXPR_INLINEIF,
    N_EXPR_IFELSECLAUSE,
    N_EXPR_RESCUECLAUSE,
    N_EXPR_FINALLYCLAUSE,
    N_EXPR_TYPEREF,
    N_STMT_AWAIT,
    N_STMT_THROW,
    N_STMT_TYPE,
    N_STMT_TYPEEXTEND,
    N_STMT_ENUM,
    N_STMT_ENUMEXTEND,
    N_STMT_FOR,
    N_STMT_WHILE,
    N_STMT_WITH,
    N_STMT_DO,
    N_STMT_FUNC,
    N_STMT_FUNCEXTEND,
    N_STMT_CALL,
    N_STMT_ASSIGN,
    N_STMT_VAR,
    N_STMT_BREAK,
    N_STMT_CONTINUE,
    N_STMT_C_IMPORT,
    N_STMT_IMPORT,
    N_STMT_RETURN,
    N_STMT_IF,
    N_STMT_INVALID,
    N_STMT_STRUCT,
    N_STMT_STRUCTEXTEND,
    N_STMT_UNION,
    N_STMT_DEFER,
}

type ASTResult {
    ## @type [TreeNode]
    var stmts = []

    ## @type [msg.FileMsg]
    var msgs = []

    ## @types (project.ProjectFile, none)
    var project_file

    ## @type global_scope.GlobalScope
    var global_scope = new global_scope.GlobalScope()

    ## @type num
    var token_len
}

func ASTResult.dump_as_code {
    var t = ""
    for stmt in self.stmts {
        t += stmt.as_code() + "\n"
    }
    return t
}

func ASTResult.as_json_obj {
    var output = {
        "messages"-> [],
        "stmts"-> [],
    }
    for m in self.msgs {
        var mjson = {
            "message"-> m.message,
            "kind"-> msg.MsgKind.num_label(m.kind),
            "line"-> m.line,
            "col"-> m.col,
            "file"-> none,
        }
        if m.source_file != none {
            mjson["file"] = m.source_file.source_uri
        }
        output["messages"].add(mjson)
    }
    for node in self.stmts {
        output["stmts"].append(node.as_json_obj())
    }
    return output
}

var stmt_parse_funcs = [
    call_or_assign_stmt.parse,
    enum_stmt.parse,
    type_stmt.parse,
    throw_stmt.parse,
    do_stmt.parse,
    await_stmt.parse,
    with_stmt.parse,
    while_stmt.parse,
    for_stmt.parse,
    if_stmt.parse,
    func_stmt.parse,
    c_import_stmt.parse,
    import_stmt.parse,
    return_stmt.parse,
    var_stmt.parse,
    break_stmt.parse,
    continue_stmt.parse,
    struct_or_union_stmt.parse,
    defer_stmt.parse,
]

func parse_statement(
        tokens, pos, msgs, project_file=none,
        prev_stmt_was_broken=no, is_moose64=no,
        debug=no,
        ) {
    var remaining_funcs = stmt_parse_funcs.copy()
    if debug {
        print("compiler.ast.expr: parse_statement() " +
            "with pos=" + pos.as_str() +
            ",is_moose64=" + is_moose64.as_str())
    }

    var next_func = remaining_funcs.pop()
    var stmt = next_func(tokens, pos, msgs, is_moose64=is_moose64,
        project_file=project_file, debug=debug)
    later:

    await stmt
    if stmt != none {
        return stmt
    }
    if remaining_funcs.len == 0 {
        var line = tokens[pos].line
        var col = tokens[pos].col
        if not prev_stmt_was_broken {
            msgs.add(new msg.FileMsg(
                "Unexpected token " +
                token.describe_token(tokens[pos]) +
                ", expected start of any recognized statement.",
                kind=msg.M_ERROR, source_file=project_file,
                line=line, col=col)
            )
        }
        return none
    }

    next_func = remaining_funcs.pop()
    stmt = next_func(
        tokens, pos, msgs, project_file=project_file,
        is_moose64=is_moose64,
        debug=debug
    ) later repeat
}

func is_statement_allowed_as_toplevel(
        stmt, is_moose64=no
        ) {
    if {N_STMT_IMPORT, N_STMT_VAR,
            N_STMT_FUNC, N_STMT_ENUM
            }.has(stmt.kind) {
        return yes
    }
    if is_moose64 {
        if {N_STMT_C_IMPORT}.has(stmt.kind) {
            return yes
        }
        if stmt.kind == N_STMT_STRUCT and
                stmt.label != none {
            return yes
        }
    } else {
        if {N_STMT_TYPE}.has(stmt.kind) {
            return yes
        }
    }
    return no
}

func parse_to_ast_ex(
        tokens, pos, project_file=none,
        allow_only_toplevel=yes,
        is_inside_block=no, is_moose64=no,
        debug=no
        ) {
    var result = new ASTResult()
    const startpos = pos
    result.project_file = project_file

    # See if we're already at the end of statements:
    if pos > tokens.len or
            (is_inside_block and (
             (pos <= tokens.len and
              tokens[pos].kind == token.T_ENCLOSE and
              tokens[pos].str == "}") or
             token.surely_to_toplevel_even_in_bad_code(tokens, pos))) {
        result.token_len = 0
        return result
    }

    # Get next statement:
    var stmt = parse_statement(
        tokens, pos, result.msgs, project_file=project_file,
        prev_stmt_was_broken=(result.stmts.len > 0 and
            result.stmts[result.stmts.len].has_damage()),
        is_moose64=is_moose64, debug=debug
    ) later:

    await stmt
    func process_statement(stmt) {
        if stmt == none {
            # We completely failed to parse the next statement.
            # Skip to the next one:
            var skiplen = token.get_naive_stmt_or_expr_len(
                tokens, pos, for_expr=no, is_moose64=is_moose64
            )
            assert(skiplen > 0)
            var invalid_st = new invalid_stmt.InvalidStmt(skiplen)
            invalid_st.line = token.get_line(tokens, pos)
            invalid_st.col = token.get_col(tokens, pos)
            result.stmts.add(invalid_st)
            pos += skiplen
            return later
        }
        # Extracted a new statement.
        result.stmts.add(stmt)
        if allow_only_toplevel and
                not is_statement_allowed_as_toplevel(
                    stmt, is_moose64=is_moose64
                ) {
            stmt.damaged = yes
            result.msgs.add(new msg.FileMsg(
                "Unexpected " +
                NodeKind.num_label(stmt.kind) + " statement, "
                "expected a top-level statement instead.",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
        }
        pos += stmt.token_len
        if is_inside_block {
            return later
        }

        global_scope.process_toplevel_stmt(
            result.global_scope, stmt, result.msgs,
            project_file=project_file,
            is_moose64=is_moose64, debug=debug
        ) later:
    }
    process_statement(stmt) later:

    if pos > tokens.len or
            (is_inside_block and (
             (pos <= tokens.len and
              tokens[pos].kind == token.T_ENCLOSE and
              tokens[pos].str == "}") or
             token.surely_to_toplevel_even_in_bad_code(tokens, pos))) {
        # We reached the end!
        result.token_len = pos - startpos
        return result
    }
    stmt = parse_statement(
        tokens, pos, result.msgs, project_file=project_file,
        prev_stmt_was_broken=(result.stmts.len > 0 and
            result.stmts[result.stmts.len].has_damage()),
        is_moose64=is_moose64, debug=debug
    ) later repeat
}

func parse_to_ast(
        tokens, project_file=none, is_moose64=no,
        debug=no
        ) {
    var contents = parse_to_ast_ex(
        tokens, 1, project_file=project_file,
        is_inside_block=no,
        is_moose64=is_moose64,
        debug=debug
    ) later:

    await contents
    return contents
}

func _tokenize_code_line_for_ast(
        source, project_file=none, build_options=none,
        is_entrypoint=yes, force_single_file=no,
        allow_disk_access=yes, allow_vfs_access=no,
        require_detect_project_dir=yes,
        debug_modules=no,
        debug_global_storage=no
        ) {
    if not force_single_file and is_entrypoint {
        throw new ValueError("Not setting force_single_file "
            "to yes for inline code makes no sense.")
    }
    if not is_entrypoint {
        throw new NotImplementedError(
            "Parsing inline code that isn't the entrypoint "
            "is currently unsupported."
        )
    }
    if build_options != none and build_options.is_moose64 {
        throw new ValueError("Cannot process inline code "
            "for Moose64.")
    }
    var tresult = token.tokenize_str(
        source, project_file=project_file,
        is_moose64=no, keep_whitespace=no
    )
    if tresult.project_file == none {
        # This is usually the case for direct inline code,
        # but we need one to do the import handling.
        tresult.project_file = new project.ProjectFile(
            source_uri=none, is_entrypoint=is_entrypoint,
            force_single_file=force_single_file,
            is_moose64=no,
            request_debug_modules=debug_modules,
            request_debug_global_storage=debug_global_storage,
        )
    }
    func ensure_project_if_needed {
        if not require_detect_project_dir {
            return later
        }
        tresult.project_file.ensure_project(msgs=tresult.msgs) later:
        return later
    }
    ensure_project_if_needed() later:
    tresult.project_file.project.allow_disk_access = (
        allow_disk_access
    )
    tresult.project_file.project.allow_vfs_access = (
        allow_vfs_access
    )
    return tresult
}

func _tokenize_this_file_for_ast(
        source, project_file=none, source_is_uri=no,
        is_entrypoint=yes, force_single_file=no,
        allow_disk_access=yes, allow_vfs_access=no,
        require_detect_project_dir=yes,
        build_options=none,
        debug_modules=no, debug_global_storage=no,
        ) {
    if not source_is_uri {
        if build_options != none and build_options.is_moose64 {
            throw new ValueError(
                "Cannot use moose64 mode for inline code."
            )
        }
        var result = _tokenize_code_line_for_ast(
            source, project_file=project_file,
            is_entrypoint=is_entrypoint,
            force_single_file=force_single_file,
            allow_disk_access=allow_disk_access,
            allow_vfs_access=allow_vfs_access,
            require_detect_project_dir=
                require_detect_project_dir,
            build_options=build_options,
            debug_modules=debug_modules,
            debug_global_storage=debug_global_storage,
        ) later:
        await result
        return result
    }
    var tresult = token.tokenize_from_uri(
        source, project_file=project_file,
        is_entrypoint=is_entrypoint,
        force_single_file=force_single_file,
        allow_disk_access=allow_disk_access,
        allow_vfs_access=allow_vfs_access,
        keep_whitespace=no,
        require_detect_project_dir=
            require_detect_project_dir,
        is_moose64=(build_options != none and
            build_options.is_moose64),
        debug_modules=debug_modules,
        debug_global_storage=debug_global_storage
    ) later:

    await tresult
    return tresult
}

func _parse_tokens_file_to_ast_ex(
        tokens_source, project_file=none,
        source_is_uri=no,
        is_entrypoint=yes, force_single_file=no,
        allow_disk_access=yes, allow_vfs_access=no,
        allow_only_toplevel=yes,
        require_detect_project_dir=yes,
        print_stages_file_caption="entry point file",
        build_options=none,
        debug=no, debug_modules=no,
        debug_global_storage=no
        ) {
    if build_options != none and
            build_options.print_stages {
        print(build_options.build_program_name +
            ": info: stage tokens: "
            "Now tokenizing " + print_stages_file_caption + "... "
            "[t=" + time.ticks().as_str() + "]")
    }
    var tresult = _tokenize_this_file_for_ast(
        tokens_source, project_file=project_file,
        source_is_uri=source_is_uri,
        allow_disk_access=allow_disk_access,
        allow_vfs_access=allow_vfs_access,
        is_entrypoint=is_entrypoint,
        force_single_file=force_single_file,
        require_detect_project_dir=
            require_detect_project_dir,
        build_options=build_options,
        debug_modules=debug_modules,
        debug_global_storage=debug_global_storage,
    )
    later:

    await tresult
    if build_options != none and
            build_options.print_stages {
        print(build_options.build_program_name +
            ": info: stage ast: "
            "Now parsing " + print_stages_file_caption + "... "
            "[t=" + time.ticks().as_str() + "]")
    }
    var aresult = parse_to_ast_ex(
        tresult.tokens, 1,
        project_file=tresult.project_file,
        allow_only_toplevel=allow_only_toplevel,
        is_moose64=(build_options != none and
            build_options.is_moose64),
        debug=debug
    ) later:

    await aresult
    if build_options != none and
            build_options.print_stages {
        print(build_options.build_program_name +
            ": info: stage ast: "
            "Parsed " + print_stages_file_caption +
            " fully now. "
            "[t=" + time.ticks().as_str() + "]")
    }
    if tresult.project_file != none {
        aresult.project_file = tresult.project_file
    }
    aresult.msgs = tresult.msgs + aresult.msgs
    return aresult
}

## @func parse_str_to_ast
## Parse the given code string to an @{Abstract Syntax
## Tree result|ASTResult}.
##
## @param codestr str The code @{str} containing Horse64 code.
## @param project_file (none, project.ProjectFile) If the string
##   originates from a known @{project file|project.ProjectFile},
##   specify it here to be set in the resulting diagnostic messages.
## @returns ASTResult The resulting syntax tree and diagnostic messages,
##   like parse errors or warnings.
func parse_str_to_ast(
        codestr, project_file=none,
        is_entrypoint=yes,
        allow_disk_access=yes, allow_vfs_access=no,
        require_detect_project_dir=yes,
        allow_only_toplevel=yes,
        build_options=none,
        print_stages_file_caption="entry point file",
        debug=no, debug_modules=no,
        debug_global_storage=no,
        ) {
    var result = _parse_tokens_file_to_ast_ex(
        codestr, project_file=project_file, source_is_uri=no,
        force_single_file=yes,  # Inline code is always single-file.
        allow_disk_access=allow_disk_access,
        allow_vfs_access=allow_vfs_access,
        is_entrypoint=is_entrypoint, debug=debug,
        allow_only_toplevel=allow_only_toplevel,
        require_detect_project_dir=
            require_detect_project_dir,
        build_options=build_options,
        print_stages_file_caption=print_stages_file_caption,
        debug_modules=debug_modules,
        debug_global_storage=debug_global_storage,
    ) later:

    await result
    return result
}

## @func parse_to_ast_from_uri
## Parse the file referenced to by the URI to an @{Abstract Syntax
## Tree result|ASTResult}.
##
## @param fileuri str The URI of the target file.
## @param project_file (none, project.ProjectFile) If the string
##   originates from a known @{project file|project.ProjectFile},
##   specify it here to be set in the resulting diagnostic messages.
## @param default_to_diskpath bool If set to @{no} (default), a string
##   that isn't clearly an URI like `"example.com:443"` will be smartly
##   guessed as either remote or disk path and converted to a full URI.
##   If set to @{yes}, anything not clearly an URI will always be
##   considered a disk path and converted to a `file://` URI.
## @returns ASTResult The resulting syntax tree and diagnostic messages,
##   like parse errors or warnings.
func parse_to_ast_from_uri(
        fileuri, project_file=none, default_to_diskpath=no,
        is_entrypoint=yes, force_single_file=no,
        allow_disk_access=yes, allow_vfs_access=no,
        require_detect_project_dir=no,
        build_options=none,
        print_stages_file_caption="entry point file",
        debug=no, debug_modules=no,
        debug_global_storage=no,
        ) {
    var result = _parse_tokens_file_to_ast_ex(
        uri.normalize(fileuri,
        guess_nonfiles=(not default_to_diskpath)),
        project_file=project_file,
        source_is_uri=yes, is_entrypoint=is_entrypoint,
        force_single_file=force_single_file,
        allow_disk_access=allow_disk_access,
        allow_vfs_access=allow_vfs_access,
        require_detect_project_dir=
            require_detect_project_dir,
        build_options=build_options,
        print_stages_file_caption=print_stages_file_caption,
        debug=debug, debug_modules=debug_modules,
        debug_global_storage=debug_global_storage,
    ) later:

    await result
    return result
}

