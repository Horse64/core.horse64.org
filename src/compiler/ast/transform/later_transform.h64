# @module compiler.ast.transform.later_transform
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as cast
import compiler.ast.analyze as ast_analyze
import compiler.ast.transform as ast_transform
import compiler.ast.type_stmt as type_stmt

func first_pass_later_transform(project, msgs) {
    func transform_file(pfile) {
        func transform_node(node, parent) {
            if node.scope == none or node.scope.func_scope == none or
                    not node.scope.func_scope.is_later_func {
                return later node
            }
            if node.kind == cast.N_STMT_IF {
                var has_later = no
                for clause in node.subexprs {
                    for block in clause.subblocks {
                        var clause_has_later = ast_analyze.
                            stmt_list_contains_later_call(block)
                        if clause_has_later {
                            has_later = yes
                        }
                    }
                }
                if has_later {
                    return ast_transform.split_if_to_single_clauses(
                        pfile, node, parent)
                }
            }
            return later node
        }
        pfile.ensure_ast() later:

        var success = ast_transform.visit_ast_tree(
            pfile.ast, transform_node) later:

        await success
        assert(success == yes)
        return later success
    }
    var success = project.do_for_all_files(transform_file)
    later:

    await success
}

