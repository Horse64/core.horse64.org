# @module compiler.ast.transform
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast

type VisitQueueEntry {
    var node
    var parent
}

func VisitQueueEntry.init(node, parent) {
    self.node = node
    self.parent = parent
}

func visit_ast_tree(node, visit_cb, pass_func_boundaries=yes) {
    var seen = {}
    var visit_queue = [new VisitQueueEntry(node, none)]
    var aborted = no
    var is_first = yes
    func process_next_node {
        if visit_queue.len == 0 {
            return later no
        }
        var next = visit_queue.pop_at(1)
        if not has_attr(next.node, "kind") and
                has_attr(next.node, "stmts") {
            # Must be a root ASTResult item. Skip.
            if next.node != none and has_attr(next.node, "stmts") {
                for st in next.node.stmts {
                    visit_queue.add(new VisitQueueEntry(
                        st, next.node
                    ))
                }
            }
            return later yes
        }
        if is_first {
            is_first = no
        } elseif not pass_func_boundaries and
                next.node.kind == ast.N_STMT_FUNC {
            return later yes
        }
        var new_node = visit_cb(next.node, next.parent)
        later:

        await new_node
        if new_node == no {
            aborted = yes
            return later no
        }
        if new_node != next.node {
            if has_attr(next.parent, "subexprs") {
                pos = 1
                while pos <= next.parent.subexprs.len {
                    if next.parent.subexprs[pos] == next.node {
                        if new_node != none {
                            next.parent.subexprs[pos] = new_node
                        } else {
                            next.parent.subexprs.pop_at(pos)
                        }
                        break
                    }
                    pos += 1
                }
            }
            if has_attr(next.parent, "stmts") {
                pos = 1
                while pos <= next.parent.stmts.len {
                    if next.parent.stmts[pos] == next.node {
                        if new_node != none {
                            next.parent.stmts[pos] = new_node
                        } else {
                            next.parent.stmts.pop_at(pos)
                        }
                        break
                    }
                    pos += 1
                }
            }
            if has_attr(next.parent, "subblocks") {
                for block in next.parent.subblocks {
                    pos = 1
                    while pos <= block.len {
                        if block[pos] == next.node {
                            if new_node != none {
                                block[pos] = new_node
                            } else {
                                block.pop_at(pos)
                            }
                            break
                        }
                        pos += 1
                    }
                }
            }
        }
        if new_node != none and has_attr(new_node, "subexprs") {
            for expr in new_node.subexprs {
                if expr == none {
                    continue
                }
                visit_queue.add(new VisitQueueEntry(
                    expr, new_node
                ))
            }
        }
        if new_node != none and has_attr(new_node, "subblocks") {
            for block in new_node.subblocks {
                for st in block {
                    visit_queue.add(new VisitQueueEntry(
                        st, new_node
                    ))
                }
            }
        }
        return later yes
    }
    var resume_queue = process_next_node() later:

    await resume_queue
    if not resume_queue {
        if aborted {
            return later no
        }
        return later yes
    }
    resume_queue = process_next_node() later repeat
}

