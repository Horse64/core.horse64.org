# @module compiler.ast.transform
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import random from core.horse64.org

import compiler.ast as ast
import compiler.ast.analyze as ast_analyze
import compiler.ast.expr as ast_expr
import compiler.ast.if_stmt as if_stmt
import compiler.ast.transform.later_transform as later_transform
import compiler.ast.var_stmt as var_stmt
import compiler.storage.ref as st_ref
import compiler.token as token

type VisitQueueEntry {
    var node
    var parent
}

func VisitQueueEntry.init(node, parent) {
    self.node = node
    self.parent = parent
}

func split_if_to_single_clauses(project_file, node, parent) {
    assert(node.kind == ast.N_STMT_IF)
    if node.subexprs.len == 1 {
        return [node]
    }
    var inner_scope = node.scope
    assert(inner_scope != none)
    var result = []
    while node.subexprs.len > 1 {
        var want_split_var_node = yes
        var conditional_node = none
        var refer_to_condition_label = none
        var refer_to_storage_id = none
        var clause = node.subexprs[1]
        assert(not clause.is_else)
        assert(clause.subexprs.len == 1)
        conditional_node = clause.subexprs[1]

        if {ast.N_EXPR_IDREF,
                ast.N_EXPR_LIT}.has(conditional_node.kind) {
            want_split_var_node = no
        }

        if want_split_var_node {
            var vardef_node = new var_stmt.VarStmt()
            var new_name = "splitifcond" + random.gen_id()
            while not inner_scope.name_is_free(new_name,
                    project_file.global_scope) {
                new_name = "splitifcond" + random.gen_id()
            }
            var new_sinfo = inner_scope.add_symbol_late(
                new_name, project_file, node.line,
                node.col)
            if new_sinfo == none {
                throw new RuntimeError("Internal error.")
            }
            refer_to_condition_label = new_name
            refer_to_storage_id = new_sinfo.storage_id

            vardef_node.var_labels.add(new_name)
            vardef_node.subexprs.add(conditional_node)
            vardef_node.line = conditional_node.line
            vardef_node.col = conditional_node.col
            vardef_node.scope = inner_scope
            result.add(vardef_node)

            var idref = new ast_expr.IdRefExpr()
            idref.scope = inner_scope
            idref.label = new_name
            idref.line = conditional_node.line
            idref.col = conditional_node.col
            idref.ref = new st_ref.StorageRef(
                st_ref.ST_LOCAL, new_sinfo.storage_id
            )
            clause.subexprs[1] = idref
        }

        result.add(node)
        var new_conditional = new if_stmt.IfStmt()
        new_conditional.scope = inner_scope
        new_conditional.subexprs = node.subexprs.sub(2)
        assert(new_conditional.subexprs.len >= 1)
        node.subexprs = node.subexprs.sub(1, 1)
        var first_clause = new_conditional.subexprs[1]
        new_conditional.line = first_clause.line
        new_conditional.col = first_clause.col

        var idref = new ast_expr.IdRefExpr()
        idref.scope = inner_scope
        idref.label = refer_to_condition_label
        idref.line = new_conditional.line
        idref.col = new_conditional.col
        idref.ref = new st_ref.StorageRef(
            st_ref.ST_LOCAL, refer_to_storage_id
        )
        var t = new token.Token("not",
            token.T_KEYWORD, idref.line, idref.col)
        var negated = new ast_expr.UnopExpr(t)
        negated.scope = inner_scope
        negated.subexprs.add(idref)
        negated.col = idref.col
        negated.line = idref.line

        var pos = 1
        while pos <= new_conditional.subexprs.len {
            var clause = new_conditional.subexprs[pos]
            if clause.subexprs.len == 0 {
                assert(clause.is_else)
                assert(pos == new_conditional.subexprs.len)
                clause.is_else = no
                clause.subexprs.add(negated)
            } else {
                assert(clause.subexprs.len == 1)
                var t = new token.Token("and",
                    token.T_KEYWORD, clause.subexprs[1].line,
                    clause.subexprs[1].col)
                var binop = new ast_expr.BinopExpr(t)
                binop.scope = inner_scope
                binop.line = t.line
                binop.col = t.col
                binop.subexprs.add(negated)
                binop.subexprs.add(clause.subexprs[1])
                clause.subexprs[1] = binop
            }
            pos += 1
        }
        node = new_conditional
    }
    assert(node.subexprs.len == 1)
    result.add(node)
    return result
}

func visit_ast_tree(node, visit_cb, pass_func_boundaries=yes,
        parent_chain=no) {
    var visit_queue = [new VisitQueueEntry(
        node, if parent_chain ([]) else (none))]
    var aborted = no
    var is_first = yes
    func process_next_node {
        if visit_queue.len == 0 {
            return later no
        }
        var next = visit_queue.pop_at(1)
        if not has_attr(next.node, "kind") and
                has_attr(next.node, "stmts") {
            # Must be a root ASTResult item. Skip.
            if next.node != none and has_attr(next.node, "stmts") {
                const supply_parent = if parent_chain ([]) else (none)
                for st in next.node.stmts {
                    visit_queue.add(new VisitQueueEntry(
                        st, supply_parent
                    ))
                }
            }
            return later yes
        }
        if is_first {
            is_first = no
        } elseif not pass_func_boundaries and
                next.node.kind == ast.N_STMT_FUNC {
            return later yes
        }
        var new_node = visit_cb(next.node, next.parent)
        later:

        await new_node
        if new_node == no {
            aborted = yes
            return later no
        }
        if new_node != next.node {
            var parent = if parent_chain (next.parent[1]) else (next.parent)
            if has_attr(parent, "subexprs") {
                var pos = 1
                while pos <= parent.subexprs.len {
                    if parent.subexprs[pos] != next.node {
                        pos += 1
                        continue
                    }
                    if new_node == none {
                        parent.subexprs.pop_at(pos)
                        break
                    }
                    if typename(new_node) != "list" {
                        parent.subexprs[pos] = new_node
                        break
                    }
                    parent.stmts =
                        parent.subexprs.sub(1, pos - 1) +
                        new_node + parent.subexprs.sub(pos + 1)
                    break
                }
            }
            if has_attr(parent, "stmts") {
                var pos = 1
                while pos <= parent.stmts.len {
                    if parent.stmts[pos] != next.node {
                        pos += 1
                        continue
                    }
                    if new_node == none {
                        parent.stmts.pop_at(pos)
                        break
                    }
                    if typename(new_node) != "list" {
                        parent.stmts[pos] = new_node
                        break
                    }
                    parent.stmts =
                        parent.stmts.sub(1, pos - 1) +
                        new_node + parent.stmts.sub(pos + 1)
                    break
                }
            }
            if has_attr(parent, "subblocks") {
                var blockpos = 1
                while blockpos <= parent.subblocks.len {
                    var block = parent.subblocks[blockpos]
                    var pos = 1
                    while pos <= block.len {
                        if block[pos] != next.node {
                            pos += 1
                            continue
                        }
                        if new_node == none {
                            block.pop_at(pos)
                            break
                        }
                        if typename(new_node) != "list" {
                            block[pos] = new_node
                            break
                        }
                        var new_block = block.sub(1, pos - 1) +
                            new_node + block.sub(pos + 1)
                        parent.subblocks[blockpos] = new_block
                        break
                    }
                    blockpos += 1
                }
            }
        }
        if new_node == none {
            return later yes
        }
        # Handle queueing up the newly inserted node(s) children:
        if typename(new_node) == "list" {
            for node in new_node {
                if node == none {
                    continue
                }
                const supply_parent =
                    (if parent_chain (next.parent + [node]) else (node))
                for expr in node.subexprs {
                    if expr == none {
                        continue
                    }
                    visit_queue.add(new VisitQueueEntry(
                        expr, supply_parent
                    ))
                }
                for block in node.subblocks {
                    for expr in block {
                        if expr == none {
                            continue
                        }
                        visit_queue.add(new VisitQueueEntry(
                            expr, supply_parent
                        ))
                    }
                }
            }
            return later yes
        }
        const supply_parent =
            if parent_chain (next.parent + [new_node]) else (new_node)
        if has_attr(new_node, "subexprs") {
            for expr in new_node.subexprs {
                if expr == none {
                    continue
                }
                visit_queue.add(new VisitQueueEntry(
                    expr, supply_parent
                ))
            }
        }
        if has_attr(new_node, "subblocks") {
            for block in new_node.subblocks {
                for st in block {
                    visit_queue.add(new VisitQueueEntry(
                        st, supply_parent
                    ))
                }
            }
        }
        return later yes
    }
    var resume_queue = process_next_node() later:

    await resume_queue
    if not resume_queue {
        if aborted {
            return later no
        }
        return later yes
    }
    resume_queue = process_next_node() later repeat
}

func do_simply_on_all_exprs(stmt, callback) {
    var queue = []
    for expr in stmt.subexprs {
        queue.add([[stmt], expr])
    }
    while queue.len > 0 {
        var entry = queue.pop()
        var parents = entry[1]
        var parent = parents[1]
        var expr = entry[2]
        var result_expr = none
        if expr != none {
            result_expr = callback(expr, parents)
        }
        if result_expr != expr {
            var i = 1
            while i <= parent.subexprs.len {
                if parent.subexprs[i] == expr {
                    if result_expr == none {
                        parent.subexprs.pop(i)
                    } else {
                        parent.subexprs[i] = result_expr
                    }
                    break
                }
                i += 1
            }
        }
        if result_expr != none and
                result_expr.subexprs.len > 0 {
            var new_parents = parents + [result_expr]
            for subexpr in result_expr.subexprs {
                queue.add([new_parents, subexpr])
            }
        }
    }
}

func do_all_transformations(project, msgs, optimize=yes) {
    var success = ast_analyze.do_advanced_check_and_analysis(
        project, msgs) later:

    await success
    if not success {
        return later none
    }
    success = later_transform.first_pass_later_transform(project, msgs)
    later:

    await success
    return later success
}

