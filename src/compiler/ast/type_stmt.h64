# @module compiler.ast.type_stmt
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org

import compiler.ast as ast
import compiler.ast.block as block
import compiler.ast.expr as expr
import compiler.ast.invalid_stmt as invalid_stmt
import compiler.msg as msg
import compiler.token as token

type TypeStmt base ast.StmtNode {
    var label
}

func TypeStmt.init {
    base.init()
    self.kind = ast.N_STMT_TYPE
}

func TypeStmt.as_json_obj {
    var output = base.as_json_obj()
    output["label"] = self.label
    return output
}

func TypeStmt.as_code(indent=0) {
    if self.damaged {
        return " ".rep(indent) + "(damaged type)"
    }
    var t = " ".rep(indent) + "type " + self.label
    if self.subexprs.len > 0 {
        t += " " + self.subexprs[1].as_code(indent=indent)
    }
    t += self.label + " {"
    for stmt in self.subblocks[1] {
        t += stmt.as_code(indent=(indent + 4)) + "\n"
    }
    t += " ".rep(indent) + "}"
    return t
}

type TypeExtendStmt base ast.StmtNode {
}

func TypeExtendStmt.init {
    base.init()
    self.kind = ast.N_STMT_TYPEEXTEND
}

func TypeExtendStmt.as_json_obj {
    var output = base.as_json_obj()
    return output
}

func TypeExtendStmt.as_code(indent=0) {
    if self.damaged {
        return " ".rep(indent) + "(damaged type extend)"
    }
    var t = " ".rep(indent) + "extend " +
        self.subexprs[1].as_code(indent=indent) + " {"
    for stmt in self.subblocks[1] {
        t += stmt.as_code(indent=(indent + 4)) + "\n"
    }
    t += " ".rep(indent) + "}"
    return t
}

enum ExtendType {
    EXTEND_NONE,
    EXTEND_TYPE,
    EXTEND_ENUM,
    EXTEND_INVALID,
}

func get_extend_variant(
        tokens, tokens_len, pos, msgs,
        had_damage=no, project_file=none) {
    const startpos = pos
    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            tokens[pos].str != "extend" {
        return EXTEND_NONE
    }
    pos += 1

    # Check if this is an enum or type extend.
    var had_block_bracket = no
    var i = pos
    while i <= tokens_len and
            not token.surely_to_toplevel_even_in_bad_code(
                tokens, i
            ) and
            (not token.surely_starts_stmt_even_in_bad_code(
                tokens, i
            ) or had_block_bracket) {
        if tokens[i].kind == token.T_ENCLOSE and
                tokens[i].str == "{" {
            had_block_bracket = yes
            i += 1
            continue
        }
        if had_block_bracket {
            if tokens[i].kind == token.T_COMMA {
                return EXTEND_ENUM
            }
            if tokens[i].kind == token.T_ASSIGN {
                return EXTEND_ENUM
            }
            if tokens[i].kind == token.T_KEYWORD and
                    {"var", "const", "func"}.has(tokens[i].str) {
                return EXTEND_TYPE
            }
            if tokens[i].kind == token.T_ENCLOSE and
                    {"{", "}"}.has(tokens[i].str) or
                    i + 1 > tokens_len {
                break
            }
        }
        i += 1
    }
    if not had_damage {
        msgs.add(new msg.FileMsg(
            "Unexpected " + token.describe_token_at(
                tokens, startpos + 1) +
            ", expected either a valid custom type "
            "attribute or enum entry for 'extend' "
            "statement starting in line " +
            token.get_line(tokens, startpos).as_str() +
            ", column " +
            token.get_col(tokens, startpos).as_str() + ".",
            source_file=project_file,
            line=token.get_line(tokens, pos),
            col=token.get_col(tokens, pos),
        ))
    }
    return EXTEND_INVALID
}

func parse_extend_or_enum_or_type_header(
        stmt, tokens, tokens_len, pos, msgs,
        must_be_type=no, must_be_enum=no,
        project_file=none, debug=no
        ) {
    var clausestartpos = pos
    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            (tokens[pos].str != "extend" and
             ((must_be_enum and tokens[pos].str != "enum") or
              (must_be_type and tokens[pos].str != "type"))) or
            not {"enum", "extend", "type"}.has(tokens[pos].str) {
        return none
    }
    var stmt_name = tokens[pos].str
    var is_type = (tokens[pos].str == "type")
    var is_enum = (tokens[pos].str == "enum")
    var is_extended = no
    if stmt_name == "extend" {
        var variant = get_extend_variant(
            tokens, tokens_len, pos, msgs, had_damage=stmt.has_damage(),
            project_file=project_file
        )
        if (must_be_type and variant != EXTEND_TYPE) or
                (must_be_enum and variant != EXTEND_ENUM) {
            return none
        } elseif variant == EXTEND_INVALID {
            stmt.damage = yes
            # Note: error message was emitted by get_extend_variant().
            var skiplen = math.max(1,
                token.skip_in_broken_stmt_to_code_block(
                    tokens, pos, bracket_depth=0
                ))
            pos += skiplen
            return (pos - clausestartpos)
        }
        is_extended = yes
        if (variant == EXTEND_TYPE) {
            is_type = yes
        } else {
            assert(variant == EXTEND_ENUM)
            is_enum = yes
        }
    }
    pos += 1

    if pos > tokens_len or
            tokens[pos].kind != token.T_IDENT {
        if not stmt.has_damage() {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens,
                    pos) +
                ", expected valid expression for " + stmt_name + " "
                "statement starting in line " +
                token.get_line(tokens, clausestartpos).as_str() +
                ", column " +
                token.get_col(tokens, clausestartpos).as_str() + ".",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
        }
        stmt.damaged = yes
        var skiplen = math.max(1,
            token.skip_in_broken_stmt_to_code_block(
                tokens, pos, bracket_depth=0
            ))
        pos += skiplen
        return (pos - clausestartpos)    
    }
    var extend_type_name = tokens[pos].str
    var extend_type_path = none
    pos += 1

    if is_extended {
        # Extract components of type prefix, if any:
        var extend_type_path = none
        while pos + 1 <= tokens_len and
                tokens[pos].kind == token.T_DOT and
                tokens[pos + 1].kind == token.T_IDENT {
            if extend_type_path == none {
                extend_type_path = []
            }
            extend_type_path.add(extend_type_name)
            extend_type_name = tokens[pos + 1].str
            pos += 2
        }
        var iexp = new expr.IdRefExpr()
        iexp.label = extend_type_name
        iexp.type_path = extend_type_path
        stmt.subexprs.add(iexp)
    } else {
        stmt.label = extend_type_name
    }

    if is_type and pos <= tokens_len and
            tokens[pos].kind == token.T_KEYWORD and
            tokens[pos].str == "base" {
        pos += 1
        var basecount = 0
        while yes {
            if (pos > tokens_len or
                    tokens[pos].kind != token.T_IDENT) and
                    basecount <= 0 {
                if not stmt.has_damage() {
                    msgs.add(new msg.FileMsg(
                        "Unexpected " + token.describe_token_at(
                            tokens,  pos) +
                        ", expected T_IDENT for base class for " +
                        stmt_name + " "
                        "statement starting in line " +
                        token.get_line(tokens,
                            clausestartpos).as_str() +
                        ", column " +
                        token.get_col(tokens,
                            clausestartpos).as_str() + ".",
                        source_file=project_file,
                        line=token.get_line(tokens, pos),
                        col=token.get_col(tokens, pos),
                    ))
                }
                stmt.damaged = yes
                break
            }
            var base_type_name = tokens[pos].str
            var base_type_path = none
            basecount += 1
            pos += 1

            var base_type_path = none
            while pos + 1 <= tokens_len and
                    tokens[pos].kind == token.T_DOT and
                    tokens[pos + 1].kind == token.T_IDENT {
                if base_type_path == none {
                    base_type_path = []
                }
                base_type_path.add(base_type_name)
                base_type_name = tokens[pos + 1].str
                pos += 2
            }
            var iexp = new expr.IdRefExpr()
            iexp.label = base_type_name
            iexp.type_path = base_type_path
            stmt.subexprs.add(iexp)

            if pos <= tokens_len and
                    tokens[pos].kind == token.T_COMMA {
                pos += 1
            } else {
                break
            }
        }
    }
    if pos <= tokens_len and (
            tokens[pos].kind != token.T_ENCLOSE or
            tokens[pos].str != "{") {
        if not stmt.has_damage() {
            msgs.add(new msg.FileMsg(
                "Unexpected " + token.describe_token_at(tokens,
                    pos) +
                ", expected '{' for code block "
                "for " + stmt_name + " statement starting in line " +
                token.get_line(tokens,
                    clausestartpos).as_str() +
                ", column " +
                token.get_col(tokens,
                    clausestartpos).as_str() + ".",
                source_file=project_file,
                line=token.get_line(tokens, pos),
                col=token.get_col(tokens, pos),
            ))
        }
        stmt.damaged = yes
        var skiplen = math.max(1,
            token.skip_in_broken_stmt_to_code_block(
                tokens, pos, bracket_depth=0
            ))
        pos += skiplen
    }
    return (pos - clausestartpos)
}

func parse(tokens, pos, msgs, project_file=none, debug=no) {
    var tokens_len = tokens.len
    var startpos = pos
    if pos > tokens_len or
            tokens[pos].kind != token.T_KEYWORD or
            not {"type", "extend"}.has(tokens[pos].str) {
        return later none
    }

    var stmt = if tokens[pos].str == "type" (new TypeStmt())
        else (new TypeExtendStmt())
    var stmt_name = tokens[pos].str
    var headerlen = parse_extend_or_enum_or_type_header(
        stmt, tokens, tokens_len, pos, msgs,
        must_be_type=yes, must_be_enum=no,
        project_file=project_file, debug=debug
    )
    if headerlen == none {
        return later none
    }
    stmt.line = token.get_line(tokens, startpos)
    stmt.col = token.get_col(tokens, startpos)
    pos += headerlen

    # Parse inner code block:
    var block_result = block.parse(
        tokens, pos, msgs, project_file=project_file,
        debug=debug, had_damage=stmt.has_damage(),
        block_purpose_name="for the " + stmt_name + " "
            "statement starting in "
            "line " + token.get_line(tokens, startpos).as_str() +
            ", column " + token.get_col(tokens, startpos).as_str()
    ) later:

    await block_result
    if block_result.has_damage() {
        stmt.damaged = yes
    }
    pos += block_result.token_len
    stmt.subblocks.add(block_result.stmts)
    stmt.token_len = (pos - startpos)
    return later stmt
}

