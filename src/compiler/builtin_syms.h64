## @module compiler.builtin_syms
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.ast as ast
import compiler.moose64.builtins as m64_builtins
import compiler.moose64.c_importer as c_importer
import compiler.project as project
import compiler.storage.ref as st_ref
import textfmt

type BuiltinSymsStorageItem {
    var package_name = none
    var module_path = []
    var symbol_name
    var symbol_storage_ref
    var is_c_builtin_type = no
    var hidden = no
}

func BuiltinSymsStorageItem.init(
        symbol_name, symbol_ref, module_path,
        package_name=none
        ) {
    self.symbol_name = symbol_name
    self.symbol_storage_ref = symbol_ref.copy()
    self.module_path = module_path.copy()
    self.package_name = package_name
}

func BuiltinSymsStorageItem.as_str {
    var t = "BuiltinSymsStorageItem{" +
        "symbol_name=" + textfmt.as_escaped_code_string(
            self.symbol_name
        ) + "}"
    return t
}

type BuiltinSymsStorage {
    var package_to_item_list_map = {->}
    var storage_id_to_item_map = {->}
}

extend type project.Project {
    var builtin_syms_storage = none
}

func project.Project.init_builtin_syms(is_moose64=no) {
    if self.builtin_syms_storage != none {
        return
    }
    self.builtin_syms_storage = new BuiltinSymsStorage()
    if is_moose64 {
        m64_builtins.register_builtins_with_project(self)
        later:

        return later
    }
    return later
}

func get_m64_c_type_builtin_ref_by_name(
        project, name, create_if_missing=no
        ) {
    var item = get_m64_item_by_name(
        project, name, create_if_missing=create_if_missing,
        must_be_c_type=yes,
        in_module_name=none, in_package_name=none
    )
    if item != none {
        return item.symbol_storage_ref.copy()
    }
    return none
}

func is_ast_node_referring_to_m64_std_as_ref(
        project_file, node, is_moose64=no) {
    if not is_moose64 {
        return no
    }
    var as_ref_info =
        get_m64_item_by_name(
            project_file.project, "as_ref",
            in_module_name="std")
    var as_ref_storage_ref =
        as_ref_info.symbol_storage_ref
    if node.kind == ast.N_EXPR_IDREF and
            node.label == "as_ref" and
            node.ref != none and
            node.ref.kind == st_ref.ST_MCREF and
            node.ref.alike(
                as_ref_storage_ref
            ) {
        return yes
    }
    return no
}

func get_m64_item_by_name(
        project, name, create_if_missing=no,
        must_be_c_type=no,
        in_module_name=none, in_package_name=none
        ) {
    var st = project.builtin_syms_storage
    if in_package_name != none and in_package_name.has("$") {
        throw new RuntimeError("Invalid package name given.")
    }
    if in_module_name != none and typename(in_module_name) == "list" {
        in_module_name = ".".join(in_module_name)
    }
    if in_module_name != none and in_module_name.has("$") {
        throw new RuntimeError("Invalid module name given.")
    }
    if in_module_name != none and
            in_package_name == none {
        in_package_name = "m64.horse64.org"
    }
    if in_package_name == none {
        in_package_name = "$any"
    }
    if in_module_name == none {
        in_module_name = "$any"
    }

    var item = none
    if st.package_to_item_list_map.has(in_package_name) {
        for inner_item in st.package_to_item_list_map[in_package_name] {
            if inner_item.symbol_name == name {
                if (in_module_name == "$any" and
                        (inner_item.module_path != none and
                         inner_item.module_path.join(".") ==
                            "$any")) or
                        (in_module_name != "$any" and
                         inner_item.module_path != none and
                         inner_item.module_path.len > 0 and
                         ".".join(inner_item.module_path) ==
                            in_module_name) {
                    item = inner_item
                    break
                }
            }
        }
    }
    if item != none or not create_if_missing {
        if item != none and must_be_c_type and
                not item.is_c_builtin_type {
            item = none
        }
        if item == none {
            return none
        }
        return item
    }
    var new_id = c_importer.get_mcref_id(project)
    var ref = new st_ref.StorageRef(st_ref.ST_MCREF, new_id)

    var st_item = register_symbol(
        project, name, ref, if in_module_name != "$any"
            (in_module_name) else (none),
        package_name=if in_package_name != "$any"
            (in_package_name) else (none),
        is_hidden=(in_package_name == "$any" and must_be_c_type),
        _return_internal_item_instead_of_ref=yes
    )
    if st_item != none {
        if must_be_c_type {
            st_item.is_c_builtin_type = yes
        }
        return st_item
    }
    return none
}

func get_m64_c_type_builtin_by_id(project, storage_id) {
    assert(typename(storage_id) == "num")
    var st = project.builtin_syms_storage

    if not st.storage_id_to_item_map.has(storage_id) {
        return none
    }
    var st_item = st.storage_id_to_item_map[storage_id]
    if not st_item.is_c_builtin_type {
        return none
    }
    return st_item
}

func register_symbol(project, symbol_name, symbol_ref,
        module_name, package_name=none, is_hidden=no,
        _return_internal_item_instead_of_ref=no) {
    if project.builtin_syms_storage == none {
        throw new RuntimeError(
            "Internal error in compiler.builtin_syms: "
            "symbols weren't initialized. This shouldn't "
            "happen, please report this bug to the compiler "
            "team."
        )
    }
    var modpath = module_name
    if module_name == none {
        modpath = ["$any"]
    } elseif typename(modpath) == "str" {
        modpath = modpath.split(".")
    } elseif typename(modpath) == "list" {
        modpath = modpath.copy()
    } else {
        throw new TypeError("module_name must be str or list")
    }
    if modpath.join(".") == "$any" {
        assert(package_name == none or package_name == "$any")
        package_name = "$any"
    }
    var st = project.builtin_syms_storage
    if not st.package_to_item_list_map.has(package_name) {
        st.package_to_item_list_map[package_name] = []
    }

    # Check for duplicates:
    for entry in st.package_to_item_list_map[package_name] {
        if entry.module_path.len != modpath.len {
            continue
        }
        var match = yes
        var idx = 0
        for lbl in entry.module_path {
            idx += 1
            if lbl != modpath[idx] {
                match = no
            }
        }
        if not match {
            continue
        }
        if entry.symbol_name != symbol_name {
            continue
        }
        print("compiler.builtin_syms.h64: error: Internal error: "
            "Symbol was registered twice: " + [
                symbol_name, symbol_ref, modpath, package_name
            ].as_str() + " Please report this error to the "
            "compiler makers.")
        throw new ValueError("duplicate symbol")
    }

    assert(package_name != none or modpath.join(".") != "$any")
    var st_item = new BuiltinSymsStorageItem(
        symbol_name, symbol_ref,
        modpath, package_name=package_name)
    st_item.hidden = (is_hidden == yes)
    st.package_to_item_list_map[package_name].add(
        st_item
    )
    if symbol_ref.kind == st_ref.ST_MCREF {
        assert(not st.storage_id_to_item_map.has(symbol_ref.id))
        st.storage_id_to_item_map[symbol_ref.id] = st_item
    }
    if not _return_internal_item_instead_of_ref {
        return st_item.symbol_storage_ref.copy()
    }
    return st_item
}

func try_lookup_symbol(
        project, symbol_name, in_module_name,
        in_package_name=none
        ) {
    var modpath
    if typename(in_module_name) == "str" {
        modpath = in_module_name.split(".")
    } elseif in_module_name != none {
        modpath = modpath.copy()
    }
    if project.builtin_syms_storage == none {
        throw new RuntimeError(
            "Internal error in compiler.builtin_syms: "
            "symbols weren't initialized. This shouldn't "
            "happen, please report this bug to the compiler "
            "team."
        )
    }
    var st = project.builtin_syms_storage
    if st.package_to_item_list_map.has("$any") {
        for entry in st.package_to_item_list_map["$any"] {
            assert(entry.module_path.len == 1 and
                entry.module_path[1] == "$any")
            if entry.symbol_name == symbol_name {
                return entry.symbol_storage_ref.copy()
            }
        }
    }
    if modpath == none or modpath.len == none or
            not st.package_to_item_list_map.has(in_package_name) {
        return none
    }
    for entry in st.package_to_item_list_map[in_package_name] {
        if entry.module_path.len != modpath.len {
            continue
        }
        var match = yes
        var idx = 0
        for modpart in modpath {
            idx += 1
            if modpart != entry.module_path[idx] {
                match = no
                break
            }
        }
        if not match {
            continue
        }
        if entry.symbol_name == symbol_name {
            return entry.symbol_storage_ref.copy()
        }
    }
    return none
}

