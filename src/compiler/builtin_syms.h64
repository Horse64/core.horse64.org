## @module compiler.builtin_syms
# Copyright (c) 2024, ellie/@ell1e & Horse64 authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.moose64.builtins as m64_builtins
import compiler.project as project

type BuiltinSymsStorageItem {
    var package_name = none
    var module_path = []
    var symbol_name
    var symbol_storage_ref
}

func BuiltinSymsStorageItem.init(
        symbol_name, symbol_ref, module_path,
        package_name=none
        ) {
    self.symbol_name = symbol_name
    self.symbol_storage_ref = symbol_ref.copy()
    self.module_path = module_path.copy()
    self.package_name = package_name
}

type BuiltinSymsStorage {
    var package_to_item_list_map = {->}
}

extend type project.Project {
    var builtin_syms_storage = none
}

func project.Project.init_builtin_syms(is_moose64=no) {
    if self.builtin_syms_storage != none {
        return
    }
    self.builtin_syms_storage = new BuiltinSymsStorage()
    if is_moose64 {
        m64_builtins.register_builtins_with_project(self)
        later:

        return later
    }
    return later
}

func register_symbol(project, symbol_name, symbol_ref,
        module_name, package_name=none) {
    if project.builtin_syms_storage == none {
        throw new RuntimeError(
            "Internal error in compiler.builtin_syms: "
            "symbols weren't initialized. This shouldn't "
            "happen, please report this bug to the compiler "
            "team."
        )
    }
    var modpath = module_name
    if typename(modpath) == "str" {
        modpath = modpath.split(".")
    } elseif typename(modpath) == "list" {
        modpath = modpath.copy()
    } else {
        throw new TypeError("module_name must be str or list")
    }
    if modpath.join(".") == "$any" {
        assert(package_name == none or package_name == "$any")
        package_name = "$any"
    }
    var st = project.builtin_syms_storage
    if not st.package_to_item_list_map.has(package_name) {
        st.package_to_item_list_map[package_name] = []
    }

    # Check for duplicates:
    for entry in st.package_to_item_list_map[package_name] {
        if entry.module_path.len != modpath.len {
            continue
        }
        var match = yes
        var idx = 0
        for lbl in entry.module_path {
            idx += 1
            if lbl != modpath[idx] {
                match = no
            }
        }
        if not match {
            continue
        }
        if entry.symbol_name != symbol_name {
            continue
        }
        print("compiler.builtin_syms.h64: error: Internal error: "
            "Symbol was registered twice: " + [
                symbol_name, symbol_ref, modpath, package_name
            ].as_str() + " Please report this error to the "
            "compiler team.")
        throw new ValueError("duplicate symbol")
    }

    st.package_to_item_list_map[package_name].add(
        new BuiltinSymsStorageItem(symbol_name, symbol_ref,
            modpath, package_name=package_name)
    )
}

func try_lookup_symbol(
        project, symbol_name, in_module_name,
        in_package_name=none
        ) {
    var modpath
    if typename(in_module_name) == "str" {
        modpath = in_module_name.split(".")
    } else {
        modpath = modpath.copy()
    }
    if project.builtin_syms_storage == none {
        throw new RuntimeError(
            "Internal error in compiler.builtin_syms: "
            "symbols weren't initialized. This shouldn't "
            "happen, please report this bug to the compiler "
            "team."
        )
    }
    var st = project.builtin_syms_storage
    if st.package_to_item_list_map.has("$any") {
        for entry in st.package_to_item_list_map["$any"] {
            assert(entry.module_path.len == 1 and
                entry.module_path[1] == "$any")
            if entry.symbol_name == symbol_name {
                return entry.symbol_storage_ref.copy()
            }
        }
    }
    if not st.package_to_item_list_map.has(in_package_name) {
        return none
    }
    for entry in st.package_to_item_list_map[in_package_name] {
        if entry.module_path.len != modpath.len {
            continue
        }
        var match = yes
        var idx = 0
        for modpart in modpath {
            idx += 1
            if modpart != entry.module_path[idx] {
                match = no
                break
            }
        }
        if not match {
            continue
        }
        if entry.symbol_name == symbol_name {
            return entry.symbol_storage_ref.copy()
        }
    }
    return none
}

