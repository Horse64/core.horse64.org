## @module compiler.cext
# Copyright (c) 2023-2025, ellie/@ell1e & Horse64's contributors
# (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import uri from core.horse64.org
import textfmt from core.horse64.org

import compiler.ast as ast
import compiler.comment.scan as comment_scan
import compiler.msg as msg
import compiler.project as project

const hvm_builtin_cext_funcs = {
    "typename"->"builtin_h64_typename",
    "print"->"builtin_h64_print",
    "assert"->"builtin_h64_assert",
    "has_attr"->"builtin_h64_has_attr",
    "to_num"->"builtin_h64_to_num",
    "alike_num"->"builtin_h64_alike_num",
    "$hvm_make_sync_lock"->"builtin_h64_hvm_make_sync_lock",
    "$hvm_lock_sync_lock"->"builtin_h64_hvm_make_sync_lock",
    "$hvm_unlock_sync_lock"->"builtin_h64_hvm_make_sync_lock",
}

type BuiltinTypeInfo {
    var name
    var is_error
    var builtin_base_name
}

func BuiltinTypeInfo.init(name, c_symbol,
        builtin_base_name=none, is_error=no) {
    self.name = name
    self.builtin_base_name = builtin_base_name
    self.is_error = is_error
}

const hvm_builtin_cext_types = {
    "BaseError"->new BuiltinTypeInfo("BaseError",
        "builtin_h64_baseerror", is_error=yes),
    "RuntimeError"->new BuiltinTypeInfo("RuntimeError",
        "builtin_h64_runtimeerror", is_error=yes,
        builtin_base_name="BaseError"),
    "NotImplementedError"->new BuiltinTypeInfo("NotImplementedError",
        "builtin_h64_notimplementederror", is_error=yes,
        builtin_base_name="RuntimeError"),
    "ValueError"->new BuiltinTypeInfo("ValueError",
        "builtin_h64_valueerror", is_error=yes,
        builtin_base_name="RunimeError"),
    "TypeError"->new BuiltinTypeInfo("TypeError",
        "builtin_h64_typeerror", is_error=yes,
        builtin_base_name="RuntimeError"),
    "OSResourceError"->new BuiltinTypeInfo("OSResourceError",
        "builtin_h64_osresourceerror", is_error=yes,
        builtin_base_name="RuntimeError"),
    "PermissionError"->new BuiltinTypeInfo("PermissionError",
        "builtin_h64_permissionerror", is_error=yes,
        builtin_base_name="RuntimeError"),
}

type CExtItem {
    var kind
    var name
    var module_name
    var package_name
    var storage_info
    var csymbol_name
}

type CFunc base CExtItem {
}

func CFunc.init {
    self.kind = ast.N_STMT_FUNC
}

func CFunc.as_str {
    var t = "<CFunc '" + self.module_name.as_str() +
        "." + self.name.as_str() + "'@'" +
        self.package_name.as_str() + "'>"
    return t
}

type CVar base CExtItem {
}

func CVar.init {
    self.kind = ast.N_STMT_VAR
}

func CVar.as_str {
    var t = "<CVar '" + self.module_name.as_str() +
        "." + self.name.as_str() + "'@'" +
        self.package_name.as_str() + "'>"
    return t
}

type CType base CExtItem {
    var is_error
    var _unresolved_base_type_name
    var base_cext_id
}

func CType.init {
    self.kind = ast.N_STMT_TYPE
}

func CType.as_str {
    var t = "<CType '" + self.module_name.as_str() +
        "." + self.name.as_str() + "'@'" +
        self.package_name.as_str() + "' is_enum=" +
        (self.kind == ast.N_STMT_ENUM).as_str() + ">"
    return t
}

type CEnum base CExtItem {
}

func CEnum.init {
    self.kind = ast.N_STMT_ENUM
}

func CEnum.as_str {
    var t = "<CEnum '" + self.module_name.as_str() +
        "." + self.name.as_str() + "'@'" +
        self.package_name.as_str() + "' is_enum=" +
        (self.kind == ast.N_STMT_ENUM).as_str() + ">"
    return t
}

extend type project.Project {
    var cext_builtins_storage_map_by_name = {->}

    var cext_builtins_storage_id_to_name_map = {->}

    var _last_id_offset_for_cext_storage = 0

    var storage_id_to_citem_map = {->}
}

type CExtStorageInfo {
    var kind  # compiler.ast.N_STMT_ENUM, ..._TYPE, ..._FUNC
    var storage_id
}

func _ensure_builtins_storage(project) {
    if project != none and
            project.cext_builtins_storage_map_by_name.len == 0 {
        var st_id = project._last_id_offset_for_cext_storage + 1
        for entry in hvm_builtin_cext_funcs {
            var st_info = new CExtStorageInfo()
            st_info.kind = ast.N_STMT_FUNC
            st_info.storage_id = st_id
            project.cext_builtins_storage_map_by_name[entry] = st_info
            project.cext_builtins_storage_id_to_name_map[st_id] = entry
            if project.debug_global_storage {
                print("compiler.cext: "
                    "_ensure_builtins_storage(): " +
                    "Assigning Cext storage id " +
                    st_id.as_str() + " with "
                    "name '" + entry + "'.")
            }
            st_id += 1
        }
        for entry in hvm_builtin_cext_types {
            var st_info = new CExtStorageInfo()
            st_info.storage_id = st_id
            st_info.kind = ast.N_STMT_TYPE
            project.cext_builtins_storage_map_by_name[entry] = st_info
            project.cext_builtins_storage_id_to_name_map[st_id] = entry
            if project.debug_global_storage {
                print("compiler.cext: "
                    "_ensure_builtins_storage(): " +
                    "Assigning Cext storage id " +
                    st_id.as_str() + " with "
                    "name '" + entry + "'.")
            }
            st_id += 1
        }
        project._last_id_offset_for_cext_storage = st_id - 1
    }
}

func check_cext_given_type_is_error_by_id(project, storage_id) {
    _ensure_builtins_storage(project)
    if not project.cext_builtins_storage_id_to_name_map.has(storage_id) {
        if not project.storage_id_to_citem_map.has(storage_id) {
            if project.debug_global_storage {
                print("compiler.cext: "
                    "check_cext_given_type_is_error_by_id(): " +
                    "Was passed invalid Cext storage id " +
                    storage_id.as_str() + ", can't find the item.")
            }
            throw new ValueError("Cext storage id not found.")
        }
        var citem = project.storage_id_to_citem_map[storage_id]
        if citem.kind != ast.N_STMT_TYPE {
            if project.debug_global_storage {
                print("compiler.cext: "
                    "check_cext_given_type_is_error_by_id(): " +
                    "Was passed invalid Cext storage id " +
                    storage_id.as_str() + ", references kind " +
                    ast.NodeKind.num_label(citem.kind) +
                    "and not type.")
            }
            throw new TypeError("Cext storage id doesn't reference a type.")
        }
        return citem.is_error
    }
    var name = project.cext_builtins_storage_id_to_name_map[storage_id]
    if not hvm_builtin_cext_types.has(name) {
        throw new TypeError("Cext storage id doesn't reference a type.")
    }
    var builtin_type_info = hvm_builtin_cext_types[name]
    return builtin_type_info.is_error
}

func check_cext_is_type_by_id(project, storage_id) {
    _ensure_builtins_storage(project)
    if not project.cext_builtins_storage_id_to_name_map.has(storage_id) {
        if not project.storage_id_to_citem_map.has(storage_id) {
            if project.debug_global_storage {
                print("compiler.cext: "
                    "check_cext_given_type_is_error_by_id(): " +
                    "Was passed invalid Cext storage id " +
                    storage_id.as_str() + ", can't find the item.")
            }
            throw new ValueError("Cext storage id not found.")
        }
        var citem = project.storage_id_to_citem_map[storage_id]
        return citem.kind == ast.N_STMT_TYPE
    }
    var name = project.cext_builtins_storage_id_to_name_map[storage_id]
    return hvm_builtin_cext_types.has(name)
}

func check_cext_is_enum_by_id(project, storage_id) {
    _ensure_builtins_storage(project)
    if not project.cext_builtins_storage_id_to_name_map.has(storage_id) {
        if not project.storage_id_to_citem_map.has(storage_id) {
            return no
        }
        var citem = project.storage_id_to_citem_map[storage_id]
        return citem.kind == ast.N_STMT_ENUM
    }
    # FIXME: handle built-in enums here if we should ever have any.
    return no
}

func get_cext_item_storage_info(name,
        in_module_name=none, in_package_name=none,
        project=none, can_match_moduleless=yes,
        debug=no) {
    if debug {
        print("horsec: debug: get_cext_item_storage_info(): "
            "Looking up " + {"in_module_name"->in_module_name,
            "in_package_name"->in_package_name}.as_str())
    }
    _ensure_builtins_storage(project)
    if can_match_moduleless and project != none and
            project.cext_builtins_storage_map_by_name.has(name) {
        return project.cext_builtins_storage_map_by_name[name]
    }
    if in_module_name != none and in_package_name != none and
            project != none and
            project.package_name_to_cext.has(in_package_name) {
        var cext_info = project.package_name_to_cext[in_package_name]
        if debug {
            print("horsec: debug: get_cext_item_storage_info(): "
                "Found matching package: " + in_package_name)
        }
        assert(cext_info != none)
        var ref = in_module_name + "." + name
        if cext_info.name_to_cmodule_map.
                has(in_module_name) {
            var cmod = cext_info.name_to_cmodule_map[
                in_module_name]
            if cmod.name_to_item_map.has(name) {
                var citem = cmod.name_to_item_map[name]
                if citem.storage_info == none {
                    project._last_id_offset_for_cext_storage += 1
                    var storage_id =
                        project._last_id_offset_for_cext_storage
                    if cext_info.debug_storage {
                        print("compiler.cext: "
                            "get_cext_item_storage_info(): " +
                            "Assigning Cext storage id " +
                            storage_id.as_str() + " with "
                            "name '" + name + "'.")
                    }
                    var st_info = new CExtStorageInfo()
                    st_info.storage_id = storage_id
                    st_info.kind = citem.kind
                    citem.storage_info = st_info
                    project.storage_id_to_citem_map[storage_id] = citem
                }
                assert(citem.storage_info != none)
                assert(citem.storage_info.storage_id != none)
                if debug {
                    print("horsec: debug: "
                        "get_cext_item_storage_info(): "
                        "Found it, returning citem.")
                }
                return citem.storage_info
            } else {
                if debug {
                    print("horsec: debug: "
                        "get_cext_item_storage_info(): "
                        "Not found in module : " +
                        in_module_name.as_str())
                }
            }
        } else {
            if debug {
                print("horsec: debug: "
                    "get_cext_item_storage_info(): "
                    "No such module found in package: " +
                    in_module_name.as_str())
            }
        }
    } else {
        if debug {
            print("horsec: debug: get_cext_item_storage_info(): "
                "No matching package found.")
        }
    }
    return none
}

func get_cext_item_storage_id(name,
        in_module_name=none, in_package_name=none,
        project=none, can_match_moduleless=yes,
        limit_to_kind=none, debug=no) {
    var storage_info = get_cext_item_storage_info(
        name, in_module_name=in_module_name,
        in_package_name=in_package_name, project=project,
        can_match_moduleless=can_match_moduleless,
        debug=debug,
    )
    if storage_info != none and limit_to_kind != none and
            storage_info.kind != limit_to_kind {
        if debug {
            print("horsec: debug: get_cext_item_storage_id(): "
                "Wrong kind of symbol, citem found is kind=" +
                ast.NodeKind.num_label(storage_info.kind) + " "
                "but query is limited to kind=" +
                ast.NodeKind.num_label(limit_to_kind) + ".")
        }
        storage_info = none
    }
    if storage_info {
        assert(storage_info.storage_id != none)
        if debug {
            print("horsec: debug: get_cext_item_storage_id(): "
                "Found valid result, returning it.")
        }
        return storage_info.storage_id
    }
    return none
}

type CModule {
    var module_name

    var name_to_item_map = {->}
}

func CModule.as_str {
    var t = "<CModule "
    var is_first = yes
    for citem in self.name_to_item_map.values() {
        if is_first {
            is_first = no
        } else {
            t += ","
        }
        t += citem.as_str()
    }
    t += ">"
    return t
}

type CExtInfo {
    var package_name

    var name_to_cmodule_map = {->}

    var debug_storage
}

func CExtInfo.init(debug_storage=no) {
    self.debug_storage = debug_storage
}

func CExtInfo.import_to_modname(importst, project=none) {
    assert(self.package_name != none or
        self.name_to_cmodule_map.len == 0)
    if importst.package_name != self.package_name and
            (importst.package_name != none or
             project == none or
             project.package_name != self.package_name) {
        return none
    }
    # FIXME: Add support for nested imports (e.g. if built-in
    # is module a.b, importing just b inside folder a/ should work).
    var mod_name = importst.module_path.join(".")
    if self.name_to_cmodule_map.has(mod_name) {
        return mod_name
    }
    return none
}

func CExtInfo.as_str {
    var t = "<CExtInfo "
    var is_first = yes
    for cmod in self.name_to_cmodule_map.values() {
        if is_first {
            is_first = no
        } else {
            t += ","
        }
        t += cmod.as_str()
    }
    t += ">"
    return t
}

func CExtInfo.finalize_after_scan(project, msgs) {
    assert(project != none)
    var self_pkg_name = self.package_name
    if self_pkg_name == "hvm.horse64.org" {
        self_pkg_name = "core.horse64.org"
    }
    if not project.package_name_to_cext.has(self_pkg_name) {
        project.package_name_to_cext[self_pkg_name] = self
    }
    for cmod in self.name_to_cmodule_map.values() {
        for citem in cmod.name_to_item_map.values() {
            if citem.kind == ast.N_STMT_TYPE and
                    citem._unresolved_base_type_name != none {
                var ref_name = citem._unresolved_base_type_name
                var ref_module = none
                var ref_pkg = none
                if ref_name.find("@") != none {
                    ref_pkg = ref_name.sub(
                        ref_name.find("@") + 1).trim()
                    ref_name = ref_name.sub(
                        1, ref_name.find("@") - 1).trim()
                }
                if ref_name.find(".") != none {
                    ref_module = ref_name.sub(
                        1, ref_name.find(".") - 1).trim()
                    ref_name = ref_name.sub(
                        ref_name.find(".") + 1).trim()
                }
                if ref_pkg == "core.horse64.org" and
                        hvm_builtin_cext_types.has(ref_name) {
                    ref_pkg = none
                }
                var st_info = get_cext_item_storage_info(
                    ref_name,
                    in_module_name=ref_module,
                    in_package_name=ref_pkg,
                    project=project, can_match_moduleless=yes)
                if st_info == none {
                    if msgs != none {
                        msgs.add(new msg.FileMsg(
                            "Ignored malformed C extension "
                            "base type '" +
                            citem._unresolved_base_type_name + "' "
                            "in package '" +
                            self.package_name.as_str() + "'. "
                            "Only other C extension types can be "
                            "used as base types.",
                            kind=msg.M_WARNING
                        ))
                    }
                    citem._unresolved_base_type_name = none
                    continue
                } elseif st_info.kind != ast.N_STMT_TYPE {
                    if msgs != none {
                        msgs.add(new msg.FileMsg(
                            "Ignored malformed C extension "
                            "base type '" +
                            citem._unresolved_base_type_name + "' "
                            "in package '" +
                            self.package_name.as_str() + "', base "
                            "must also be a custom type.",
                            kind=msg.M_WARNING
                        ))
                    }
                    citem._unresolved_base_type_name = none
                    continue
                }
                citem._unresolved_base_type_name = none
                citem.base_cext_id = st_info.storage_id
            }
        }
    }
    var had_change = yes
    while had_change {
        had_change = no
        for cmod in self.name_to_cmodule_map.values() {
            for citem in cmod.name_to_item_map.values() {
                if citem.kind == ast.N_STMT_TYPE and
                        not citem.is_error and
                        citem.base_cext_id != none {
                    if check_cext_given_type_is_error_by_id(
                            project, citem.base_cext_id) {
                        had_change = yes
                        citem.is_error = yes
                    }
                }
            }
        }
    }
}

func return_empty_cext_info {
    var cext_info = new CExtInfo()
    return cext_info
}

func scan_package_for_cexts(
        base_project, package_name, msgs=none,
        allow_project_independent_packages_fallback=no,
        allow_disk=yes, allow_vfs=yes,
        debug_storage=no, debug=no) {
    var is_moose64 = no
    var cext_info = new CExtInfo(
        debug_storage=debug_storage
    )
    cext_info.package_name = package_name
    var dir_uri = base_project.find_package_dir_uri(
        package_name,
        allow_project_independent_fallback=
            allow_project_independent_packages_fallback,
        error_on_base_dir_failure=no
    ) later:

    await dir_uri
    if dir_uri == none {
        var t = if is_moose64 ("moosec") else ("horsec") +
            ": error: Unknown missing module, failed to find "
            "required package " + textfmt.as_escaped_code_string(
                package_name)
        if base_project.packages_dir_uri != none {
            t += " in this horse_modules dir: "+
                base_project.packages_dir_uri.as_str()
        } else {
            t += " in available horse_modules dir."
        }
        print(t)
        throw new ValueError("Package directory not "
            "found for required package.")
    }
    if not {"file", "vfs"}.has(uri.get_protocol(dir_uri)) {
        throw new NotImplementedError("Scanning for cexts "
            "not supported for remote URIs.")
    }

    if debug {
         print("compiler.cext: scan_package_for_cexts(): " +
            "Scanning package '" + package_name +
            "' via dir " + dir_uri + " for C extensions.")
    }

    var source_code_patterns =
        project.get_source_code_patterns(dir_uri) later:

    await source_code_patterns
    var exclude_patterns =
        project.get_exclude_file_patterns(dir_uri) later:

    await exclude_patterns
    var scanner = new comment_scan.TreeCommentScanner(
        dir_uri, strip_noncommands=yes,
        exclude_dir_names=["horse_modules"],
        exclude_dot_names=yes,
        include_patterns=source_code_patterns,
        exclude_patterns=exclude_patterns,
        allow_vfs=allow_vfs, allow_disk=allow_disk,
    )
    var comment_groups = scanner.produce_next_comments() later:

    await comment_groups
    if comment_groups == none {
        if debug {
            print("compiler.cext: scan_package_for_cexts(): " +
                "Completed scanning package '" + package_name +
                "' for C extensions.")
        }
        cext_info.finalize_after_scan(base_project, msgs)
        return cext_info
    }
    for group in comment_groups {
        # FIXME: finish this part, parse parameters and all later.
        var seen_item_ref = none
        var seen_item_base_name = none
        var seen_item_csymbol_name = none
        for comment in group {
            if comment.starts("/// @h64base ") or
                    comment.starts("/** @h64base ") {
                seen_item_base_name = comment.sub(
                    comment.find("@h64base") +
                    ("@h64base ").len).trim()
                if seen_item_base_name.find("@") == none and
                        not hvm_builtin_cext_types.has(
                            seen_item_base_name) and
                        not hvm_builtin_cext_funcs.has(
                            seen_item_base_name) {
                    seen_item_base_name += "@" + package_name
                }
                if seen_item_ref != none and
                        seen_item_ref.kind == ast.N_STMT_TYPE {
                    seen_item_ref._unresolved_base_type_name =
                        seen_item_base_name
                }
                continue
            } elseif comment.starts("/// @func ") or
                    comment.starts("/** @func ") {
                seen_item_csymbol_name = comment.sub(
                    comment.find("@func ") +
                    ("@func ").len).trim()
                if seen_item_ref != none {
                    seen_item_ref.csymbol_name = seen_item_csymbol_name
                }
                continue
            }
            var comment_type = none
            var citem_type = none
            if comment.starts("/// @h64func ") or
                    comment.starts("/** @h64func ") {
                comment_type = "h64func"
                citem_type = ast.N_STMT_FUNC
            } elseif comment.starts("/// @h64var ") or
                    comment.starts("/** @h64var ") {
                comment_type = "h64var"
                citem_type = ast.N_STMT_VAR
            } elseif comment.starts("/// @h64type ") or
                    comment.starts("/** @h64type ") {
                comment_type = "h64type"
                citem_type = ast.N_STMT_TYPE
            } elseif comment.starts("/// @h64enum ") or
                    comment.starts("/** @h64enum ") {
                comment_type = "h64enum"
                citem_type = ast.N_STMT_ENUM
            }
            if comment_type != none {
                if seen_item_ref != none {
                    if msgs != none {
                        msgs.add(new msg.FileMsg(
                            "Found invalid C extension reference "
                            "with two items in one block in package '" +
                            package_name.as_str() + "'."
                        ))
                    } elseif duplicate {
                        throw new ValueError(
                            "Duplicate C extension reference found.")
                    }
                }
                var citem_ref = comment.sub(
                    comment.find("@" + comment_type + " ") +
                    ("@" + comment_type + " ").len).trim()
                var orig_ref = citem_ref
                var citem_package = package_name
                if citem_ref.find("@") != none {
                    citem_package = citem_ref.sub(
                        citem_ref.find("@") + 1).trim()
                    citem_ref = citem_ref.sub(
                        1, citem_ref.find("@") - 1).trim()
                }
                var invalid = no
                if citem_ref.starts(".") or
                        citem_ref.ends(".") or
                        citem_ref.find(".") == none or
                        citem_package.find(".") == none or
                        citem_ref.trim() != citem_ref or
                        citem_package.trim() != citem_package or
                        citem_package.len == 0  {
                    invalid = yes
                }
                var citem_module
                var citem_name
                if not invalid {
                    citem_module = citem_ref.sub(
                        1, citem_ref.rfind(".") - 1).trim()
                    citem_name = citem_ref.sub(
                        citem_ref.rfind(".") + 1).trim()
                }
                if citem_module == none or
                        citem_module.len == 0 or
                        citem_name == none or
                        citem_name.len == 0 {
                    invalid = yes
                }
                if invalid and msgs != none {
                    msgs.add(new msg.FileMsg(
                        "Skipped malformed C extension reference "
                        "in package '" +
                        package_name.as_str() + "': " +
                        orig_ref,
                        kind=msg.M_WARNING
                    ))
                    continue
                } elseif invalid {
                    throw new ValueError(
                        "Malformed C extension reference found.")
                }
                if not cext_info.name_to_cmodule_map.has(citem_module) {
                    cext_info.name_to_cmodule_map[citem_module] =
                        new CModule()
                }
                var cmod = cext_info.name_to_cmodule_map[citem_module]
                cmod.module_name = citem_module
                var duplicate = no
                if cmod.name_to_item_map.has(citem_name) {
                    duplicate = yes
                } else {
                    var citem = none
                    if citem_type == ast.N_STMT_FUNC {
                        citem = new CFunc()
                    } elseif citem_type == ast.N_STMT_VAR {
                        citem = new CVar()
                    } elseif citem_type == ast.N_STMT_TYPE {
                        citem = new CType()
                    } elseif citem_type == ast.N_STMT_ENUM {
                        citem = new CEnum()
                    } else {
                        throw new TypeError("Unknown citem_type.")
                    }
                    citem.name = citem_name
                    citem.package_name = package_name
                    citem.module_name = citem_module
                    cmod.name_to_item_map[citem_name] = citem
                    seen_item_ref = citem
                    if seen_item_base_name != none and
                            citem_type == ast.N_STMT_TYPE and
                            seen_item_ref.kind == ast.N_STMT_TYPE {
                        citem._unresolved_base_type_name =
                            seen_item_base_name
                    } elseif seen_item_csymbol_name != none {
                        citem.csymbol_name = seen_item_csymbol_name
                    }
                }
                if duplicate and msgs != none {
                    msgs.add(new msg.FileMsg(
                        "Found invalid duplicate C extension "
                        "reference in package '" +
                        package_name.as_str() + "': " +
                        orig_ref,
                        kind=msg.M_WARNING
                    ))
                } elseif duplicate {
                    throw new ValueError(
                        "Duplicate C extension reference found.")
                }
            }
        }
    }
    comment_groups = scanner.produce_next_comments() later repeat
}

