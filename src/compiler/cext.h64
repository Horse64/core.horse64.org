# @module compiler.cext
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import uri from core.horse64.org

import compiler.comment.scan as comment_scan
import compiler.msg as msg
import compiler.project as project

type CFunc {
    var name
    var module_name
    var package_name
}

func CFunc.as_str {
    var t = "<CFunc '" + self.module_name.as_str() +
        "." + self.name.as_str() + "'@'" +
        self.package_name.as_str() + "'>"
    return t
}

type CModule {
    var module_name

    var name_to_cfunc_map = {->}
}

func CModule.as_str {
    var t = "<CModule "
    var is_first = yes
    for cfunc in self.name_to_cfunc_map.values() {
        if is_first {
            is_first = no
        } else {
            t += ","
        }
        t += cfunc.as_str()
    }
    t += ">"
    return t
}

type CExtInfo {
    var package_name

    var name_to_cmodule_map = {->}
}

func CExtInfo.import_to_modname(importst, project=none) {
    assert(self.package_name != none)
    if importst.package_name != self.package_name and
            (importst.package_name != none or
             project == none or
             project.package_name != self.package_name) {
        return none
    }
    # FIXME: Add support for nested imports (e.g. if built-in
    # is module a.b, importing just b inside folder a/ should work).
    var mod_name = importst.module_path.join(".")
    if self.name_to_cmodule_map.has(mod_name) {
        return mod_name
    }
    return none
}

func CExtInfo.as_str {
    var t = "<CExtInfo "
    var is_first = yes
    for cmod in self.name_to_cmodule_map.values() {
        if is_first {
            is_first = no
        } else {
            t += ","
        }
        t += cmod.as_str()
    }
    t += ">"
    return t
}

func scan_package_for_cexts(
        base_project, package_name, msgs=none, debug=no) {
    var cext_info = new CExtInfo()
    cext_info.package_name = package_name
    var dir_uri = base_project.find_package_dir_uri(
        package_name) later:

    await dir_uri
    if dir_uri == none  {
        throw new ValueError("Package directory not "
            "found for: " + package_name)
    }
    if not {"file", "vfs"}.has(uri.get_protocol(dir_uri)) {
        throw new NotImplementedError("Scanning for cexts "
            "not supported for remote URIs.")
    }

    var source_code_patterns =
        project.get_source_code_patterns(dir_uri) later:

    await source_code_patterns

    var scanner = new comment_scan.TreeCommentScanner(
        dir_uri, strip_noncommands=yes,
        exclude_dir_names=["horse_modules", "vendor"],
        exclude_dot_names=yes,
        include_patterns=source_code_patterns,
    )
    var comment_groups = scanner.produce_next_comments() later:

    await comment_groups
    if comment_groups == none {
        return cext_info
    }
    for group in comment_groups {
        # FIXME: finish this part.
        for comment in group {
            if comment.starts("/// @h64func ") or
                    comment.starts("/** @h64func ") {
                var cfunc_ref = comment.sub(comment.find("@h64func ") +
                    "@h64func ".len).trim()
                var orig_ref = cfunc_ref
                var cfunc_package = package_name
                if cfunc_ref.find("@") != none {
                    cfunc_package = cfunc_ref.sub(
                        cfunc_ref.find("@") + 1).trim()
                    cfunc_ref = cfunc_ref.sub(
                        1, cfunc_ref.find("@") - 1).trim()
                }
                var invalid = no
                if cfunc_ref.starts(".") or
                        cfunc_ref.ends(".") or
                        cfunc_ref.find(".") == none or
                        cfunc_package.find(".") == none or
                        cfunc_ref.trim() != cfunc_ref or
                        cfunc_package.trim() != cfunc_package {
                    invalid = yes
                }
                var cfunc_module
                if not invalid {
                    cfunc_module = cfunc_ref.sub(
                        1, cfunc_ref.rfind(".") - 1)
                    cfunc_ref = cfunc_ref.sub(
                        cfunc_ref.rfind(".") + 1)
                }
                if invalid and msgs != none {
                    msgs.add(new msg.FileMsg(
                        "Skipped malformed C extension reference "
                        "in package '" +
                        package_name.as_str() + "': " +
                        orig_ref,
                        kind=msg.M_WARNING
                    ))
                } elseif invalid {
                    throw new ValueError(
                        "Malformed C extension reference found.")
                }
                if not cext_info.name_to_cmodule_map.has(cfunc_module) {
                    cext_info.name_to_cmodule_map[cfunc_module] =
                        new CModule()
                }
                var cmod = cext_info.name_to_cmodule_map[cfunc_module]
                cmod.module_name = cfunc_module
                var duplicate = no
                if cmod.name_to_cfunc_map.has(cfunc_ref) {
                    duplicate = yes
                } else {
                    var cfunc = new CFunc()
                    cfunc.name = cfunc_ref
                    cfunc.package_name = package_name
                    cfunc.module_name = cfunc_module
                    cmod.name_to_cfunc_map[cfunc_ref] = cfunc
                }
                if duplicate and msgs != none {
                    msgs.add(new msg.FileMsg(
                        "Found invalid duplicate C extension "
                        "referemce in package '" +
                        package_name.as_str() + "': " +
                        orig_ref,
                    ))
                } elseif duplicate {
                    throw new ValueError(
                        "Duplicate C extension reference found.")
                }
            }
        }
    }
    comment_groups = scanner.produce_next_comments() later repeat
}

