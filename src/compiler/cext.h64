# @module compiler.cext
# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import uri from core.horse64.org

import compiler.comment.scan as comment_scan
import compiler.msg as msg
import compiler.project as project

type CFunc {
    var name
    var module_name
    var package_name
}

func scan_package_for_cexts(
        base_project, package_name, msgs=none, debug=no) {
    var dir_uri = base_project.find_package_dir_uri(
        package_name) later:

    await dir_uri
    if dir_uri == none  {
        throw new ValueError("Package directory not "
            "found for: " + package_name)
    }
    if not {"file", "vfs"}.has(uri.get_protocol(dir_uri)) {
        throw new NotImplementedError("Scanning for cexts "
            "not supported for remote URIs.")
    }

    var source_code_patterns =
        project.get_source_code_patterns(dir_uri) later:

    await source_code_patterns

    var scanner = new comment_scan.TreeCommentScanner(
        dir_uri, strip_noncommands=yes,
        exclude_dir_names=["horse_modules", "vendor"],
        exclude_dot_names=yes,
        include_patterns=source_code_patterns,
    )
    var result = {->}
    var comment_groups = scanner.produce_next_comments() later:

    await comment_groups
    if comment_groups == none {
        return result
    }
    for group in comment_groups {
        # FIXME: finish this part.
        for comment in group {
            if comment.starts("/// @h64func ") or
                    comment.starts("/** @h64func ") {
                var c_func_ref = comment.sub(comment.find("@h64func ") +
                    "@h64func ".len).trim()
                var c_func_package = package_name
                if c_func_ref.find("@") != none {
                    c_func_package = c_func_ref.sub(
                        c_func_ref.find("@") + 1).trim()
                    c_func_ref = c_func_ref.sub(
                        1, c_func_ref.find("@") - 1).trim()
                }
                var invalid = no
                if c_func_ref.find(".") == none or
                        c_func_package.find(".") == none {
                    invalid = yes
                }
                if invalid or yes {
                    if msgs != none {
                        msgs.add(new msg.FileMsg(
                            "Skipped malformed C extension reference "
                            "in package '" + package_name.as_str() + "': " +
                            c_func_ref + "@" + c_func_package,
                            kind=msg.M_WARNING
                        ))
                    }
                }
            }
        }
    }
    comment_groups = scanner.produce_next_comments() later repeat
}

