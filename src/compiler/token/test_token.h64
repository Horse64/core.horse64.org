# Copyright (c) 2020-2022,  ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.


import compiler.token


func verify_tokens_with_list(tokens, str_list) {
    i = 1
    while i <= tokens.len {
        if i > str_list.len {
            throw new ValueError(
                "Given tokens have excess entries, "
                "first unexpected is entry #" + i.as_str() +
                " -> " + tokens[i].as_str())
        }
        if tokens[i].str != str_list[i] {
            entry = [tokens[i].str, str_list[i]]
            throw new ValueError(
                "Given tokens have wrong entry, expected " +
                compiler.token.as_escaped_code_string(
                str_list[i]) + " but got entry #" +
                i.as_str() + " -> " +
                tokens[i].as_str() + "\nEntire list is: " +
                tokens.as_str())
        }
        i += 1
    }
    if i < str_list.len {
        throw new ValueError(
            "Given tokens have too few entries, only #" +
            tokens.len.as_str() + " while expected " +
            "were #" + str_list.len)
    }
}

func test_tokenize {
    var result = compiler.token.tokenize_str(
        'func main {print("Hello! \\nTest")}',
        keep_whitespace=no, auto_recovery=yes
        )
    verify_tokens_with_list(result.tokens,
        ["func", "main", "{", "print", "(",
        '"Hello! \\nTest"', ")", "}"])
    assert(result.msgs.len == 0)

    var result = compiler.token.tokenize_str(
        'var x = ((5 + 3 ** 4) >= 2)',
        keep_whitespace=no, auto_recovery=yes
        )
    verify_tokens_with_list(result.tokens,
        ["var", "x", "=", "(", "(",
        "5", "+", "3", "**", "4", ")", ">=", "2",
        ")"])
    assert(result.msgs.len == 0)
}
