# @module compiler.main
# Copyright (c) 2020-2022,  ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import argparse from core.horse64.org
import json from core.horse64.org
import system from core.horse64.org

import compiler.token
import compiler.msg as msg


func version_output_for_terminal {
    return "horsec v" + system.program_version() + ", built by " +
        system.program_compiled_with() + ".\n" +
        "Copyright (c) 2020-2022, ellie/@ell1e & Horse64 Team."
}

func license_output_for_terminal {
    return "All horsec license info, no guarantee of "
        "completeness or accuracy:\n" +
        system.program_license_text(layout_width=79)
}

func tokenize_target_from_args(args) {
    if args["--code"] != none {
        var tresult = compiler.token.tokenize_str(
            args["--code"], keep_whitespace=no
        )
        return tresult
    } else {
        var src_path = args["source file"]

        var tresult = compiler.token.tokenize_file(
            src_path, project_file=none,
            keep_whitespace=no
        ) later:

        await tresult
        return tresult
    }
}

func actionparser_compile(args) {
    var program_name = "horsec compile"
    var defs = argparse.ArgumentDefs(program_name=program_name)
    defs.add_arg(
        "source file", optional=yes,
        description="The target file to compile, "
            "must have a .h64 file extension.")
    defs.add_switch(
        "--code", aliases=["-c"], takes_arg=yes,
        description="A code line which to compile instead of "
            "a file on disk.")
    defs.add_switch(
        "--stage", takes_arg=yes,
        description="At which stage to stop. The default is "
            "\"binary\" which means full compilation, other "
            "available stages are: tokens, ast-local, ast, bytecode.")
    defs.add_switch(
        "--output-file", takes_arg=yes,
        description="Where to write the resulting binary, or "
            "json file in case of --stage tokens, "
            "--stage ast-local, --stage ast, or --stage bytecode.")
    defs.add_switch(
        "--for-script",
        description="This switch formats horsec's terminal output (like"
            "e.g. the errors when compiling) as JSON")
    var result = argparse.parse(defs, args)
    if result.output != "" {
        print(result.output)
        return result.exit_code
    }
    if result.args["--code"] == none and
            result.args["source file"] == none {
        print(program_name + ": error: Must specify "
            "source file or --code option.")
        print("Use " + program_name + " --help to show usage.")
        return 1
    }

    if result.args["--stage"] == "tokens" {
        var tresult = tokenize_target_from_args(result.args)
        later:

        await tresult
        var had_error = no
        for m in tresult.msgs {
            if m.kind == msg.M_ERROR {
                had_error = yes
            }
        }
        if result.args["--for-script"] {
            var output = {
                "error": none,
                "result": tresult.as_json_obj(),
            }
            if had_error {
                output["error"] = "Code has errors."
                print(json.dump(output))
                return 1
            }
            print(json.dump(output))
            return 0
        } else {
            for m in tresult.msgs {
                print(m.as_terminal_str(prefix=program_name))
            }
            if not had_error {
                var output = ""
                for t in tresult.tokens {
                    if output.len > 0 {
                        output += ", "
                    }
                    output += compiler.token.
                        describe_token_str(t.str)
                }
                print(output)
                return 0
            }
            return 1
        }
    }
}

func main {
    var defs = argparse.ArgumentDefs(program_name="horsec")
    defs.add_arg(
        "action", description="Pick an available actions: "
        "compile, run. To see details for an action, use it with --help "
        "like e.g.: horse compile --help")
    defs.add_catchall(
        "action args", description="List of "
        "arguments for the specified action")
    defs.add_switch(
        "--license",
        description="Print out the program's licensing.",
        action_func=license_output_for_terminal)
    defs.add_switch(
        "--version", aliases=["-V", "-version"],
        description="Print out the program version.",
        action_func=version_output_for_terminal)
    var result = argparse.parse(defs)
    if result.output != "" {
        print(result.output)
        return result.exit_code
    }
    if result.args["action"] == "compile" {
        var result = actionparser_compile(
            result.args["action args"]
        ) later:

        await result
        return result
    } else {
        print("horsec: error: unknown action: " + result.args["action"])
        print("Use horsec --help to show usage.")
        return 1
    }
}

