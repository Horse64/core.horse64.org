# Copyright (c) 2023, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import compiler.comment.command as command_comment

func test_get_build_options_from_str {
    var opts = command_comment.get_build_options_from_str(
        "# abc\n   ## @build_options abc=5  def= --test '#helo ' ' 'abcd = ef '"
    )
    assert(opts.has("abc"))
    assert(opts["abc"] == "5")
    assert(opts.has("def"))
    assert(opts["def"] == "")
    assert(opts.has("#helo"))
    assert(opts["#helo"] == none)
    assert(opts.has("abcd"))
    assert(opts["abcd"] == " ef ")
}

func test_get_comments_from_str {
    var comments

    comments = command_comment.get_comments_from_str(
        "# abc\n   ##  @build_options abc=5  def= --test\n"
        " abc\ndef  ##  bla @blu\ntest #bla",
        only_doc_comments=yes, stop_at_noncomment=no,
        strip_noncommands=no
    )
    assert(comments.len == 4)
    assert(comments[1].starts("## @build"))
    assert(comments[2] == "")
    assert(comments[3].starts("##  bla"))
    assert(comments[4].starts("## @blu"))

    comments = command_comment.get_comments_from_str(
        "# abc\n   ##  @build_options abc=5  def= --test\n"
        " abc\ndef  ##  bla @blu\ntest #bla",
        only_doc_comments=yes,
        stop_at_noncomment=yes
    )
    assert(comments.len == 1)
    assert(comments[1].starts("## @build"))

    comments = command_comment.get_comments_from_str(
        "# abc\n   ##  @build_options abc=5  def= --test\n"
        " abc\ndef  ##  bla @blu\ntest\n#bla",
        only_doc_comments=no
    )
    assert(comments.len == 7)
    assert(comments[1].starts("# a"))
    assert(comments[2].starts("## @build"))
    assert(comments[3] == "")
    assert(comments[4].starts("##  bla"))
    assert(comments[5].starts("## @blu"))
    assert(comments[6] == "")
    assert(comments[7].starts("#bla"))

    comments = command_comment.get_comments_from_str(
        "# abc\n   ///  @build_options abc=5  def= --test\n"
        " abc\ndef  //  bla @blu\ntest\n///bla",
        only_doc_comments=no, c_style_comments=yes
    )
    assert(comments.len == 6)
    assert(comments[1].starts("/// @build"))
    assert(comments[2] == "")
    assert(comments[3].starts("//  bla"))
    assert(comments[4].starts("// @blu"))
    assert(comments[5] == "")
    assert(comments[6].starts("///bla"))

    comments = command_comment.get_comments_from_str(
        "# abc\n   /*  @build_options abc=5 /*  def= --test\n"
        " abc\ndef */  //  bla @blu\ntest\n///bla",
        only_doc_comments=no, c_style_comments=yes
    )
    assert(comments.len == 5)
    assert(comments[1].starts("/* @build"))
    assert(comments[2].starts("//  bla"))
    assert(comments[3].starts("// @blu"))
    assert(comments[4] == "")
    assert(comments[5].starts("///bla"))

    comments = command_comment.get_comments_from_str(
        '# abc\n "  \\"  /*  @build_options abc=5 /*  def= --test\n'
        ' abc\ndef */"  // " bla @blu\ntest\n///bla',
        only_doc_comments=no, c_style_comments=yes
    )
    assert(comments.len == 4)
    assert(comments[1].starts("// \" bla"))
    assert(comments[2].starts("// @blu"))
    assert(comments[3] == "")
    assert(comments[4].starts("///bla"))
}

