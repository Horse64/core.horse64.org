## @module compiler.comment.command
# Copyright (c) 2023-2025, ellie/@ell1e & Horse64's contributors
# (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import io from core.horse64.org
import text from core.horse64.org

func _starts_command_comment(s, pos, slen) {
    if pos > slen {
        return no
    }
    var code_a = text.code('a')
    var code_cap_a = text.code('A')
    var code_z = text.code('z')
    var code_cap_z = text.code('Z')
    if s[pos] == '@' and
            pos + 1 <= slen and
            ((text.code(s[pos + 1]) >= code_a and
                text.code(s[pos + 1]) <= code_z) or
             (text.code(s[pos + 1]) >= code_cap_a and
                text.code(s[pos + 1]) <= code_cap_z) or
             text.code(s[pos + 1]) > 127) {
        return yes
    }
    return no
}

func get_comments_from_str(
        s, stop_at_noncomment=no, only_doc_comments=yes,
        strip_noncommands=no, c_style_comments=no,
        group_comments=yes
        ) {
    if typename(s) == "bytes" {
        s = s.as_str()
    }
    var code_a = text.code('a')
    var code_cap_a = text.code('A')
    var code_z = text.code('z')
    var code_cap_z = text.code('Z')

    func starts_comment(s, pos) {
        if pos > s.len or pos < 1 {
            return no
        }
        if c_style_comments and pos + 1 <= s.len and
                s[pos] == '/' and (s[pos + 1] == '/' or
                s[pos + 1] == '*') {
            return yes
        }
        if not c_style_comments and s[pos] == '#' {
            return yes
        }
        return no
    }
    var comment_lines = []
    var i = 1
    while i <= s.len {
        if {"\n", "\r"}.has(s[i]) or (
                not {" ", "\t"}.has(s[i]) and
                not starts_comment(s, i)) {
            # This is a non-comment line.

            if s[i] == '/' and c_style_comments {
                i += 1
            }
            if stop_at_noncomment {
                break
            }
            var in_quote = none
            while i <= s.len and (in_quote != none or
                    (s[i] != '\r' and s[i] != '\n' and
                    not starts_comment(s, i))) {
                if in_quote != none and s[i] == '\\' {
                    i += 1
                    if i <= s.len {
                        i += 1
                    }
                    continue
                } elseif in_quote == none and (
                        s[i] == '"' or s[i] == "'") {
                    in_quote = s[i]
                } elseif in_quote != none and s[i] == in_quote {
                    in_quote = none
                }
                i += 1
            }
            if i > s.len or not starts_comment(s, i) {
                while i <= s.len and (
                        s[i] == '\r' or s[i] == '\n') {
                    i += 1
                }
                if comment_lines.len > 0 and
                        comment_lines[comment_lines.len].len > 0 {
                    comment_lines.add("")
                }
                continue
            }
        }
        if starts_comment(s, i) {
            # This is a comment line:

            i += 1
            if c_style_comments {
                i += 1
            }
            var line_is_block_comment = no
            var comment_start = none
            var is_doc_comment = no
            if i <= s.len and
                    (c_style_comments and
                     {"/**", "///"}.has(s.sub(i - 2, i))) or
                    (not c_style_comments and
                     {"##"}.has(s.sub(i - 1, i))) {
                is_doc_comment = yes
                comment_start = s.sub(
                    i - if c_style_comments(2) else (1), i
                )
                i += 1
            } else {
                comment_start = s.sub(
                    i - if c_style_comments(2) else (1), i - 1
                )
            }
            if c_style_comments and
                    comment_start.sub(1, 2) == "/*" {
                line_is_block_comment = yes
            }

            var content_start = i
            while i <= s.len and (line_is_block_comment or
                    (s[i] != '\n' and s[i] != '\r')) and
                    (not line_is_block_comment or
                     s[i] != '*' or i + 1 > s.len or
                     s[i + 1] != '/') {
                i += 1
            }
            var comment_contents = s.sub(content_start, i - 1)
            if not only_doc_comments or is_doc_comment {
                # We want to extract this comment:
                var had_nonwhitespace = no
                var kstart = 1
                var k = 1
                while k <= comment_contents.len {
                    if _starts_command_comment(comment_contents, k,
                            comment_contents.len) {
                        # Ensure commands are isolated:
                        if not strip_noncommands {
                            # To make it easier to parse later,
                            # ensure this command is on a separate line:
                            if k > 1 and comment_contents[k - 1] == ' ' {
                                k -= 1
                            }
                            if had_nonwhitespace {
                                comment_lines.add(comment_start +
                                    comment_contents.sub(kstart, k - 1))
                            }
                            kstart = k
                        }
                        var k2 = k
                        while k2 <= comment_contents.len and
                                comment_contents[k2] != '\r' and
                                comment_contents[k2] != '\n' {
                            k2 += 1
                        }
                        if strip_noncommands {
                            # Add just the isolated command comment:
                            comment_lines.add(comment_start + " " +
                                comment_contents.sub(k, k2 - 1).trim()
                            )
                            had_nonwhitespace = no
                            k = k2
                            kstart = k
                        } else {
                            k = k2 - 1
                        }
                        continue
                    } elseif k + 1 > comment_contents.len {
                        comment_lines.add(
                            comment_start +
                            comment_contents.sub(kstart, k)
                        )
                        break
                    } elseif not {' ', '\t', '\r', '\n'}.has(
                            comment_contents[k]
                            ) {
                        had_nonwhitespace = yes
                    }
                    k += 1
                }
            }
            if line_is_block_comment and i <= s.len {
                i += 2  # Past '*/' ending
            } else {
                assert(i > s.len or s[i] == '\r' or s[i] == '\n')
                if i <= s.len and s[i] == '\r' and
                        i + 1 <= s.len and s[i + 1] == '\n' {
                    i += 1
                }
                i += 1
            }
            line_is_block_comment = no
            continue
        }
        i += 1
    }
    while comment_lines.len > 0 and
            comment_lines[comment_lines.len].len == 0 {
        comment_lines.pop()
    }
    if not group_comments {
        return comment_lines
    }
    var groups = []
    var current_group = none
    for comment_line in comment_lines {
        if comment_line == "" {
            if current_group != none {
                groups.add(current_group)
            }
            current_group = none
        } else {
            if current_group == none {
                current_group = []
            }
            current_group.add(comment_line)
        }
    }
    if current_group != none {
        groups.add(current_group)
    }
    return groups
}

func get_build_options_from_str(s) {
    var lines = get_comments_from_str(
        s, stop_at_noncomment=yes, only_doc_comments=yes,
        strip_noncommands=yes, group_comments=no,
        c_style_comments=no
    )
    var opts_lines = []
    for line in lines {
        if not line.startswith("## @build_options ") {
            continue
        }
        opts_lines.add(line.sub("## @build_options ".len + 1))
    }

    var opts = {->}
    for line in opts_lines {
        var opt_start = 1
        var opt_unquoted_label = ""
        var opt_unquoted_value = none
        var opt_had_assign = no
        var in_quote = none
        var i = 1
        while i <= line.len {
            if i + 1 > line.len or (in_quote == none and (
                    line[i + 1] == ' ' or
                    line[i + 1] == '\t')) or
                    (in_quote != none and in_quote == line[i + 1]) {
                if line[i] != '=' and opt_had_assign {
                    opt_unquoted_value += line[i]
                } else {
                    if line[i] != '=' {
                        opt_unquoted_label += line[i]
                    } else {
                        opt_unquoted_value = ""
                    }
                }
                if opt_unquoted_label.trim().len > 0 {
                    opt_unquoted_label = opt_unquoted_label.trim()
                    if not opts.has(opt_unquoted_label) {
                        opts[opt_unquoted_label] = opt_unquoted_value
                    }
                }
                i += 2
                opt_start = i
                opt_unquoted_label = ""
                opt_unquoted_value = none
                opt_had_assign = no
                in_quote = none
                continue
            } elseif in_quote == none and (
                    line[i] == "'" or line[i] == '"') {
                in_quote = line[i]
                i += 1
                continue
            } elseif in_quote != none and in_quote == line[i] {
                in_quote = none
                i += 1
                continue
            } elseif not opt_had_assign and line[i] == '=' {
                opt_had_assign = yes
                opt_unquoted_value = ""
                i += 1
                continue
            } else {
                if opt_had_assign {
                    opt_unquoted_value += line[i]
                } else {
                    opt_unquoted_label += line[i]
                }
            }
            i += 1
        }
    }
    return opts
}

func get_build_options_from_file(path) {
    with io.open(path, "r") later as f {
        var file_str = f.read() later:

        await file_str
        return get_build_options_from_str(file_str)
    }
}

