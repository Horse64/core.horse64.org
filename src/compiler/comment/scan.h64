## @module compiler.comment.scan
# Copyright (c) 2023-2024, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import io from core.horse64.org
import net.fetch from core.horse64.org
import path from core.horse64.org
import uri from core.horse64.org
import wildcard from core.horse64.org

import compiler.comment.command as command_comment

func scan_uri_for_comments(file_uri, allow_vfs=no, allow_disk=yes,
        strip_noncommands=no, c_style_comments=no,
        only_doc_comments=yes) {
    var contents = net.fetch.get_str(
        file_uri, allow_disk=allow_disk, allow_vfs=allow_vfs
    ) later:

    await contents
    var comments = command_comment.get_comments_from_str(
        contents, stop_at_noncomment=no,
        only_doc_comments=only_doc_comments,
        strip_noncommands=strip_noncommands,
        c_style_comments=c_style_comments,
        group_comments=yes
    )
    return comments
}

type TreeCommentScanner {
    var allow_vfs protect = no
    var allow_disk protect = yes
    var _walker
    var _outstanding_files = []
    var strip_noncommands
    var dir_path
    var dir_is_vfs = no
    var include_patterns = ["*"]
    var exclude_patterns = []
    var _include_apply protect = no
    var _exclude_apply protect = no
    var c_style_patterns = ["*.c", "*.h", "*.cpp", "*.hpp"]
}

func TreeCommentScanner.init(dir_uri, strip_noncommands=no,
        exclude_dir_names=[], exclude_dot_names=yes,
        exclude_patterns=[],
        include_patterns=["**"], c_style_patterns=["*.c", "*.h",
            "*.cpp", "*.hpp"], allow_disk=yes, allow_vfs=yes) {
    if not {"file", "vfs"}.has(uri.get_protocol(dir_uri)) {
        throw new NotImplementedError("Protocol not "
            "implemented for scanning.")
    }

    var include_patterns_transformed = []
    for pattern in include_patterns {
        include_patterns_transformed +=
            wildcard.transform_for_rel_paths(pattern)
    }
    if include_patterns_transformed.len != 1 or
            include_patterns_transformed[1] != "**" {
        self._include_apply = yes
        self.include_patterns = include_patterns_transformed.copy()
    }
    self.c_style_patterns = []
    for pattern in c_style_patterns {
        self.c_style_patterns +=
            wildcard.transform_for_rel_paths(pattern)
    }
    self.exclude_patterns = []
    for pattern in exclude_patterns {
        self._exclude_apply = yes
        self.exclude_patterns +=
            wildcard.transform_for_rel_paths(pattern)
    }
    self.dir_path = uri.to_file_or_vfs_path(dir_uri)
    self.dir_is_vfs = (uri.get_protocol(dir_uri) == "vfs")

    self._walker = io.tree_list_walker(
        self.dir_path, relative=yes,
        return_dirs=no,
        exclude_dot_names=exclude_dot_names,
        exclude_dir_names=exclude_dir_names,
        allow_vfs=allow_vfs, allow_disk=allow_disk)
    self.strip_noncommands = strip_noncommands
}

func TreeCommentScanner.produce_next_file_path {
    if self._outstanding_files.len > 0 {
        return self._outstanding_files.pop()
    }
    var entries = self._walker.walk() later:

    await entries
    if entries == none {
        return none
    }
    for entry in entries {
        var must_exclude = no
        if self._exclude_apply {
            for pattern in self.exclude_patterns {
                if wildcard.match(pattern, entry) {
                    must_exclude = yes
                    break
                }
            }
        }
        var match_found = yes
        if self._include_apply {
            match_found = no
            for pattern in self.include_patterns {
                if wildcard.match(pattern, entry) {
                    match_found = yes
                    break
                }
            }
        }
        if match_found {
            self._outstanding_files.add(entry)
        }
    }

    if self._outstanding_files.len > 0 {
        return self._outstanding_files.pop()
    }
    entries = self._walker.walk() later repeat
}

func TreeCommentScanner.produce_next_comments {
    var next_file_path = self.produce_next_file_path() later:

    await next_file_path
    if next_file_path == none {
        return none
    }
    var is_c_style = no
    for pattern in self.c_style_patterns {
        if wildcard.match(pattern, next_file_path) {
            is_c_style = yes
            break
        }
    }
    next_file_path = path.join(self.dir_path, next_file_path)
    var file_uri = if self.dir_is_vfs
        (uri.from_vfs_path(next_file_path)) else
        (uri.from_disk_path(next_file_path))
    var comments = scan_uri_for_comments(
        file_uri,
        only_doc_comments=yes,
        strip_noncommands=self.strip_noncommands,
        c_style_comments=is_c_style,
        allow_vfs=self.dir_is_vfs,
        allow_disk=not self.dir_is_vfs) later:

    await comments
    return comments
}

