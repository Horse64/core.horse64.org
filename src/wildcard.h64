## @module wildcard
# Copyright (c) 2024, ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import path from core.horse64.org

func transform_for_rel_paths(pattern) {
    pattern = pattern.replace("/", path.sep)
    if pattern.starts(path.sep) {
        # This pattern always applies on a full path level.
        var offset = 2
        while pattern.len >= offset and pattern[offset] == path.sep {
            offset += 1
        }
        return [pattern.sub(offset), pattern.sub(offset) + path.sep + "**"]
    }
    if pattern.find(path.sep) == none {
        # Treat as a pattern applying on a per-file level rather than
        # full path level.
        var new_pattern = ""
        if not pattern.starts("**") {
            if pattern.starts("*") {
                var result = ["*" + pattern]
                if not pattern.ends("**") {
                    result += ["*" + pattern + path.sep + "**"]
                }
                return result
            }
            var result = ["**" + path.sep + pattern, pattern]
            if not pattern.ends("**") {
                result += ["**" + path.sep + pattern + path.sep + "**",
                    pattern + path.sep + "**"]
            }
            return result
        }
        var result = [pattern]
        if not pattern.ends("**") {
            result += [pattern + path.sep + "**"]
        }
        return result
    }
    var result = []
    if pattern.ends(path.sep) {
        result += [pattern + "**"]
    } else {
        result += [pattern]
    }
    if not pattern.ends("**") {
        result += [pattern + path.sep + "**"]
    }
    return result
}

func transform_list_for_rel_paths(patterns) {
    var result = []
    for pattern in patterns {
        result += transform_for_rel_paths(pattern)
    }
    return result
}

