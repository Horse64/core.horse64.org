# @module textfmt
# Copyright (c) 2020-2022,  ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import math from core.horse64.org
import text from core.horse64.org


## @func wrap
## Wrap monospace text e.g. for orderly terminal output. It uses
## @{str.glyph_len} internally to better handle international text.
##
## @returns str The text but wrapped and with prefixes applied, if any.
## @param text str The text to be wrapped.
## @param length num The length of glyphs after which lines in
##   the text should be wrapped.
## @param all_lines_prefix str A prefix to add to all lines after
##   wrapping. The result will still fit the specified wrap length.
## @param later_lines_prefix str like all_lines_prefix, except it
##   it will only be applied to the 2nd and later lines, not the
##   first one.
func wrap(multiline_text, length,
        all_lines_prefix="",
        later_lines_prefix="",
        ) {
    # Some sanity checks:
    var s = multiline_text
    if typename(length) != "num" or length <= 0 {
        throw new ValueError(
            "wrapped-to length must be positive number"
        )
    }
    length = math.round(length)
    var line_break = "\n"
    if s.has("\r\n") {
        line_break = "\r\n"
    }
    s = s.replace("\r\n", "\n").replace("\r", "\n")

    # Wrap the input text as often as required:
    var final_lines = []
    var is_first_line = yes
    while yes {
        # Compute available line length given the prefixes:
        var line_length = length - all_lines_prefix.glyph_len
        var prefix = all_lines_prefix + ""
        if not is_first_line {
            line_length -= later_lines_prefix.glyph_len
            prefix = later_lines_prefix + prefix
        }

        if s.glyph_len <= line_length or s.glyph_len <= 1 {
            # What we have already fits into the requested wrap width.
            var remaining_lines_noprefix = s.split("\n")
            var remaining_lines = []
            for remaining_line in remaining_lines_noprefix {
                remaining_lines.add(prefix + remaining_line)
                prefix = later_lines_prefix + all_lines_prefix + ""
            }
            final_lines += remaining_lines
            var result = final_lines.join(line_break)
            return result
        }
        # This is where we want to wrap at the latest, worst case:
        var wrap_index = math.max(2,
            text.full_glyphs_in_sub(
                s, 1, line_length).len)

        # Some helper info for figuring out a nicer wrap point:
        var line_break_index = s.find("\n")
        var s_half_glyphs = math.max(1, math.round(s.glyph_len / 2))
        var s_half_glyphs_index =
            # (String index where we have exactly half the glyphs)
            s.glyph_sub(1, s_half_glyphs).len
        var s_two_glyph_index =
            # (String index after two full glyphs)
            s.glyph_sub(1, 2).len

        # If the line break fits the maximum worst case range, use it:
        if line_break_index != none and
                line_break_index < wrap_index {
            wrap_index = line_break_index
        }

        # Try if there's a nicer, closer wrap point than we have now:
        var k = wrap_index
        while k > s_half_glyphs_index + 1 and
                k > s_two_glyph_index + 1 {
            if s[k] == " " or
                    s[k] == "\n" or
                    s[k] == "\t" {
                wrap_index = k
                break
            }
            k -= 1
        }

        # Do the wrap:
        final_lines.add(prefix + s.sub(1, wrap_index))
        if s[wrap_index] == "\n" or s[wrap_index] == "\t" or
                s[wrap_index] == "\r" or s[wrap_index] == " " {
            assert(wrap_index >= 1)
            s = s.sub(wrap_index + 1)
        } else {
            assert(wrap_index >= 2)
            s = s.sub(wrap_index)
        }
        is_first_line = no
    }
    var result = final_lines.join(line_break)
    return result
}

