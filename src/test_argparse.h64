# Copyright (c) 2020-2024,  ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import argparse from core.horse64.org

func test_argparse {
    var defs, result

    result = argparse.parse(
        args=["-a", "--b", "--", "-c", "e"]
    )
    assert(result.output == "")
    assert("args" in result.args)
    assert(result.args["args"].len == 2)
    assert("-a" in result.args and result.args["-a"] == yes)
    assert("--b" in result.args and result.args["--b"] == yes)
    assert(not "-c" in result.args)

    defs = new argparse.ArgumentDefs(program_name="bla")
    defs.add_catchall(
        "args", can_be_empty=yes)
    result = argparse.parse(arg_defs=defs, args=[])
    assert(result.output == "")
    assert("args" in result.args)
    assert(result.args["args"].len == 0)

    defs = new argparse.ArgumentDefs(program_name="bla")
    defs.add_catchall(
        "args", can_be_empty=no)
    result = argparse.parse(arg_defs=defs, args=[])
    assert("missing" in result.output.lower())

    defs = new argparse.ArgumentDefs(program_name="bla")
    defs.add_arg("action")
    defs.add_catchall(
        "args", can_be_empty=no)
    result = argparse.parse(arg_defs=defs, args=["test", "--help"])
    assert(result.output == "")
    assert("args" in result.args)
    assert("action" in result.args)
    assert(result.args["args"].len == 1)
    assert(result.args["args"][1] == "--help")
    assert(result.args["action"] == "test")

    defs = new argparse.ArgumentDefs(program_name="bla")
    defs.add_switch("--test")
    defs.add_arg("action", optional=yes)
    defs.add_catchall(
        "args", can_be_empty=no)
    result = argparse.parse(arg_defs=defs, args=["test", "--test"])
    assert(result.output == "")
    assert("args" in result.args)
    assert("action" in result.args)
    assert(result.args["args"].len == 1)
    assert(result.args["args"][1] == "--test")
    assert(result.args["--test"] == no)
    assert(result.args["action"] == "test")

    defs = new argparse.ArgumentDefs(program_name="bla")
    defs.add_switch("--test")
    defs.add_arg("action", optional=yes)
    defs.add_catchall(
        "args", can_be_empty=no)
    result = argparse.parse(arg_defs=defs, args=["--test", "test"])
    assert(result.output == "")
    assert("args" in result.args)
    assert("action" in result.args)
    assert(result.args["args"].len == 1)
    assert(result.args["args"][1] == "test")
    assert(result.args["--test"] == yes)
    assert(result.args["action"] == none)

    defs = new argparse.ArgumentDefs(program_name="bla")
    defs.add_switch("--test")
    defs.add_arg("action", optional=yes)
    defs.add_catchall(
        "args", can_be_empty=yes)
    result = argparse.parse(arg_defs=defs, args=["--test", "test"])
    assert(result.output == "")
    assert("args" in result.args)
    assert("action" in result.args)
    assert(result.args["args"].len == 0)
    assert(result.args["--test"] == yes)
    assert(result.args["action"] == "test")

    defs = new argparse.ArgumentDefs(program_name="bla")
    defs.add_switch("--test")
    defs.add_arg("action", optional=yes)
    defs.add_catchall(
        "args", can_be_empty=no)
    result = argparse.parse(arg_defs=defs, args=["--test", "test"])
    assert(result.output == "")
    assert(result.args["args"].len == 1)
    assert(result.args["args"][1] == "test")
    assert(result.args["--test"] == yes)
    assert(result.args["action"] == none)

    defs = new argparse.ArgumentDefs(program_name="bla")
    defs.add_arg("action")
    defs.add_catchall(
        "args", can_be_empty=no)
    result = argparse.parse(arg_defs=defs, args=["test", "--", "--help"])
    assert(result.output == "")
    assert("args" in result.args)
    assert("action" in result.args)
    assert(result.args["args"].len == 2)
    assert(result.args["args"][1] == "--")
    assert(result.args["args"][2] == "--help")
    assert(result.args["action"] == "test")

    defs = new argparse.ArgumentDefs(program_name="bla")
    defs.add_arg("action", optional=yes)
    defs.add_catchall(
        "args", can_be_empty=no)
    result = argparse.parse(arg_defs=defs, args=["test", "--help", "--"])
    assert(result.output == "")
    assert("args" in result.args)
    assert("action" in result.args)
    assert(result.args["args"].len == 2)
    assert(result.args["args"][1] == "--help")
    assert(result.args["args"][2] == "--")
    assert(result.args["action"] == "test")

    defs = new argparse.ArgumentDefs(program_name="bla")
    defs.add_arg("action")
    defs.add_catchall(
        "args", can_be_empty=no)
    result = argparse.parse(arg_defs=defs, args=["--", "test", "--help"])
    assert(result.output == "")
    assert("args" in result.args)
    assert("action" in result.args)
    assert(result.args["args"].len == 1)
    assert(result.args["args"][1] == "--help")
    assert(result.args["action"] == "test")
}

