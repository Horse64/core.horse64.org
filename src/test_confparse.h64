# Copyright (c) 2020-2024,  ellie/@ell1e & Horse64 Team (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import confparse from core.horse64.org
import textfmt from core.horse64.org

func test_configs {
    var result, haderror

    result = confparse.parse_str(
                allow_multiline=yes, allow_multiassign=yes,
                error_on_mistakes=yes, ("
        # This is a test config file
        [mysection]
        abc.cde = 1 2 3 4
        "
    ))
    assert(result.has("mysection"))
    assert(result["mysection"].has("abc.cde"))
    assert(result["mysection"]["abc.cde"] == "1 2 3 4")

    result = confparse.parse_str(
        allow_multiline=yes, allow_multiassign=yes,
        error_on_mistakes=yes, "
            # This is a test config file
            [mysection]
            abc.cde = 1 2 3 4
                aciaeojre
            "
    )
    assert(result.has("mysection"))
    assert(result["mysection"].has("abc.cde"))
    assert(result["mysection"]["abc.cde"] == "1 2 3 4 aciaeojre")

    haderror = no
    do {
        # Expected to error since...
        result = confparse.parse_str(
            allow_multiline=yes, allow_multiassign=yes,
            error_on_mistakes=yes, "
                [mysection]
                abc.cde = 1 2 3 4

                    aciaeojre
                    # (...the blank line above breaks multiline)
                "
        )
    } rescue confparse.ConfParseError {
        haderror = yes
    }
    assert(haderror)

    haderror = no
    do {
        # Should also error since...
        result = confparse.parse_str(
            allow_multiline=yes, allow_multiassign=yes,
            error_on_mistakes=yes, "
                [mysection]
                abc.cde = 1 2 3 4
                # (...this outdented line stops multiline too.)
                    aciaeojre
                "
        )
    } rescue confparse.ConfParseError {
        haderror = yes
    }
    assert(haderror)

    result = confparse.parse_str(
        allow_multiline=yes, allow_multiassign=yes,
        error_on_mistakes=yes, "
            [mysection]
            abc.cde = 1 2 3 4
                # Should work, same indent! Good multiline!
                aciaeojre
            "
    )
    assert(result.has("mysection"))
    assert(result["mysection"].has("abc.cde"))
    assert(result["mysection"]["abc.cde"] == "1 2 3 4 aciaeojre")

    haderror = no
    do {
        # This should error since...
        result = confparse.parse_str(
            allow_multiline=yes, allow_multiassign=yes,
            error_on_mistakes=yes, "
                [mysection]
                abc.cde = 1 2 3 4
                    aciaeojre
                  earijoaeri
                  # (...we changed the indent!)
                "
        )
    } rescue confparse.ConfParseError {
        haderror = yes
    }
    assert(haderror)

    result = confparse.parse_str(
        allow_multiline=yes, allow_multiassign=yes,
        error_on_mistakes=yes, "
            [mysection]
            abc.cde = 1 2 3 4
                def = hello=
            # The equals assign should make this not multiline.
            "
    )
    assert(result.has("mysection"))
    assert(result["mysection"].has("abc.cde"))
    assert(result["mysection"]["abc.cde"] == "1 2 3 4")
    assert(result["mysection"]["def"] == "hello=")

    result = confparse.parse_str(
        allow_multiline=yes, allow_multiassign=yes,
        error_on_mistakes=yes, "
            [mysection]
            abc.cdkk = 1 2 3 4
                def == a = b
            # A double equals doesn't count! Multiline!
            "
    )
    assert(result.has("mysection"))
    assert(result["mysection"].has("abc.cdkk"))
    assert(result["mysection"]["abc.cdkk"] ==
        "1 2 3 4 def == a = b")
}

