## @module log
# Copyright (c) 2020-2025, ellie/@ell1e & Horse64's contributors
# (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

import io from core.horse64.org
import threading from core.horse64.org


var terminal_output_enabled protect = yes
var file_output_lock protect = threading.make_lock()
var file_output_path protect = none
var program_prefix protect = none
var _write_lines_queue = []

enum LogKind {
    L_DEBUG,
    L_INFO,
    L_WARNING,
    L_ERROR,
}

func write_to_file_if_needed(raw_line) {
    # Add line to ordered queue:
    _write_lines_queue.add(raw_line)

    # Then, see if we can write out the current queue:
    file_output_lock.lock() later:
    var f
    do {
        if file_output_path == none {
            # No disk file configured, just throw things away:
            _write_lines_queue = []
            return
        }

        # Open disk file to write to:
        f = io.open(file_output_path, "a") later:
        await f
        if _write_lines_queue.len == 0 {
            # A parallel call to this function already wrote it all.
            return
        }

        # Get first line and write it here::
        var line = _write_lines_queue.pop_at(1)
        var result = f.write(line + "\n") later:
        await result
        if _write_lines_queue.len == 0 {
            # If we have written all lines, exit.
            return
        }
        # We have more lines, continue with next one:
        line = _write_lines_queue.pop_at(1)
        result = f.write(line + "\n") later repeat
    } finally {
        # Once we're done, make sure to close the file.
        if f != none {
            f.close()
        }
        file_output_lock.unlock()
    }
}

func l(msg, kind=L_INFO, where="") {
    var prefix = "debug"
    if kind == L_INFO {
        prefix = "info"
    } elseif kind == L_WARNING {
        prefix = "warning"
    } elseif kind == L_ERROR {
        prefix = "error"
    }
    if program_prefix != none {
        prefix = program_prefix + ": " + prefix
    }
    if where != none and where.len > 0 {
        prefix = prefix + ": " + where.trim()
    }
    if terminal_output_enabled {
        print(prefix + ": " + msg)
    }
    write_to_file_if_needed(
        prefix + ": " + msg
    ) later ignore
}

func set_file_output_async(path) {
    file_output_lock.lock() later:
    do {
        file_output_path = none
        var f = io.open(path, "w") later:
        await f
        f.close()
        file_output_path = path
    } finally {
        file_output_lock.unlock()
    }
}

func set_file_output(path) {
    set_file_output_async(path) later ignore
}

func set_program_prefix(name) {
    program_prefix = name
}

func set_terminal_output(yesno) {
    if typename(yesno) != "bool" {
        throw new TypeError("Terminal output must be "
            "set to yes or no.")
    }
    terminal_output_enabled = yesno
}

